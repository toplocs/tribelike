diff --git a/client/src/components/ApiKeys.vue b/client/src/components/ApiKeys.vue
new file mode 100644
index 00000000..611a7c6e
--- /dev/null
+++ b/client/src/components/ApiKeys.vue
@@ -0,0 +1,79 @@
+<template>
+  <div class="mb-2">
+    <label
+      for="private"
+      class="block text-gray-900 dark:text-gray-100 font-medium text-sm mb-2"
+    >
+      Private key
+    </label>
+
+    <div class="flex flex-row gap-1">
+      <TextInput
+        type="text"
+        id="private"
+        name="private"
+        placeholder="Your private key"
+        v-model="keys.private"
+        readonly
+      />
+      <span class="w-[100px]">
+        <ActionButton title="Renew" @click="renewKeys" />
+      </span>
+    </div>
+  </div>
+
+  <div class="mb-2">
+    <label
+      for="public"
+      class="block text-gray-900 dark:text-gray-100 font-medium text-sm mb-2"
+    >
+      Public key
+    </label>
+
+    <div class="flex flex-row gap-1">
+      <TextInput
+        type="text"
+        id="public"
+        name="public"
+        placeholder="Your public key"
+        v-model="keys.public"
+        readonly
+      />
+      <span class="w-[100px]">
+        <ActionButton title="Renew" @click="renewKeys" />
+      </span>
+    </div>
+  </div>
+</template>
+
+//
+<script setup lang="ts">
+import { ref } from 'vue';
+import TextInput from '@/components/common/TextInput.vue';
+import ActionButton from '@/components/common/ActionButton.vue';
+import SEA from 'gun/sea';
+
+const keys = ref({
+  public: '',
+  private: ''
+});
+
+const errorMessage = ref<string>('');
+const successMessage = ref<string>('');
+
+const renewKeys = async () => {
+  try {
+    const pair = await SEA.pair();
+    keys.value.public = pair.pub;
+    keys.value.private = pair.priv; // Or pair.priv if you want signing keys
+
+    successMessage.value = 'Keys successfully renewed!';
+    errorMessage.value = '';
+  } catch (err) {
+    console.error(err);
+    errorMessage.value = 'Failed to generate keys.';
+    successMessage.value = '';
+  }
+};
+
+</script>
diff --git a/client/src/components/ManagePlugins.vue b/client/src/components/ManagePlugins.vue
new file mode 100644
index 00000000..a0cebccf
--- /dev/null
+++ b/client/src/components/ManagePlugins.vue
@@ -0,0 +1,45 @@
+<template>
+  <h2 class="text-xl font-semibold mb-4">Manage Plugins:</h2>
+
+  <ul v-if="plugins.length" class="mb-6 space-y-2">
+    <PluginItem
+      v-for="plugin in plugins"
+      :key="plugin.url"
+      :plugin="plugin"
+      @select="selected = $event"
+    />
+  </ul>
+
+
+  <div v-else class="text-sm text-gray-600 dark:text-gray-400 mb-6">
+    No plugins found.
+  </div>
+
+  <PluginForm :selected="selected" @plugin-added="fetchPlugins" />
+</template>
+
+//
+<script setup lang="ts">
+import { ref, onMounted } from 'vue';
+import PluginItem from '@/components/list/PluginItem.vue';
+import PluginForm from '@/components/forms/Plugin.vue';
+import gun from '@/services/gun'; 
+
+const plugins = ref<any[]>([]);
+const selected = ref(null);
+
+const fetchPlugins = () => {
+  const pluginList: any[] = [];
+
+  gun.get('plugins')
+  .map()
+  .once((data) => {
+    if (data?.url) {
+      pluginList.push(data);
+      plugins.value = [...pluginList];
+    }
+  });
+}
+
+onMounted(fetchPlugins);
+</script>
diff --git a/client/src/components/forms/Plugin.vue b/client/src/components/forms/Plugin.vue
new file mode 100644
index 00000000..c4ff6803
--- /dev/null
+++ b/client/src/components/forms/Plugin.vue
@@ -0,0 +1,275 @@
+<template>
+  <form @submit.prevent="addPlugin" class="space-y-6">
+    <Callout v-if="successMessage" color="green">
+      {{ successMessage }}
+    </Callout>
+
+    <Callout v-if="errorMessage" color="red">
+      {{ errorMessage }}
+    </Callout>
+
+    <div>
+      <label for="name" class="block text-sm font-medium text-gray-900 dark:text-gray-100">Plugin Name</label>
+      <TextInput
+        v-model="formData.name"
+        id="name"
+        type="text"
+        placeholder="Plugin name"
+      />
+    </div>
+
+    <div>
+      <label for="url" class="block text-sm font-medium text-gray-900 dark:text-gray-100">Plugin URL</label>
+      <TextInput
+        v-model="formData.url"
+        id="url"
+        type="text"
+        placeholder="https://example.com/plugin.js"
+      />
+    </div>
+
+    <div>
+      <label class="block text-sm font-medium text-gray-900 dark:text-gray-100">Plugin ID</label>
+      <div class="text-sm text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 p-2 rounded">
+        {{ id }}
+      </div>
+    </div>
+
+
+    <!-- Slots -->
+    <div>
+      <label class="block text-sm font-semibold text-gray-900 dark:text-gray-100">Slots</label>
+      <div
+        v-for="(slot, index) in formData.slots"
+        :key="index"
+        class="flex gap-2 mt-2"
+      >
+        <TextInput
+          v-model="slot.slot"
+          placeholder="Slot name (e.g. InfoView)"
+          class="flex-1"
+        />
+        <TextInput
+          v-model="slot.component"
+          placeholder="Component (e.g. Main)"
+          class="flex-1"
+        />
+        <button
+          @click.prevent="removeSlot(index)"
+          class="cursor-pointer text-red-500 text-sm"
+        >
+          Remove
+        </button>
+      </div>
+      <button
+        @click.prevent="addSlot"
+        class="cursor-pointer text-blue-500 text-sm mt-1"
+      >
+        + Add Slot
+      </button>
+    </div>
+
+    <!-- Paths -->
+    <div>
+      <label class="block text-sm font-semibold text-gray-900 dark:text-gray-100">Paths</label>
+      <div
+        v-for="(path, index) in formData.paths"
+        :key="index"
+        class="flex gap-2 mt-2"
+      >
+        <TextInput
+          v-model="path.path"
+          placeholder="Path (e.g. location)"
+          class="flex-1"
+        />
+        <TextInput
+          v-model="path.component"
+          placeholder="Component (e.g. CommunityView)"
+          class="flex-1"
+        />
+        <button
+          @click.prevent="removePath(index)"
+          class="cursor-pointer text-red-500 text-sm"
+        >
+          Remove
+        </button>
+      </div>
+      <button
+        @click.prevent="addPath"
+        class="cursor-pointer text-blue-500 text-sm mt-1"
+      >
+        + Add Path
+      </button>
+    </div>
+
+    <!-- Tabs -->
+    <div>
+      <label class="block text-sm font-semibold text-gray-900 dark:text-gray-100">Tabs</label>
+      <div
+        v-for="(tab, index) in formData.tabs"
+        :key="index"
+        class="flex gap-2 mt-2"
+      >
+        <TextInput
+          v-model="tab.value"
+          placeholder="Tab name (e.g. Community)"
+          class="flex-1"
+        />
+        <TextInput
+          v-model="tab.href"
+          placeholder="Href (e.g. location)"
+          class="flex-1"
+        />
+        <button
+          @click.prevent="removeTab(index)"
+          class="cursor-pointer text-red-500 text-sm"
+        >
+          Remove
+        </button>
+      </div>
+      <button
+        @click.prevent="addTab"
+        class="cursor-pointer text-blue-500 text-sm mt-1"
+      >
+        + Add Tab
+      </button>
+    </div>
+
+    <SubmitButton
+      type="submit"
+      :resetTrigger="errorMessage"
+    >
+      Update Plugins
+    </SubmitButton>
+  </form>
+</template>
+
+//
+<script setup lang="ts">
+import { ref, computed, watch } from 'vue';
+import TextInput from '@/components/common/TextInput.vue';
+import SubmitButton from '@/components/common/SubmitButton.vue';
+import Callout from '@/components/common/Callout.vue';
+import gun from '@/services/gun'; 
+
+const { selected } = defineProps({
+  selected: {
+    type: Object,
+    default: null,
+  }
+})
+const emit = defineEmits(['plugin-added']);
+const formData = ref({
+  name: '',
+  url: '',
+  slots: [{
+    slot: 'InfoView',
+    component: 'Main'
+  }],
+  paths: [],
+  tabs: []
+});
+const successMessage = ref('');
+const errorMessage = ref('');
+const id = computed(() => {
+  return formData.value.name
+    .toLowerCase()
+    .trim()
+    .replace(/\s+/g, '_')
+    + '_plugin';
+});
+
+const addPlugin = () => {
+  const { name, url, slots, paths, tabs } = formData.value;
+
+  if (!name || !url) {
+    errorMessage.value = 'Name and URL are required.';
+    successMessage.value = '';
+    return;
+  }
+
+  const pluginId = id.value;
+  const chain = gun.get(pluginId);
+
+  chain.once((existing: any) => {
+    const node = chain.put({ id: pluginId, name, url });
+
+    // Clear previous data
+    gun.get(`${pluginId}/slots`).map().once((s: any, k: string) => {
+      if (k) gun.get(`${pluginId}/slots`).get(k).put(null);
+    });
+    gun.get(`${pluginId}/paths`).map().once((p: any, k: string) => {
+      if (k) gun.get(`${pluginId}/paths`).get(k).put(null);
+    });
+    gun.get(`${pluginId}/tabs`).map().once((t: any, k: string) => {
+      if (k) gun.get(`${pluginId}/tabs`).get(k).put(null);
+    });
+
+    // Re-add updated data
+    const slotChain = gun.get(`${pluginId}/slots`);
+    slotChain.map().once(x => slotChain.unset(x));
+    slots.forEach(s => slotChain.set(s));
+
+    const pathChain = gun.get(`${pluginId}/paths`);
+    paths.forEach(p => pathChain.set(p));
+
+    const tabChain = gun.get(`${pluginId}/tabs`);
+    tabs.forEach(t => tabChain.set(t));
+
+    node.get('slots').put(slotChain);
+    node.get('paths').put(pathChain);
+    node.get('tabs').put(tabChain);
+
+    gun.get('plugins').set(node);
+
+    successMessage.value = existing ? `${name} Plugin updated!` : `${name} Plugin added successfully!`;
+    errorMessage.value = '';
+    emit('plugin-added');
+  });
+};
+
+const addSlot = () => formData.value.slots.push({ slot: '', component: '' });
+const removeSlot = (index: number) => formData.value.slots.splice(index, 1);
+
+const addPath = () => formData.value.paths.push({ path: '', component: '' });
+const removePath = (index: number) => formData.value.paths.splice(index, 1);
+
+const addTab = () => formData.value.tabs.push({ value: '', href: '' });
+const removeTab = (index: number) => formData.value.tabs.splice(index, 1);
+
+const loadSelectedPlugin = (pluginId: string) => {
+  formData.value = {
+    name: '',
+    url: '',
+    slots: [],
+    paths: [],
+    tabs: []
+  };
+
+  const chain = gun.get(pluginId);
+
+  chain.once((data: any) => {
+    if (data) {
+      formData.value.name = data.name || '';
+      formData.value.url = data.url || '';
+    }
+    gun.get(`${pluginId}/slots`).map().once((data: any) => {
+      if (data?.slot) formData.value.slots.push({ ...data });
+    });
+
+    gun.get(`${pluginId}/paths`).map().once((data: any) => {
+      if (data?.path) formData.value.paths.push({ ...data });
+    });
+
+    gun.get(`${pluginId}/tabs`).map().once((data: any) => {
+      if (data?.value) formData.value.tabs.push({ ...data });
+    });
+  });
+};
+
+watch(() => selected, (newVal) => {
+  if (newVal) {
+    loadSelectedPlugin(newVal.id);
+  }
+}, { immediate: true });
+</script>
diff --git a/client/src/components/list/PluginItem.vue b/client/src/components/list/PluginItem.vue
new file mode 100644
index 00000000..3e93dbc7
--- /dev/null
+++ b/client/src/components/list/PluginItem.vue
@@ -0,0 +1,51 @@
+<template>
+  <li
+    class="p-2 cursor-pointer border rounded bg-gray-50 dark:bg-gray-800"
+    @click="$emit('select', plugin)"
+  >
+    <div class="flex items-center justify-between">
+      <strong class="text-gray-900 dark:text-gray-100">{{ plugin.name }}</strong>
+      <span
+        :class="[
+          'inline-block w-3 h-3 rounded-full',
+          isOnline === null ? 'bg-gray-400' : isOnline ? 'bg-green-500' : 'bg-red-500'
+        ]"
+      ></span>
+    </div>
+    <p class="text-xs text-gray-500">{{ plugin.url }}</p>
+  </li>
+</template>
+
+<script setup lang="ts">
+import { onMounted, ref, watch } from 'vue';
+
+const props = defineProps<{
+  plugin: {
+    name: string;
+    url: string;
+  };
+}>();
+const emit = defineEmits(['select']);
+
+const isOnline = ref<boolean | null>(null);
+
+const checkStatus = async () => {
+  isOnline.value = null;
+  try {
+    const controller = new AbortController();
+    const timeout = setTimeout(() => controller.abort(), 3000);
+    await fetch(props.plugin.url, {
+      method: 'HEAD',
+      mode: 'no-cors',
+      signal: controller.signal
+    });
+    clearTimeout(timeout);
+    isOnline.value = true;
+  } catch {
+    isOnline.value = false;
+  }
+};
+
+onMounted(checkStatus);
+watch(() => props.plugin.url, checkStatus);
+</script>
diff --git a/client/src/views/topic/PluginsView.vue b/client/src/views/topic/PluginsView.vue
index e8666c5c..20b50256 100644
--- a/client/src/views/topic/PluginsView.vue
+++ b/client/src/views/topic/PluginsView.vue
@@ -6,16 +6,6 @@
           A list of all available plugins:
         </Title>
       </div>
-
-      <ul
-        v-for="plugin in plugins"
-        :key="plugin.id"
-      >
-        <PluginListItem
-          :plugin="plugin"
-          :profileId="profile?.id"
-        />
-      </ul>
     </Card>
   </div>
 </template>
@@ -26,7 +16,6 @@ import { ref, inject, computed, watchEffect, onMounted } from 'vue';
 import { useRouter } from 'vue-router';
 import Card from '@/components/common/Card.vue';
 import Title from '@/components/common/Title.vue';
-import PluginListItem from '@/components/list/PluginListItem.vue';
 import defaultPluginSettings from '@/assets/pluginSettings';
 
 const router = useRouter();
