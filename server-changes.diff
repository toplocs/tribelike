diff --git a/server/.env.default b/server/.env.default
index a8d93fcf..ec7b5218 100644
--- a/server/.env.default
+++ b/server/.env.default
@@ -1,11 +1,11 @@
-# RPID=localhost
-# PORT=3000
-# STORE_TYPE=file
-# DATABASE_URL="postgresql://postgres:postgres@0.0.0.0:5432/tribelike?schema=public"
+RPID=localhost
+PORT=3000
+STORE_TYPE=file
+DATABASE_URL="postgresql://postgres:postgres@0.0.0.0:5432/tribelike?schema=public"
 
-# SESSION_SECRET="secret_for_session"
-# JWT_SECRET="jwt_secret"
-# URL=http://localhost:5173
+SESSION_SECRET="secret_for_session"
+JWT_SECRET="jwt_secret"
+URL=http://localhost:5173
 
-# EMAIL_SERVER=
-# EMAIL_FROM=
\ No newline at end of file
+EMAIL_SERVER=
+EMAIL_FROM=
\ No newline at end of file
diff --git a/server/.gitignore b/server/.gitignore
new file mode 100644
index 00000000..6c2b0d2f
--- /dev/null
+++ b/server/.gitignore
@@ -0,0 +1,4 @@
+node_modules
+.env
+src/data
+data
\ No newline at end of file
diff --git a/server/dockerfile b/server/dockerfile
new file mode 100644
index 00000000..18b4449f
--- /dev/null
+++ b/server/dockerfile
@@ -0,0 +1,21 @@
+FROM node:alpine as dev
+
+WORKDIR /home/node/app
+RUN apk add openssl
+RUN corepack enable pnpm && corepack install -g pnpm@latest-9
+
+# pnpm fetch does require only lockfile
+COPY pnpm-lock.yaml ./
+
+RUN pnpm fetch
+
+COPY . .
+RUN pnpm install -r --offline
+
+RUN pnpm prisma generate --generator client
+
+
+FROM dev as prod
+ENV NODE_PATH=./build
+ENV NODE_ENV=production
+RUN pnpm build
\ No newline at end of file
diff --git a/server/package.json b/server/package.json
index 6e3c4298..467e5c36 100644
--- a/server/package.json
+++ b/server/package.json
@@ -7,33 +7,54 @@
     "dev": "DEVELOPMENT=true nodemon src/app.ts",
     "test": "pnpm vitest",
     "build": "pnpm --package=typescript dlx tsc",
-    "start": "NODE_PATH=./build node build/app.js"
+    "start": "NODE_PATH=./build node build/app.js",
+    "db:migrate": "pnpm prisma migrate dev",
+    "db:deploy": "pnpm prisma migrate deploy",
+    "generate:openapi": "pnpm exec ts-node ./src/swagger.ts"
   },
   "keywords": [],
   "author": "",
   "license": "MIT",
   "devDependencies": {
-    "@types/node": "^22.13.17",
-    "@types/nodemailer": "^6.4.17",
+    "@mermaid-js/mermaid-cli": "^11.4.2",
+    "@simplewebauthn/typescript-types": "^8.3.4",
+    "@types/cors": "^2.8.17",
+    "@types/crypto-js": "^4.2.2",
     "@types/express": "^5.0.1",
-    "@types/cors": "^2.8.19",
     "@types/morgan": "^1.9.9",
-    "@types/crypto-js": "^4.2.2",
+    "@types/multer": "^1.4.12",
+    "@types/node": "^22.13.17",
+    "@types/nodemailer": "^6.4.17",
+    "@types/supertest": "^6.0.3",
+    "@types/swagger-ui-express": "^4.1.8",
     "@types/uuid": "^10.0.0",
+    "@vitest/ui": "^3.1.1",
+    "cors": "^2.8.5",
+    "jose": "^5.6.3",
+    "madge": "^8.0.0",
+    "multer": "1.4.5-lts.2",
     "nodemon": "^3.1.9",
+    "prisma": "^5.17.0",
+    "supertest": "^7.1.0",
     "ts-node": "^10.9.2",
     "typescript": "^5.8.2",
     "vitest": "^3.1.1"
   },
   "dependencies": {
+    "@helia/dag-json": "^4.0.3",
+    "@prisma/client": "^6.5.0",
+    "@simplewebauthn/server": "^13.1.1",
     "@tribelike/types": "workspace:*",
-    "cors": "^2.8.5",
     "crypto-js": "^4.2.0",
     "dotenv": "^16.4.7",
     "express": "^5.1.0",
     "gun": "^0.2020.1240",
+    "helia": "^5.3.0",
+    "jsonl-parse-stringify": "^1.0.3",
     "morgan": "^1.10.0",
     "nodemailer": "^6.10.0",
+    "swagger-autogen": "^2.23.7",
+    "swagger-ui-express": "^5.0.1",
     "tsconfig-paths": "^4.2.0",
     "uuid": "^11.1.0"
   }
diff --git a/server/ra-data/! b/server/ra-data/!
new file mode 100644
index 00000000..d6a937f9
--- /dev/null
+++ b/server/ra-data/!
@@ -0,0 +1 @@
+{"2":{"8b62942-103f-4b53-bb76-0d3589a9c0d3":{"\u001brelations":{"":{":":{"#":"28b62942-103f-4b53-bb76-0d3589a9c0d3/relations"},">":1751287384275.001}},"/relations\u001brelations/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3/":{"in/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/28b62942-103f-4b53-bb76-0d3589a9c0d3/in/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807314601.001}},"relation/":{"a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":null,">":1749807314701}},"629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/28b62942-103f-4b53-bb76-0d3589a9c0d3/relation/629368f3-e80f-4007-aede-be702f6a2890"},">":1749810499895.001}},"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749808503630}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":{"#":"relations/28b62942-103f-4b53-bb76-0d3589a9c0d3/relation/f9e8b7a0-ed34-48c1-b5c5-e5780821832b"},">":1749811065562.001}}},"location_category/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749810499995}},"topic_category/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749808647169.001}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749810498395}}},"child/":{"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749811065661}},"629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749823831134}}}},"a6":{"bae370-5a99-40d7-b5a4-f2c90b46426c/love/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6bae370-5a99-40d7-b5a4-f2c90b46426c/love/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749807301699.001}},"8e112c-063c-49f8-9150-74ec964c782f/":{"relation/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749808466249.001}},"c":{"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a68e112c-063c-49f8-9150-74ec964c782f/category/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749808466149.002}},"hild/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a68e112c-063c-49f8-9150-74ec964c782f/child/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823291232.002}}}},"d471f6-a848-4835-bd44-8fac301b3ca5/":{"relation/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/relation/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823321882.002}},"c":{"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823321997.001}},"hild":{"/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749816155967.001}},"12/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/child12/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749816067250.002}}}},"undefined/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/undefined/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749814065182.002}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b/":{"relation/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749818110772}},"c":{"hild/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/child/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823292398.002}},"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823292498}}}},"629368f3-e80f-4007-aede-be702f6a2890/":{"relation/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/relation/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823494798.002}},"c":{"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823494898.001}},"hild/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823423997}}}},"9b09b58e-154a-4dd4-b002-74c5ed12318c/teach/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/9b09b58e-154a-4dd4-b002-74c5ed12318c/teach/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1751285863033}},"e330c765-0e91-4f79-b5e3-34945ccc9684/":{"learn/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1751287333808.001}},"teach/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1751287384275.001}}}}},"b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"\u001brelations":{"":{":":{"#":"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3/relations"},">":1750413446635.001}},"/relations\u001brelations/":{"fd46adef-41e3-4423-b36e-fd9534eba9de/":{"relation/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":null,">":1750342417149.001}},"like/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/like/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3"},">":1750342417050.001}}},"9b09b58e-154a-4dd4-b002-74c5ed12318c/":{"learn/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":null,">":1750413444499.001}},"teach/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":null,">":1750413446635.001}}}}}},"4":{"8e09c14-283f-4654-943f-b47f67e3e575":{"\u001brelations":{"":{":":{"#":"48e09c14-283f-4654-943f-b47f67e3e575/relations"},">":1750324231251}},"/relations\u001brelations/48e09c14-283f-4654-943f-b47f67e3e575/live/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/48e09c14-283f-4654-943f-b47f67e3e575/live/629368f3-e80f-4007-aede-be702f6a2890"},">":1750324231251}}},"35ab3b6-414d-463a-8c0b-68c63714c570":{"\u001brelations":{"":{":":{"#":"435ab3b6-414d-463a-8c0b-68c63714c570/relations"},">":1750338312749.001}},"/relations\u001brelations/fd46adef-41e3-4423-b36e-fd9534eba9de/":{"relation/435ab3b6-414d-463a-8c0b-68c63714c570":{"":{":":null,">":1750338310333.001}},"like/435ab3b6-414d-463a-8c0b-68c63714c570":{"":{":":null,">":1750338312749.001}},"teach/435ab3b6-414d-463a-8c0b-68c63714c570":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/teach/435ab3b6-414d-463a-8c0b-68c63714c570"},">":1750338312649.002}}}}},"9":{"9c82ec1-9c8f-48e1-808c-19037e69a2b9":{"\u001brelations":{"":{":":{"#":"99c82ec1-9c8f-48e1-808c-19037e69a2b9/relations"},">":1750338270682.001}},"/relations\u001brelations/fd46adef-41e3-4423-b36e-fd9534eba9de/":{"visit/99c82ec1-9c8f-48e1-808c-19037e69a2b9":{"":{":":null,">":1750338270682.001}},"going/99c82ec1-9c8f-48e1-808c-19037e69a2b9":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/going/99c82ec1-9c8f-48e1-808c-19037e69a2b9"},">":1750338270582.002}}}},"b09b58e-154a-4dd4-b002-74c5ed12318c":{"\u001brelations":{"":{":":{"#":"9b09b58e-154a-4dd4-b002-74c5ed12318c/relations"},">":1751285863032}},"/relations\u001brelations/9b09b58e-154a-4dd4-b002-74c5ed12318c/":{"learn/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":null,">":1750413444499}},"teach/2":{"b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":null,">":1750413446635}},"8b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/9b09b58e-154a-4dd4-b002-74c5ed12318c/teach/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1751285863032}}}}}},"~":{"WBeI80eC58J6Hmc-pxqK12SeudMXL6KwLb2Cel_4ztk.E0gYOdL12xqmG4Riwz5GpwiqVB-up6btApuY5dnoDhs":{"\u001b":{"a":{"lias":{"":{":":"{\":\":\"e2qmzjGXs_ertgEM6bHI83F86KM\",\"~\":\"/j2017DYNynYinXiqJzhwGcletPaM6GIZ2USvUARY3S+cpA8UqG6O83X/fMXyOKYZ9EIBcRNAah7zpEbJIUjJg==\"}",">":1749807225788}},"uth":{"":{":":"{\":\":\"{\\\"ek\\\":{\\\"ct\\\":\\\"oOpwN2YT0JTS8XgUXxtX3j6f3rWMx1ZZx3+ql7iN/uxd78SXczXTq8ljKCDmfS7Ju9onTlpMl59G7edkhGkgWhs+H+Q49aVAMTE7cM220oLxNFyZe0WkxsEEXHz/3ncRwBwwdayqtVwxe/tqafITGbENuMM23RKYz6dpfA==\\\",\\\"iv\\\":\\\"BB6FBnqbveApRdTY8ru0\\\",\\\"s\\\":\\\"jwV13b2pE+Gz\\\"},\\\"s\\\":\\\"7pCk5AfOfsSBOaiMy3TUVResUnVpblB9c2vwl4SUaQqpvOrKkHZtObqmpvxMKQFD\\\"}\",\"~\":\"fcd7d5A54N06/ZiUrQ5jU3PqvEfQBJTyMW6ynnsTix9057EUL2E2Wk1jbWVaQ1h7g0FqWLwOvA19aeJvvsMGyA==\"}",">":1749807225788}}},"epub":{"":{":":"{\":\":\"BcLF4ysCerZEoCYf3PHU-ZYsoUuddASqO_-m-wWrLXY.ZzQ9FcmWVzK5dL5LjFQbxJ6COmrv5KRfhAZds-oqe-U\",\"~\":\"8fnMQuCT6zl3LpzXvlRJQJ5xbqd6yxJB242ZDwmbWKUGgyk+1rVG7OALc6BcUlbwtq9dUh5CQqpCiE2pzlrx4g==\"}",">":1749807225788}},"p":{"ub":{"":{":":"WBeI80eC58J6Hmc-pxqK12SeudMXL6KwLb2Cel_4ztk.E0gYOdL12xqmG4Riwz5GpwiqVB-up6btApuY5dnoDhs",">":1749807225788}},"rofiles":{"":{":":"{\":\":{\"#\":\"~WBeI80eC58J6Hmc-pxqK12SeudMXL6KwLb2Cel_4ztk.E0gYOdL12xqmG4Riwz5GpwiqVB-up6btApuY5dnoDhs/profiles\"},\"~\":\"tn1Hv6tFZooLp+Kxv+gwSo+zKlPIeohCaxbZtq5SK1is0NTDX/jIqX5UUOcaJ/5+xr6CrLiJWD5gxjgrP3wKEw==\"}",">":1749807229507.001}}}},"/profiles\u001bprofile/":{"a6bae370-5a99-40d7-b5a4-f2c90b46426c":{"":{":":"{\":\":{\"#\":\"profile/a6bae370-5a99-40d7-b5a4-f2c90b46426c\"},\"~\":\"byntOKkLoMoI2LmAy6vzSO0IAb5seBbij/fo0X/YQLRV+xt7fumOtiUA8R81Ii8BuL8MvWZ7/kbCvKmzdOzPeg==\"}",">":1749807229295.002}},"050a20ac-5bff-427d-b861-ff7eb3d02b6c":{"":{":":"{\":\":{\"#\":\"profile/050a20ac-5bff-427d-b861-ff7eb3d02b6c\"},\"~\":\"jMdiHSt2deQVbYW5MtQHS/BaFWtBFX4Ievl0N7cNNt8mX5xplwwaD/2ZL70UmUuhaP8tSwDVLC0vIf/nsJuWcg==\"}",">":1749807229402}},"1e5cd036-8e27-4af7-b233-2f7dc3f05e46":{"":{":":"{\":\":{\"#\":\"profile/1e5cd036-8e27-4af7-b233-2f7dc3f05e46\"},\"~\":\"XRvAbHkIA4vcxZVTq+HslviAf94k8iqDf7EBQZ0lRCukcGbbV3P3dAU8fMlG5MV/708w8/MhL4O6g30BjECKTQ==\"}",">":1749807229507.001}}}},"@":{"e2qmzjGXs_ertgEM6bHI83F86KM\u001b~WBeI80eC58J6Hmc-pxqK12SeudMXL6KwLb2Cel_4ztk.E0gYOdL12xqmG4Riwz5GpwiqVB-up6btApuY5dnoDhs":{"":{":":{"#":"~WBeI80eC58J6Hmc-pxqK12SeudMXL6KwLb2Cel_4ztk.E0gYOdL12xqmG4Riwz5GpwiqVB-up6btApuY5dnoDhs"},">":1749807225789}},"OyiXoIC8RuZsmHN82OrYkAafz2Y\u001b~D4FbORHXpzLq88MBmT6O2OB9XdMWj1iRMpE1ZdGhy8M.D9vyc5F3DN3jMncssi-d-IB6vS-7p0i_7LmtQsq6nJI":{"":{":":{"#":"~D4FbORHXpzLq88MBmT6O2OB9XdMWj1iRMpE1ZdGhy8M.D9vyc5F3DN3jMncssi-d-IB6vS-7p0i_7LmtQsq6nJI"},">":1750245259998.002}},"JeeNF7NJ7jozaetnFfhxRB1iD-U\u001b~iop9-RTZmCn59-tgT90nttaf-xMtYXdUNNVJBBcqadk.NPmug38ej0YlYHYNnpi6SlcIxBw8z61pE2W5PbdfnKA":{"":{":":{"#":"~iop9-RTZmCn59-tgT90nttaf-xMtYXdUNNVJBBcqadk.NPmug38ej0YlYHYNnpi6SlcIxBw8z61pE2W5PbdfnKA"},">":1750323581833.002}},"vxoCiCk6DDw-QAkMSK3bnP8PZzU\u001b~YziH87PJT5lE7A5pk_G1OEa3z5yyJudFc8kPeG-9_Sw.WrIIxetV-wEhCUvP9O9VxtbPMAoU_bw27MAwUq7akmo":{"":{":":{"#":"~YziH87PJT5lE7A5pk_G1OEa3z5yyJudFc8kPeG-9_Sw.WrIIxetV-wEhCUvP9O9VxtbPMAoU_bw27MAwUq7akmo"},">":1750338184113.001}},"Mh7xRRl6IQ3ZkahFsGoyTBCC7A0\u001b~7aU3rRaJswrVi5r2uQ4GhiMjgG61gUnH7k0-HAaxJlU.DQKrhH0E9dZRiLTQOhyNuVvx1lojadQaIzUJP22z3R0":{"":{":":{"#":"~7aU3rRaJswrVi5r2uQ4GhiMjgG61gUnH7k0-HAaxJlU.DQKrhH0E9dZRiLTQOhyNuVvx1lojadQaIzUJP22z3R0"},">":1750407460663.002}},"sNRXW1ewgLolGMT5yXPPOdJ4-Zc\u001b~2e8mDKw4k5rbhNDrHvqRfsXNZ57Mz6f3QKmZkRX1fak.FEwUEhOmym7OQvjDBDurHwbHIt42HWxgR5UAy-1bzX8":{"":{":":{"#":"~2e8mDKw4k5rbhNDrHvqRfsXNZ57Mz6f3QKmZkRX1fak.FEwUEhOmym7OQvjDBDurHwbHIt42HWxgR5UAy-1bzX8"},">":1751288446579.002}}},"iop9-RTZmCn59-tgT90nttaf-xMtYXdUNNVJBBcqadk.NPmug38ej0YlYHYNnpi6SlcIxBw8z61pE2W5PbdfnKA":{"\u001b":{"a":{"lias":{"":{":":"{\":\":\"JeeNF7NJ7jozaetnFfhxRB1iD-U\",\"~\":\"jn6wRCGuTw2CFRy5ImrdSQ+TOEAJdMCjNC5+G+JD0gjOr+rrpNL/BcT4dtWjo5ybS/hF+otThX83D15+XkbEpw==\"}",">":1750323581833}},"uth":{"":{":":"{\":\":\"{\\\"ek\\\":{\\\"ct\\\":\\\"zhsCIV3TM49ykujlPamA6ecihSe11z+5RbaWNupA05rH6Gs8HwoPWXNHFaPXcO3WPtUcFJmhQbWSb+GPgf43xM1mZo924cW0idruGB37xvspReRcleW5a1G9TlDWNpeVrK/8fgYJ50VeSgvlKzl9zpM3K5NJtpWu/m/9Gg==\\\",\\\"iv\\\":\\\"NMPrp/3Km/sDXJdo2YDG\\\",\\\"s\\\":\\\"Wi9j8tRsug7P\\\"},\\\"s\\\":\\\"KM2stF8WJUQJkvC4JyEZTsrUQyrJ3X4haMxR84ZUBqG59cfNO42n2vOiOiVKFsnT\\\"}\",\"~\":\"jzSS9FvDXKfWx8rXDJBV4yU0sFsqcMZGk/QaFZI/nwR4tCQO8ftQglbuLzcxUykiV0tHzkLFDTqISjb1b4MLKA==\"}",">":1750323581833}}},"epub":{"":{":":"{\":\":\"ctFcn8ghHhDbLp0j-_XugUFnWSn4fewmQ9G1hgThGNQ.Bsi0EqXjyugEvQyUmhPXW0hA7KSeF1wWlcV0aJekFLY\",\"~\":\"R06pKiM6PgwgIopPaZcKuFBzyWhTtLKuRtJFU/tdsQTu9z83kHod8aHzAAGqLHO7jUgdozsuu77mNuzBRCRekg==\"}",">":1750323581833}},"p":{"ub":{"":{":":"iop9-RTZmCn59-tgT90nttaf-xMtYXdUNNVJBBcqadk.NPmug38ej0YlYHYNnpi6SlcIxBw8z61pE2W5PbdfnKA",">":1750323581833}},"rofiles":{"":{":":"{\":\":{\"#\":\"~iop9-RTZmCn59-tgT90nttaf-xMtYXdUNNVJBBcqadk.NPmug38ej0YlYHYNnpi6SlcIxBw8z61pE2W5PbdfnKA/profiles\"},\"~\":\"H0mAXzZkzAfAB6S4KM6m7B/2o8hIq6faIxLqfMEyHcPnk2/2GrEl7imn27JaIjVW0/YleARQYQefhXn6jhmm2Q==\"}",">":1750323584278.001}}}},"/profiles\u001bprofile/":{"48e09c14-283f-4654-943f-b47f67e3e575":{"":{":":"{\":\":{\"#\":\"profile/48e09c14-283f-4654-943f-b47f67e3e575\"},\"~\":\"pNv+nHyoFkFtq0azNA9mJK76Fv/kuwMHn2oTuJ41BPWYtTQrukqRm9fmZVFjZm/MT0edZAS98dPf9yhTr69wPg==\"}",">":1750323584060.001}},"fcaf2c84-aba1-4a9c-b145-ed6d54fc29c3":{"":{":":"{\":\":{\"#\":\"profile/fcaf2c84-aba1-4a9c-b145-ed6d54fc29c3\"},\"~\":\"ddDYsXmf0829xcxX5KFyaJMngOawenARg5oVTN+dzO9vB90wYgQomECQvFgeUooaUTU0n3bHEF63VjMdQvgO+g==\"}",">":1750323584173.001}},"5a8272d4-c26c-49f8-b70a-733473525b29":{"":{":":"{\":\":{\"#\":\"profile/5a8272d4-c26c-49f8-b70a-733473525b29\"},\"~\":\"nsKLWenpbQrPbRsY9MXtW+/KI2ABiqXCXug28QmlnQRnKQo1CE8RVpdzdVa/hgMLdEMY0/WGERpGqGcyB2HtDA==\"}",">":1750323584278.001}}}},"YziH87PJT5lE7A5pk_G1OEa3z5yyJudFc8kPeG-9_Sw.WrIIxetV-wEhCUvP9O9VxtbPMAoU_bw27MAwUq7akmo":{"\u001b":{"a":{"lias":{"":{":":"{\":\":\"vxoCiCk6DDw-QAkMSK3bnP8PZzU\",\"~\":\"28sI2iJBSeFNykYSdgsHpE72ehpyro7Jx371jatRcubsOEwlYQfvZ2ufyqttOpY+CemqwpglO01AWVGIDhGkww==\"}",">":1750338184112}},"uth":{"":{":":"{\":\":\"{\\\"ek\\\":{\\\"ct\\\":\\\"kUTO9dNXZxqUdadG4vBGzPQDRm4OiggTRI2BjyhpNB60NhOHpK6yXyoXGFHWlvrE1pCipbjFScOj6nlerz61kF4Ad/VubECPHMYFepDaSmRUIW9BfZFHoOMFpB/dE7ZDxyBqpoRb4bRHN5mk1optMF0jFpuL/4kB0nM54w==\\\",\\\"iv\\\":\\\"JzqI3IRV8sk3DjhnLd08\\\",\\\"s\\\":\\\"ghHnbaTGSOnS\\\"},\\\"s\\\":\\\"uqqK2bvJhpELeVIsbiZSILAJ2upy7IZej3qPApwakGkhWAytimiecowt926rFpwk\\\"}\",\"~\":\"2Oj+uuYHrmDjurYLd7Gc4H3Y2jrcP9EA+NpJofjiLgkpIayelzCwaGioRjQXlLYbqxjelDyjdoWdj0fEneAj1Q==\"}",">":1750338184112}}},"epub":{"":{":":"{\":\":\"Et7a3NUkZ8PM6WhxrpXRnk3DLzH7VhemJ370FqcXZIs.NpBCEwAdgp4vqLg3DOGgg7ScNxZs7V43UuSPjjyMzx4\",\"~\":\"fbjEB+aWs3lEhfL9JkMghy3Dm6GXllfJ5lXAwDeIZCoRemiazxMr0xK7ThCb2LnD08yAWGgCqbDaY8qwcElbgA==\"}",">":1750338184112}},"p":{"ub":{"":{":":"YziH87PJT5lE7A5pk_G1OEa3z5yyJudFc8kPeG-9_Sw.WrIIxetV-wEhCUvP9O9VxtbPMAoU_bw27MAwUq7akmo",">":1750338184112}},"rofiles":{"":{":":"{\":\":{\"#\":\"~YziH87PJT5lE7A5pk_G1OEa3z5yyJudFc8kPeG-9_Sw.WrIIxetV-wEhCUvP9O9VxtbPMAoU_bw27MAwUq7akmo/profiles\"},\"~\":\"9LBsP1vWnZgXSRtbuymKAhTAxzxqvV/s+/OijQ6Bcbu8KdaYUjXQoa1BfTq2khY0oBM37+RrI+VsNa7/tgJ7Qg==\"}",">":1750338186746.001}}}},"/profiles\u001bprofile/":{"4":{"cf4613b-e30f-43e2-b139-e51f4ed171b6":{"":{":":"{\":\":{\"#\":\"profile/4cf4613b-e30f-43e2-b139-e51f4ed171b6\"},\"~\":\"T3WhPNJRhBrO2yEiK3km4V9SMq8qio/RCO3vJ4NKsuW/2vNtiIVhYCkjSXKz9o6q0mmW10iSmAl/MuAM82mBfA==\"}",">":1750338186531}},"ea0078b-a134-4bad-9899-888fc0081031":{"":{":":"{\":\":{\"#\":\"profile/4ea0078b-a134-4bad-9899-888fc0081031\"},\"~\":\"kMK2z/sbksKpoMeegEWFOMyaFEXjYUQkwTQzKhasIFIfD6dHr7JMF+kYk8ifOZH1i/EyGxJGYdyLhLfnQub7iw==\"}",">":1750338186641.001}}},"fd46adef-41e3-4423-b36e-fd9534eba9de":{"":{":":"{\":\":{\"#\":\"profile/fd46adef-41e3-4423-b36e-fd9534eba9de\"},\"~\":\"EGY2tJ37vasaQtL2VlPQWQPSy+XCekJOGlOe8OckIp1gh/0ZLkQc7cZV0Go4ffsQCFchQCO3vFD2bOhQ81Gf9Q==\"}",">":1750338186746.001}}}},"7aU3rRaJswrVi5r2uQ4GhiMjgG61gUnH7k0-HAaxJlU.DQKrhH0E9dZRiLTQOhyNuVvx1lojadQaIzUJP22z3R0":{"\u001b":{"a":{"lias":{"":{":":"{\":\":\"Mh7xRRl6IQ3ZkahFsGoyTBCC7A0\",\"~\":\"tocx9GImtY96nR/1kVNsTpmBdCrhUkB45yw/hpL9M2XjeU7Xu8XT2vboh0KzcufSI3qcXJHp0RUjgE9N5wqDpw==\"}",">":1750407460663}},"uth":{"":{":":"{\":\":\"{\\\"ek\\\":{\\\"ct\\\":\\\"Kg6+U6q8ZE/seKtQW00nDCldWW1RNICKOyiNeJjB1nYAlZIp8EiRy9zCEOUYOTfMkKIIthWfuf/829JkFzgnhWtvYm00fisRCcnqWHiV3/5FCFoGdjRd1yZXHWJTfZvt1Lo/O/tBLo8CN/2PHQBuuEnhr4X2Wzm0kVPxqg==\\\",\\\"iv\\\":\\\"BQDOXWgNe9JUDmKGRxEt\\\",\\\"s\\\":\\\"6aWkCepxpJJV\\\"},\\\"s\\\":\\\"KzdjnAt6oiq6zZI2Zrj9JFv7zqQbqtUgIiRp3WPudpFZzk61pUkjR0URTjxsZea0\\\"}\",\"~\":\"7MEsv1psq189B/yl67f1zdDDmSDtb7ZczUCXtLtmOTSm153X+Zc6KYwLjjbvf+vjlzryNQEQQWrWpRVQPDNMkg==\"}",">":1750407460663}}},"epub":{"":{":":"{\":\":\"TAdaTijLuf13yMVr5qhLaf-u1HrAx31biqaep_MkJ1A.aoft6wZUtFVH3s7gHLACQxMt33pegeSumoBantajzAE\",\"~\":\"sqlfuNvbxJiiubpDkjmf4GsvomssVAJkEV1XO1bO6lDsR6bOGOd4/Umuesyk/Acg1zBirjtlits8XiSPo84ZeQ==\"}",">":1750407460663}},"p":{"ub":{"":{":":"7aU3rRaJswrVi5r2uQ4GhiMjgG61gUnH7k0-HAaxJlU.DQKrhH0E9dZRiLTQOhyNuVvx1lojadQaIzUJP22z3R0",">":1750407460663}},"rofiles":{"":{":":"{\":\":{\"#\":\"~7aU3rRaJswrVi5r2uQ4GhiMjgG61gUnH7k0-HAaxJlU.DQKrhH0E9dZRiLTQOhyNuVvx1lojadQaIzUJP22z3R0/profiles\"},\"~\":\"p27H/UVEJcpv87WWVNt9QYArML/G8R8UfCMJsc8ajelKF7OsEpl+CyRoFT6nJeuI2Uu++7myxj2+hB/GLlSToQ==\"}",">":1751287312138}}}},"/profiles\u001bprofile/":{"9b09b58e-154a-4dd4-b002-74c5ed12318c":{"":{":":"{\":\":null,\"~\":\"ewaIvWmlQr7QfFNAsPvsmvqJZKYTAdqbZsYx6Sbx02k10WdN1D3cAbvbfEaow3swqRGgloYdRW0jch315oaDng==\"}",">":1751285889512}},"c38a8ad5-be3a-4cf2-880e-9dc783432015":{"":{":":"{\":\":{\"#\":\"profile/c38a8ad5-be3a-4cf2-880e-9dc783432015\"},\"~\":\"hk/DWIWIkSr8R8EKMWXx/SH2tzvkff7uSO7GpeNo5Oypz0zUt9iJYjhDPr9GR4xE29LN8A05G9Hg+wQoHULHVg==\"}",">":1750407463098.001}},"e":{"a4cbf41-1e7e-4e0e-aebb-376058ddb19c":{"":{":":"{\":\":null,\"~\":\"9baSDIYFRwP6YeKqs6b4J5eWpjGQzoaCCJ1a3vbNPyE3aprOKKTg3hNq4Id4hvqyLgVi/7YBM+LhAgABlG+Kxw==\"}",">":1751285837493}},"330c765-0e91-4f79-b5e3-34945ccc9684":{"":{":":"{\":\":{\"#\":\"profile/e330c765-0e91-4f79-b5e3-34945ccc9684\"},\"~\":\"Z8/pzitvq8RX1Fo88NQUL7qPPQoAYe3xF8fz9wi6n5Nm1cGFieADmDIRO/aVvF6TbKeBnRfOiylk1uOrT3xdnQ==\"}",">":1751287312138}}}}},"2e8mDKw4k5rbhNDrHvqRfsXNZ57Mz6f3QKmZkRX1fak.FEwUEhOmym7OQvjDBDurHwbHIt42HWxgR5UAy-1bzX8\u001b":{"pub":{"":{":":"2e8mDKw4k5rbhNDrHvqRfsXNZ57Mz6f3QKmZkRX1fak.FEwUEhOmym7OQvjDBDurHwbHIt42HWxgR5UAy-1bzX8",">":1751288446579}},"a":{"lias":{"":{":":"{\":\":\"sNRXW1ewgLolGMT5yXPPOdJ4-Zc\",\"~\":\"zHBLyOS/Gxz2yYB23xR1Sve7C68IQhmkgCgG7yAD6hJably/gXIpBSFkTbNSlsjeDkHt9lFim52Rmm4qbiOGCA==\"}",">":1751288446579}},"uth":{"":{":":"{\":\":\"{\\\"ek\\\":{\\\"ct\\\":\\\"EHzeYzMV0xopptrZodcRRiTBzeuDFnuzKxDUaEu8fvQ1weokHjszpD+KMydBUh8dWCmcyxvmFxc8t8OWGvjM9N8N/SvrfhnpSLQg4Um0fhZGOBvNSbMwxAnYIZyYa/tpKc8Wbf2ATxuMO98+zmVzJVb5CVk3GVXwZcVfXA==\\\",\\\"iv\\\":\\\"X3UVdPKi5E93G17BialN\\\",\\\"s\\\":\\\"OPEx1aduKCXd\\\"},\\\"s\\\":\\\"Z7Da7pRd226GxKpRan4PbLCScoImbpPQ1VGnSEJrlDgfOFlFKIt2ZUpzBKs0WbCP\\\"}\",\"~\":\"yLL1mCEFbmlOdG9XQwmp5iJguwryHf7l6VY2X6LlF7O23ET657J3BzXAI08TUoEshlYZh9jTTtGDlYzF+YocfA==\"}",">":1751288446579}}},"epub":{"":{":":"{\":\":\"T2FuG3RiaOQtWHWrBLhGkmMo6CoCU7Sn0joEYQPxaQM.d6oati83KBqSbi-nSOeH-fMADpGmcuorY23IwCC0oWE\",\"~\":\"GttlfGtHu96zcCYzCS4FbYxVFwxSOmoeesBY6FRzz0NeM33dBpkm/SjouVKNTBORiQG070xbWX3CEGixINXjmA==\"}",">":1751288446579}}}},"sphere":{"s":{"/":{"2":{"8b62942-103f-4b53-bb76-0d3589a9c0d3\u001bsphere/28b62942-103f-4b53-bb76-0d3589a9c0d3/local":{"":{":":{"#":"sphere/28b62942-103f-4b53-bb76-0d3589a9c0d3/local"},">":1749807298153.001}},"b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3\u001bsphere/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3/local":{"":{":":{"#":"sphere/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3/local"},">":1750251579400.001}}},"titles":{"\u001b":{"campingplatz":{"":{":":{"#":"spheres/titles/campingplatz"},">":1749807247501.001}},"volleyball":{"":{":":{"#":"spheres/titles/volleyball"},">":1749807298153.002}},"beach":{"":{":":{"#":"spheres/titles/beach"},">":1749808545739.001}},"unionlido":{"":{":":{"#":"spheres/titles/unionlido"},">":1749811167368.001}},"t":{"est":{"":{":":{"#":"spheres/titles/test"},">":1749808701518}},"hessaloniki":{"":{":":{"#":"spheres/titles/thessaloniki"},">":1750338247688.002}}},"javascript":{"":{":":{"#":"spheres/titles/javascript"},">":1750338298270.002}}},"/":{"campingplatz\u001bsphere/a68e112c-063c-49f8-9150-74ec964c782f/local":{"":{":":{"#":"sphere/a68e112c-063c-49f8-9150-74ec964c782f/local"},">":1749807247501.001}},"volleyball\u001bsphere/28b62942-103f-4b53-bb76-0d3589a9c0d3/local":{"":{":":{"#":"sphere/28b62942-103f-4b53-bb76-0d3589a9c0d3/local"},">":1749807298153.002}},"beach\u001bsphere/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/local":{"":{":":{"#":"sphere/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/local"},">":1749808545739.001}},"unionlido\u001bsphere/a6d471f6-a848-4835-bd44-8fac301b3ca5/local":{"":{":":{"#":"sphere/a6d471f6-a848-4835-bd44-8fac301b3ca5/local"},">":1749811167368.001}},"t":{"est\u001bsphere/af5926c1-2e47-48b8-ac0c-002a8a8bdce7/local":{"":{":":{"#":"sphere/af5926c1-2e47-48b8-ac0c-002a8a8bdce7/local"},">":1749808701518}},"hessaloniki\u001bsphere/99c82ec1-9c8f-48e1-808c-19037e69a2b9/local":{"":{":":{"#":"sphere/99c82ec1-9c8f-48e1-808c-19037e69a2b9/local"},">":1750338247688.002}}},"javascript\u001bsphere/435ab3b6-414d-463a-8c0b-68c63714c570/local":{"":{":":{"#":"sphere/435ab3b6-414d-463a-8c0b-68c63714c570/local"},">":1750338298270.002}}}},"629368f3-e80f-4007-aede-be702f6a2890\u001bsphere/629368f3-e80f-4007-aede-be702f6a2890/local":{"":{":":{"#":"sphere/629368f3-e80f-4007-aede-be702f6a2890/local"},">":1749040133491.001}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001bsphere/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/local":{"":{":":{"#":"sphere/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/local"},">":1749808545739}},"a":{"6":{"8e112c-063c-49f8-9150-74ec964c782f\u001bsphere/a68e112c-063c-49f8-9150-74ec964c782f/local":{"":{":":{"#":"sphere/a68e112c-063c-49f8-9150-74ec964c782f/local"},">":1749807247501}},"d471f6-a848-4835-bd44-8fac301b3ca5\u001bsphere/a6d471f6-a848-4835-bd44-8fac301b3ca5/local":{"":{":":{"#":"sphere/a6d471f6-a848-4835-bd44-8fac301b3ca5/local"},">":1749811167368}}},"f5926c1-2e47-48b8-ac0c-002a8a8bdce7\u001bsphere/af5926c1-2e47-48b8-ac0c-002a8a8bdce7/local":{"":{":":{"#":"sphere/af5926c1-2e47-48b8-ac0c-002a8a8bdce7/local"},">":1749808701517.001}}},"99c82ec1-9c8f-48e1-808c-19037e69a2b9\u001bsphere/99c82ec1-9c8f-48e1-808c-19037e69a2b9/local":{"":{":":{"#":"sphere/99c82ec1-9c8f-48e1-808c-19037e69a2b9/local"},">":1750338247688.001}},"435ab3b6-414d-463a-8c0b-68c63714c570\u001bsphere/435ab3b6-414d-463a-8c0b-68c63714c570/local":{"":{":":{"#":"sphere/435ab3b6-414d-463a-8c0b-68c63714c570/local"},">":1750338298270.001}},"cd":{"a54940-6eff-47ae-94c8-7413681b424c\u001bsphere/cda54940-6eff-47ae-94c8-7413681b424c/local":{"":{":":{"#":"sphere/cda54940-6eff-47ae-94c8-7413681b424c/local"},">":1750246552736.001}},"f4b54e-78e6-4ead-8f2a-e1e7162c5206\u001bsphere/cdf4b54e-78e6-4ead-8f2a-e1e7162c5206/local":{"":{":":{"#":"sphere/cdf4b54e-78e6-4ead-8f2a-e1e7162c5206/local"},">":1750251566931.001}}},"d":{"6":{"b60733-7ab4-430f-b828-df6b9466a2bc\u001bsphere/d6b60733-7ab4-430f-b828-df6b9466a2bc/local":{"":{":":{"#":"sphere/d6b60733-7ab4-430f-b828-df6b9466a2bc/local"},">":1749468919386.001}},"e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001bsphere/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/local":{"":{":":{"#":"sphere/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/local"},">":1749307293058.001}}},"88dc7ae-d0dd-4b95-b3bc-93b08dca7093\u001bsphere/d88dc7ae-d0dd-4b95-b3bc-93b08dca7093/local":{"":{":":{"#":"sphere/d88dc7ae-d0dd-4b95-b3bc-93b08dca7093/local"},">":1750251495147.001}}},"e1c249e0-57cf-4a80-94d2-b4ecbdb06d53\u001bsphere/e1c249e0-57cf-4a80-94d2-b4ecbdb06d53/local":{"":{":":{"#":"sphere/e1c249e0-57cf-4a80-94d2-b4ecbdb06d53/local"},">":1750251467963}}},"\u001b":{"2":{"8b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"spheres/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749807298153.001}},"b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":{"#":"spheres/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3"},">":1750251579400.001}}},"629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"spheres/629368f3-e80f-4007-aede-be702f6a2890"},">":1749040133491.001}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":{"#":"spheres/f9e8b7a0-ed34-48c1-b5c5-e5780821832b"},">":1749808545739}},"a":{"6":{"8e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"spheres/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807247501}},"d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":{"#":"spheres/a6d471f6-a848-4835-bd44-8fac301b3ca5"},">":1749811167368}}},"f5926c1-2e47-48b8-ac0c-002a8a8bdce7":{"":{":":{"#":"spheres/af5926c1-2e47-48b8-ac0c-002a8a8bdce7"},">":1749808701517.001}}},"99c82ec1-9c8f-48e1-808c-19037e69a2b9":{"":{":":{"#":"spheres/99c82ec1-9c8f-48e1-808c-19037e69a2b9"},">":1750338247688.001}},"435ab3b6-414d-463a-8c0b-68c63714c570":{"":{":":{"#":"spheres/435ab3b6-414d-463a-8c0b-68c63714c570"},">":1750338298270.001}},"cd":{"a54940-6eff-47ae-94c8-7413681b424c":{"":{":":{"#":"spheres/cda54940-6eff-47ae-94c8-7413681b424c"},">":1750246552736.001}},"f4b54e-78e6-4ead-8f2a-e1e7162c5206":{"":{":":{"#":"spheres/cdf4b54e-78e6-4ead-8f2a-e1e7162c5206"},">":1750251566931.001}}},"d":{"6":{"b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":{"#":"spheres/d6b60733-7ab4-430f-b828-df6b9466a2bc"},">":1749468919386.001}},"e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"spheres/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749307293058.001}}},"88dc7ae-d0dd-4b95-b3bc-93b08dca7093":{"":{":":{"#":"spheres/d88dc7ae-d0dd-4b95-b3bc-93b08dca7093"},">":1750251495147.001}}},"e1c249e0-57cf-4a80-94d2-b4ecbdb06d53":{"":{":":{"#":"spheres/e1c249e0-57cf-4a80-94d2-b4ecbdb06d53"},">":1750251467963}}}},"/":{"2":{"8b62942-103f-4b53-bb76-0d3589a9c0d3/local\u001b":{"id":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749807298153}},"t":{"itle":{"":{":":"Volleyball",">":1749807298153}},"ype":{"":{":":"topic",">":1749807298153}}}},"b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3/local\u001b":{"id":{"":{":":"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3",">":1750251579400}},"t":{"itle":{"":{":":"Beach Volleyball",">":1750251579400}},"ype":{"":{":":"topic",">":1750251579400}}}}},"629368f3-e80f-4007-aede-be702f6a2890/local\u001b":{"id":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749040133491}},"t":{"itle":{"":{":":"Campingplatz",">":1749040133491}},"ype":{"":{":":"location",">":1749040133491}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b/local\u001b":{"id":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749808545738}},"t":{"itle":{"":{":":"Beach",">":1749808545738}},"ype":{"":{":":"topic",">":1749808545738}}}},"a":{"6":{"8e112c-063c-49f8-9150-74ec964c782f/local\u001b":{"id":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749807247500}},"t":{"itle":{"":{":":"Campingplatz",">":1749807247500}},"ype":{"":{":":"location",">":1749807247500}}}},"d471f6-a848-4835-bd44-8fac301b3ca5/local\u001b":{"id":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749811167367}},"t":{"itle":{"":{":":"Unionlido",">":1749811167367}},"ype":{"":{":":"location",">":1749811167367}}}}},"f5926c1-2e47-48b8-ac0c-002a8a8bdce7/local\u001b":{"id":{"":{":":"af5926c1-2e47-48b8-ac0c-002a8a8bdce7",">":1749808701517}},"t":{"itle":{"":{":":"Test",">":1749808701517}},"ype":{"":{":":"",">":1749808701517}}}}},"99c82ec1-9c8f-48e1-808c-19037e69a2b9/local\u001b":{"id":{"":{":":"99c82ec1-9c8f-48e1-808c-19037e69a2b9",">":1750338247688}},"t":{"itle":{"":{":":"Thessaloniki",">":1750338247688}},"ype":{"":{":":"location",">":1750338247688}}}},"435ab3b6-414d-463a-8c0b-68c63714c570/local\u001b":{"id":{"":{":":"435ab3b6-414d-463a-8c0b-68c63714c570",">":1750338298270}},"t":{"itle":{"":{":":"Javascript",">":1750338298270}},"ype":{"":{":":"topic",">":1750338298270}}}},"cd":{"a54940-6eff-47ae-94c8-7413681b424c/local\u001b":{"id":{"":{":":"cda54940-6eff-47ae-94c8-7413681b424c",">":1750246552736}},"t":{"itle":{"":{":":"Samothraki",">":1750246552736}},"ype":{"":{":":"location",">":1750246552736}}}},"f4b54e-78e6-4ead-8f2a-e1e7162c5206/local\u001b":{"id":{"":{":":"cdf4b54e-78e6-4ead-8f2a-e1e7162c5206",">":1750251566931}},"t":{"itle":{"":{":":"Volleyball",">":1750251566931}},"ype":{"":{":":"topic",">":1750251566931}}}}},"d":{"6":{"b60733-7ab4-430f-b828-df6b9466a2bc/local\u001b":{"id":{"":{":":"d6b60733-7ab4-430f-b828-df6b9466a2bc",">":1749468919386}},"t":{"itle":{"":{":":"unionlido",">":1749468919386}},"ype":{"":{":":"location",">":1749468919386}}}},"e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/local\u001b":{"id":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749307293058}},"t":{"itle":{"":{":":"Cool",">":1749307293058}},"ype":{"":{":":"topic",">":1749307293058}}}}},"88dc7ae-d0dd-4b95-b3bc-93b08dca7093/local\u001b":{"id":{"":{":":"d88dc7ae-d0dd-4b95-b3bc-93b08dca7093",">":1750251495147}},"t":{"itle":{"":{":":"Greece",">":1750251495147}},"ype":{"":{":":"location",">":1750251495147}}}}},"e1c249e0-57cf-4a80-94d2-b4ecbdb06d53/local\u001b":{"id":{"":{":":"e1c249e0-57cf-4a80-94d2-b4ecbdb06d53",">":1750251467962}},"t":{"itle":{"":{":":"Camping",">":1750251467962}},"ype":{"":{":":"topic",">":1750251467962}}}}}},"p":{"rofile":{"s":{"\u001b":{"4":{"8e09c14-283f-4654-943f-b47f67e3e575":{"":{":":{"#":"profiles/48e09c14-283f-4654-943f-b47f67e3e575"},">":1750323584060.002}},"cf4613b-e30f-43e2-b139-e51f4ed171b6":{"":{":":{"#":"profiles/4cf4613b-e30f-43e2-b139-e51f4ed171b6"},">":1750338186531.001}},"ea0078b-a134-4bad-9899-888fc0081031":{"":{":":{"#":"profiles/4ea0078b-a134-4bad-9899-888fc0081031"},">":1750338186641.002}}},"a6bae370-5a99-40d7-b5a4-f2c90b46426c":{"":{":":{"#":"profiles/a6bae370-5a99-40d7-b5a4-f2c90b46426c"},">":1749807229296}},"050a20ac-5bff-427d-b861-ff7eb3d02b6c":{"":{":":{"#":"profiles/050a20ac-5bff-427d-b861-ff7eb3d02b6c"},">":1749807229402.001}},"1e5cd036-8e27-4af7-b233-2f7dc3f05e46":{"":{":":{"#":"profiles/1e5cd036-8e27-4af7-b233-2f7dc3f05e46"},">":1749807229507.002}},"5a8272d4-c26c-49f8-b70a-733473525b29":{"":{":":{"#":"profiles/5a8272d4-c26c-49f8-b70a-733473525b29"},">":1750323584279}},"f":{"caf2c84-aba1-4a9c-b145-ed6d54fc29c3":{"":{":":{"#":"profiles/fcaf2c84-aba1-4a9c-b145-ed6d54fc29c3"},">":1750323584173.002}},"d46adef-41e3-4423-b36e-fd9534eba9de":{"":{":":{"#":"profiles/fd46adef-41e3-4423-b36e-fd9534eba9de"},">":1750338186746.002}}},"9b09b58e-154a-4dd4-b002-74c5ed12318c":{"":{":":{"#":"profiles/9b09b58e-154a-4dd4-b002-74c5ed12318c"},">":1751285889513}},"c38a8ad5-be3a-4cf2-880e-9dc783432015":{"":{":":{"#":"profiles/c38a8ad5-be3a-4cf2-880e-9dc783432015"},">":1750407463098.002}},"e":{"a4cbf41-1e7e-4e0e-aebb-376058ddb19c":{"":{":":{"#":"profiles/ea4cbf41-1e7e-4e0e-aebb-376058ddb19c"},">":1751285837494}},"330c765-0e91-4f79-b5e3-34945ccc9684":{"":{":":{"#":"profiles/e330c765-0e91-4f79-b5e3-34945ccc9684"},">":1751287312139}}}},"/":{"4":{"8e09c14-283f-4654-943f-b47f67e3e575\u001bprofile/48e09c14-283f-4654-943f-b47f67e3e575":{"":{":":{"#":"profile/48e09c14-283f-4654-943f-b47f67e3e575"},">":1750323584060.002}},"cf4613b-e30f-43e2-b139-e51f4ed171b6\u001bprofile/4cf4613b-e30f-43e2-b139-e51f4ed171b6":{"":{":":{"#":"profile/4cf4613b-e30f-43e2-b139-e51f4ed171b6"},">":1750338186531.001}},"ea0078b-a134-4bad-9899-888fc0081031\u001bprofile/4ea0078b-a134-4bad-9899-888fc0081031":{"":{":":{"#":"profile/4ea0078b-a134-4bad-9899-888fc0081031"},">":1750338186641.002}}},"a6bae370-5a99-40d7-b5a4-f2c90b46426c\u001bprofile/a6bae370-5a99-40d7-b5a4-f2c90b46426c":{"":{":":{"#":"profile/a6bae370-5a99-40d7-b5a4-f2c90b46426c"},">":1749807229296}},"050a20ac-5bff-427d-b861-ff7eb3d02b6c\u001bprofile/050a20ac-5bff-427d-b861-ff7eb3d02b6c":{"":{":":{"#":"profile/050a20ac-5bff-427d-b861-ff7eb3d02b6c"},">":1749807229402.001}},"1e5cd036-8e27-4af7-b233-2f7dc3f05e46\u001bprofile/1e5cd036-8e27-4af7-b233-2f7dc3f05e46":{"":{":":{"#":"profile/1e5cd036-8e27-4af7-b233-2f7dc3f05e46"},">":1749807229507.002}},"5a8272d4-c26c-49f8-b70a-733473525b29\u001bprofile/5a8272d4-c26c-49f8-b70a-733473525b29":{"":{":":{"#":"profile/5a8272d4-c26c-49f8-b70a-733473525b29"},">":1750323584279}},"f":{"caf2c84-aba1-4a9c-b145-ed6d54fc29c3\u001bprofile/fcaf2c84-aba1-4a9c-b145-ed6d54fc29c3":{"":{":":{"#":"profile/fcaf2c84-aba1-4a9c-b145-ed6d54fc29c3"},">":1750323584173.002}},"d46adef-41e3-4423-b36e-fd9534eba9de\u001bprofile/fd46adef-41e3-4423-b36e-fd9534eba9de":{"":{":":{"#":"profile/fd46adef-41e3-4423-b36e-fd9534eba9de"},">":1750338186746.002}}},"9b09b58e-154a-4dd4-b002-74c5ed12318c\u001bprofile/9b09b58e-154a-4dd4-b002-74c5ed12318c":{"":{":":null,">":1751285889513}},"c38a8ad5-be3a-4cf2-880e-9dc783432015\u001bprofile/c38a8ad5-be3a-4cf2-880e-9dc783432015":{"":{":":{"#":"profile/c38a8ad5-be3a-4cf2-880e-9dc783432015"},">":1750407463098.002}},"e":{"a4cbf41-1e7e-4e0e-aebb-376058ddb19c\u001bprofile/ea4cbf41-1e7e-4e0e-aebb-376058ddb19c":{"":{":":null,">":1751285837494}},"330c765-0e91-4f79-b5e3-34945ccc9684\u001bprofile/e330c765-0e91-4f79-b5e3-34945ccc9684":{"":{":":{"#":"profile/e330c765-0e91-4f79-b5e3-34945ccc9684"},">":1751287312139}}}}},"/":{"4":{"8e09c14-283f-4654-943f-b47f67e3e575\u001b":{"email":{"":{":":"mail@yx3m1.com",">":1750323584060}},"i":{"d":{"":{":":"48e09c14-283f-4654-943f-b47f67e3e575",">":1750323584060}},"mage":{"":{":":"https://gravatar.com/avatar/131b41b3661519fe731ac5d53a17c99fe38db8fb64b56ee13567efe91770a914",">":1750323584060}}},"type":{"":{":":"Work",">":1750323584060}},"username":{"":{":":"Yannik",">":1750323584060}}},"cf4613b-e30f-43e2-b139-e51f4ed171b6\u001b":{"email":{"":{":":"test@yx3m1.com",">":1750338186530.001}},"i":{"d":{"":{":":"4cf4613b-e30f-43e2-b139-e51f4ed171b6",">":1750338186530.001}},"mage":{"":{":":"https://gravatar.com/avatar/70d622b79220360b8bebbd1e2ca3f2829c570ebf917ccf65b9e9fb92af03c6cd",">":1750338186530.001}}},"type":{"":{":":"Work",">":1750338186530.001}},"username":{"":{":":"Yannik",">":1750338186530.001}}},"ea0078b-a134-4bad-9899-888fc0081031\u001b":{"email":{"":{":":"test@yx3m1.com",">":1750338186641}},"i":{"d":{"":{":":"4ea0078b-a134-4bad-9899-888fc0081031",">":1750338186641}},"mage":{"":{":":"https://gravatar.com/avatar/70d622b79220360b8bebbd1e2ca3f2829c570ebf917ccf65b9e9fb92af03c6cd",">":1750338186641}}},"type":{"":{":":"Hobby",">":1750338186641}},"username":{"":{":":"Yannik",">":1750338186641}}}},"a6bae370-5a99-40d7-b5a4-f2c90b46426c\u001b":{"email":{"":{":":"yannik@yx3m1.com",">":1749807229295.001}},"i":{"d":{"":{":":"a6bae370-5a99-40d7-b5a4-f2c90b46426c",">":1749807229295.001}},"mage":{"":{":":"https://gravatar.com/avatar/93e258554b299adb37fa396d5fb57dacf330bc8d6be51d51b55cddde1f631be4",">":1749807229295.001}}},"type":{"":{":":"Work",">":1749807229295.001}},"username":{"":{":":"Yannik",">":1749807229295.001}}},"050a20ac-5bff-427d-b861-ff7eb3d02b6c\u001b":{"email":{"":{":":"yannik@yx3m1.com",">":1749807229401}},"i":{"d":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749807229401}},"mage":{"":{":":"https://gravatar.com/avatar/93e258554b299adb37fa396d5fb57dacf330bc8d6be51d51b55cddde1f631be4",">":1749807229401}}},"type":{"":{":":"Hobby",">":1749807229401}},"username":{"":{":":"Yannik",">":1749807229401}}},"1e5cd036-8e27-4af7-b233-2f7dc3f05e46\u001b":{"email":{"":{":":"yannik@yx3m1.com",">":1749807229507}},"i":{"d":{"":{":":"1e5cd036-8e27-4af7-b233-2f7dc3f05e46",">":1749807229507}},"mage":{"":{":":"https://gravatar.com/avatar/93e258554b299adb37fa396d5fb57dacf330bc8d6be51d51b55cddde1f631be4",">":1749807229507}}},"type":{"":{":":"Family",">":1749807229507}},"username":{"":{":":"Yannik",">":1749807229507}}},"5a8272d4-c26c-49f8-b70a-733473525b29\u001b":{"email":{"":{":":"mail@yx3m1.com",">":1750323584278}},"i":{"d":{"":{":":"5a8272d4-c26c-49f8-b70a-733473525b29",">":1750323584278}},"mage":{"":{":":"https://gravatar.com/avatar/131b41b3661519fe731ac5d53a17c99fe38db8fb64b56ee13567efe91770a914",">":1750323584278}}},"type":{"":{":":"Family",">":1750323584278}},"username":{"":{":":"Yannik",">":1750323584278}}},"f":{"caf2c84-aba1-4a9c-b145-ed6d54fc29c3\u001b":{"email":{"":{":":"mail@yx3m1.com",">":1750323584173}},"i":{"d":{"":{":":"fcaf2c84-aba1-4a9c-b145-ed6d54fc29c3",">":1750323584173}},"mage":{"":{":":"https://gravatar.com/avatar/131b41b3661519fe731ac5d53a17c99fe38db8fb64b56ee13567efe91770a914",">":1750323584173}}},"type":{"":{":":"Hobby",">":1750323584173}},"username":{"":{":":"Yannik",">":1750323584173}}},"d46adef-41e3-4423-b36e-fd9534eba9de\u001b":{"email":{"":{":":"yannik@yx3m1.com",">":1750338907353}},"i":{"d":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750338186746}},"mage":{"":{":":"https://gravatar.com/avatar/93e258554b299adb37fa396d5fb57dacf330bc8d6be51d51b55cddde1f631be4",">":1750338907353}}},"type":{"":{":":"Family",">":1750338907353}},"username":{"":{":":"Yannik",">":1750338907353}},"about":{"":{":":"",">":1750338907353}}}},"9b09b58e-154a-4dd4-b002-74c5ed12318c\u001b":{"email":{"":{":":"localhost@yx3m1.com",">":1750407462985}},"i":{"d":{"":{":":"9b09b58e-154a-4dd4-b002-74c5ed12318c",">":1750407462985}},"mage":{"":{":":"https://gravatar.com/avatar/93cdbfcc25b0516903539c34394b1168157e9b2fe3e8928651151a665c3f27ab",">":1750407462985}}},"type":{"":{":":"Work",">":1750407462985}},"username":{"":{":":"Yannik",">":1750407462985}}},"c38a8ad5-be3a-4cf2-880e-9dc783432015\u001b":{"email":{"":{":":"localhost@yx3m1.com",">":1750407463098}},"i":{"d":{"":{":":"c38a8ad5-be3a-4cf2-880e-9dc783432015",">":1750407463098}},"mage":{"":{":":"https://gravatar.com/avatar/93cdbfcc25b0516903539c34394b1168157e9b2fe3e8928651151a665c3f27ab",">":1750407463098}}},"type":{"":{":":"Hobby",">":1750407463098}},"username":{"":{":":"Yannik",">":1750407463098}}},"e":{"a4cbf41-1e7e-4e0e-aebb-376058ddb19c\u001b":{"email":{"":{":":"localhost@yx3m1.com",">":1750407463203}},"i":{"d":{"":{":":"ea4cbf41-1e7e-4e0e-aebb-376058ddb19c",">":1750407463203}},"mage":{"":{":":"https://gravatar.com/avatar/93cdbfcc25b0516903539c34394b1168157e9b2fe3e8928651151a665c3f27ab",">":1750407463203}}},"type":{"":{":":"Family",">":1750407463203}},"username":{"":{":":"Yannik",">":1750407463203}}},"330c765-0e91-4f79-b5e3-34945ccc9684\u001b":{"about":{"":{":":"",">":1751287312137}},"email":{"":{":":"localhost@yx3m1.com",">":1751287312137}},"i":{"d":{"":{":":"e330c765-0e91-4f79-b5e3-34945ccc9684",">":1751287312137}},"mage":{"":{":":"https://gravatar.com/avatar/93cdbfcc25b0516903539c34394b1168157e9b2fe3e8928651151a665c3f27ab",">":1751287312137}}},"type":{"":{":":"Private",">":1751287312137}},"username":{"":{":":"Yannik",">":1751287312137}}}}}},"lugin":{"s\u001b":{"wiki_plugin":{"":{":":{"#":"wiki_plugin"},">":1749807382903.019}},"l":{"ocation_plugin":{"":{":":{"#":"location_plugin"},">":1750675862183.004}},"ink_plugin":{"":{":":{"#":"link_plugin"},">":1750411064682.008}}},"community_plugin":{"":{":":{"#":"community_plugin"},">":1748718446329}},"plugin/wiki_plugin":{"":{":":{"#":"plugin/wiki_plugin"},">":1747913115846.0151},"_":{"2":{"":{":":{"#":"plugin/wiki_plugin_2"},">":1747912881529.017}},"5":{"":{":":{"#":"plugin/wiki_plugin_5"},">":1747650283026.001}},"6":{"":{":":{"#":"plugin/wiki_plugin_6"},">":1747652345296.001}},"7":{"":{":":{"#":"plugin/wiki_plugin_7"},">":1747652956622}},"8":{"":{":":{"#":"plugin/wiki_plugin_8"},">":1747652981098.001}}}}},"/wiki_plugin":{"\u001b":{"id":{"":{":":"wiki_plugin",">":1747921982669}},"name":{"":{":":"Wiki",">":1747921982669}},"paths":{"":{":":{"#":"plugin/wiki_plugin/paths"},">":1747921982670.016}},"url":{"":{":":"http://localhost:3002/assets/plugin.js",">":1747921982669}}},"_":{"2":{"\u001b":{"id":{"":{":":"wiki_plugin_2",">":1747912881529}},"name":{"":{":":"Wiki",">":1747912881529}},"paths":{"":{":":{"#":"plugin/wiki_plugin_2/paths"},">":1747912881529.016}},"url":{"":{":":"http://localhost:3002/assets/plugin.js",">":1747912881529}}},"/paths\u001bmaza":{"7":{"7210":{"1al3K4ZQanAOKC":{"":{":":{"#":"maza772101al3K4ZQanAOKC"},">":1747912881529.003}},"5SwUy8ToKpUXw":{"":{":":{"#":"maza772105SwUy8ToKpUXw"},">":1747912881529.006}},"96B7qIUzkkcu8z":{"":{":":{"#":"maza7721096B7qIUzkkcu8z"},">":1747912881529.009}},"dCJx6HbnRqHJM":{"":{":":{"#":"maza77210dCJx6HbnRqHJM"},">":1747912881529.012}},"gsTRNWvI2ipq6b":{"":{":":{"#":"maza77210gsTRNWvI2ipq6b"},">":1747912881529.0151}}},"5vx0":{"1aEfbq9NESymN3":{"":{":":{"#":"maza75vx01aEfbq9NESymN3"},">":1747912880013.003}},"54yeufUTXw4U6":{"":{":":{"#":"maza75vx054yeufUTXw4U6"},">":1747912880013.006}},"96IzpmU7s1VHnK":{"":{":":{"#":"maza75vx096IzpmU7s1VHnK"},">":1747912880013.009}},"dTE3MP8lukmKE":{"":{":":{"#":"maza75vx0dTE3MP8lukmKE"},">":1747912880013.012}},"gsgDD9o8efOi4E":{"":{":":{"#":"maza75vx0gsgDD9o8efOi4E"},">":1747912880013.0151}}}},"6pn60":{"1aOvo4FDc1cyjG":{"":{":":{"#":"maza6pn601aOvo4FDc1cyjG"},">":1747912858962.003}},"5j2Js9pyoTXL7":{"":{":":{"#":"maza6pn605j2Js9pyoTXL7"},">":1747912858962.006}},"96nxDlOLTHaHcC":{"":{":":{"#":"maza6pn6096nxDlOLTHaHcC"},">":1747912858962.009}},"d3DhyRJ0eIc3t":{"":{":":{"#":"maza6pn60d3DhyRJ0eIc3t"},">":1747912858962.012}},"gsANkXVunFpDyX":{"":{":":{"#":"maza6pn60gsANkXVunFpDyX"},">":1747912858962.0151}}}}},"8\u001b":{"component":{"":{":":"",">":1747652981098}},"id":{"":{":":"wiki_plugin_8",">":1747652981098}},"name":{"":{":":"Wiki",">":1747652981098}},"path":{"":{":":"/wiki",">":1747652981098}},"url":{"":{":":"http://localhost:3002/assets/plugin.js",">":1747652981098}}},"5\u001b":{"id":{"":{":":"wiki_plugin",">":1747650283026}},"name":{"":{":":"Wiki",">":1747650283026}},"url":{"":{":":"http://localhost:3002",">":1747650283026}}},"6\u001b":{"id":{"":{":":"wiki_plugin_6",">":1747652345296}},"name":{"":{":":"Wiki",">":1747652345296}},"path":{"":{":":"/wiki",">":1747652345296}},"url":{"":{":":"http://localhost:3002/assets/plugin.js",">":1747652345296}}},"7\u001b":{"component":{"":{":":"",">":1747652956621}},"id":{"":{":":"wiki_plugin_7",">":1747652956621}},"name":{"":{":":"Wiki",">":1747652956621}},"path":{"":{":":"/wiki",">":1747652956621}},"url":{"":{":":"http://localhost:3002/assets/plugin.js",">":1747652956621}}}},"/paths\u001bma":{"xqx":{"6jz0":{"1auUArhOzG1qCf":{"":{":":{"#":"maxqx6jz01auUArhOzG1qCf"},">":1747820035439.003}},"5w36gWOTejsbA":{"":{":":{"#":"maxqx6jz05w36gWOTejsbA"},">":1747820035439.006}}},"8ii":{"03tynfzMIPdCWwF":{"":{":":{"#":"maxqx8ii03tynfzMIPdCWwF"},">":1747820037978.0051}},"uC8B3GHR9Xp1":{"":{":":{"#":"maxqx8iiuC8B3GHR9Xp1"},">":1747820037978.002}}}},"z":{"9w":{"ruu0":{"1aocLrcRofrbSw":{"":{":":{"#":"maz9wruu01aocLrcRofrbSw"},">":1747912395270.003}},"5z441luHQPaOI":{"":{":":{"#":"maz9wruu05z441luHQPaOI"},">":1747912395270.006}},"96eP7JVwDUH4Xh":{"":{":":{"#":"maz9wruu096eP7JVwDUH4Xh"},">":1747912395270.009}},"dRaWNZ5SWSPjo":{"":{":":{"#":"maz9wruu0dRaWNZ5SWSPjo"},">":1747912395270.012}},"gsuWAg7ul1FHtb":{"":{":":{"#":"maz9wruu0gsuWAg7ul1FHtb"},">":1747912395270.0151}}},"vzc0":{"1a8tgWjbahPZwK":{"":{":":{"#":"maz9wvzc01a8tgWjbahPZwK"},">":1747912400616.003}},"5ldNMUUGPSGMP":{"":{":":{"#":"maz9wvzc05ldNMUUGPSGMP"},">":1747912400616.006}},"96wiIhQo1oH8Sh":{"":{":":{"#":"maz9wvzc096wiIhQo1oH8Sh"},">":1747912400616.009}},"dlQ5zpoPDdCtM":{"":{":":{"#":"maz9wvzc0dlQ5zpoPDdCtM"},">":1747912400616.012}},"gszxl2XxN6WtDX":{"":{":":{"#":"maz9wvzc0gszxl2XxN6WtDX"},">":1747912400616.0151}}},"zsp0":{"1au1zZGBXCOujJ":{"":{":":{"#":"maz9wzsp01au1zZGBXCOujJ"},">":1747912405561.003}},"5tUrbApR2WRqR":{"":{":":{"#":"maz9wzsp05tUrbApR2WRqR"},">":1747912405561.006}},"96roPjotBU4FTE":{"":{":":{"#":"maz9wzsp096roPjotBU4FTE"},">":1747912405561.009}},"dtOTSQFBA98R8":{"":{":":{"#":"maz9wzsp0dtOTSQFBA98R8"},">":1747912405561.012}},"gsBjNu6Ndol9Ph":{"":{":":{"#":"maz9wzsp0gsBjNu6Ndol9Ph"},">":1747912405561.0151}}}},"a":{"3":{"6j":{"t01aZkgPlW78scHx":{"":{":":{"#":"maza36jt01aZkgPlW78scHx"},">":1747912694250}},"u0":{"1asxiEcjHxbQZI":{"":{":":{"#":"maza36ju01asxiEcjHxbQZI"},">":1747912694250.003}},"5udwJODN03BoC":{"":{":":{"#":"maza36ju05udwJODN03BoC"},">":1747912694250.006}},"96waF9hNMpJxps":{"":{":":{"#":"maza36ju096waF9hNMpJxps"},">":1747912694250.009}},"dq7pdjFFxM8gl":{"":{":":{"#":"maza36ju0dq7pdjFFxM8gl"},">":1747912694250.012}}}},"b3m0":{"1aObCpJHxnuxOV":{"":{":":{"#":"maza3b3m01aObCpJHxnuxOV"},">":1747912700146.003}},"52VELpjIL0a6h":{"":{":":{"#":"maza3b3m052VELpjIL0a6h"},">":1747912700146.006}},"96d35hbmfh6EUU":{"":{":":{"#":"maza3b3m096d35hbmfh6EUU"},">":1747912700146.009}},"dyJ45bzNDVSKW":{"":{":":{"#":"maza3b3m0dyJ45bzNDVSKW"},">":1747912700146.012}},"gsgtlu7MDT1IT8":{"":{":":{"#":"maza3b3m0gsgtlu7MDT1IT8"},">":1747912700146.0151}}},"tpp":{"0":{"3tjGuZKrMfn6UJ":{"":{":":{"#":"maza3tpp03tjGuZKrMfn6UJ"},">":1747912724269.0051}},"8yuWmEcHK7bcV":{"":{":":{"#":"maza3tpp08yuWmEcHK7bcV"},">":1747912724269.008}},"bp8L2gAQv9irWj":{"":{":":{"#":"maza3tpp0bp8L2gAQv9irWj"},">":1747912724269.011}},"fiAR9ag3fNQMox":{"":{":":{"#":"maza3tpp0fiAR9ag3fNQMox"},">":1747912724269.014}}},"NOJ95csXOs1X":{"":{":":{"#":"maza3tppNOJ95csXOs1X"},">":1747912724269.002}}}},"5":{"6ns0":{"1aH3i0TaltQSS4":{"":{":":{"#":"maza56ns01aH3i0TaltQSS4"},">":1747912787704.003}},"5vnWJL39C9wJ4":{"":{":":{"#":"maza56ns05vnWJL39C9wJ4"},">":1747912787704.006}},"96dzqGERqAWR42":{"":{":":{"#":"maza56ns096dzqGERqAWR42"},">":1747912787704.009}},"d5uejlHj9adp5":{"":{":":{"#":"maza56ns0d5uejlHj9adp5"},">":1747912787704.012}},"gs9PEUhVDnkd70":{"":{":":{"#":"maza56ns0gs9PEUhVDnkd70"},">":1747912787704.0151}}},"qb":{"f0":{"1aQjQw08gXoJhr":{"":{":":{"#":"maza5qbf01aQjQw08gXoJhr"},">":1747912813179.003}},"5FsIus40sUHBg":{"":{":":{"#":"maza5qbf05FsIus40sUHBg"},">":1747912813179.006}},"9689viBFTUwTGa":{"":{":":{"#":"maza5qbf09689viBFTUwTGa"},">":1747912813179.009}}},"g":{"03teCqZcnzcaMb6":{"":{":":{"#":"maza5qbg03teCqZcnzcaMb6"},">":1747912813180.0051}},"MCNVFMsBFhNf":{"":{":":{"#":"maza5qbgMCNVFMsBFhNf"},">":1747912813180.002}}}}},"9":{"0s90":{"1adfMIRFV5ESpX":{"":{":":{"#":"maza90s901adfMIRFV5ESpX"},">":1747912966713.003}},"5Gl7p0BLwBTdv":{"":{":":{"#":"maza90s905Gl7p0BLwBTdv"},">":1747912966713.006}},"96tXaVdAEcLvX9":{"":{":":{"#":"maza90s9096tXaVdAEcLvX9"},">":1747912966713.009}},"dnGmAoF7XIdV4":{"":{":":{"#":"maza90s90dnGmAoF7XIdV4"},">":1747912966713.012}},"gsMerT0ybZMvEL":{"":{":":{"#":"maza90s90gsMerT0ybZMvEL"},">":1747912966713.0151}}},"xk":{"70":{"1ao9MGoT9A3oXH":{"":{":":{"#":"maza9xk701ao9MGoT9A3oXH"},">":1747913009191.003}},"5jupalXyh2S2p":{"":{":":{"#":"maza9xk705jupalXyh2S2p"},">":1747913009191.006}},"96JKPKKUj9F2n6":{"":{":":{"#":"maza9xk7096JKPKKUj9F2n6"},">":1747913009191.009}},"dAOVx4Dx06sZj":{"":{":":{"#":"maza9xk70dAOVx4Dx06sZj"},">":1747913009191.012}},"gsOC66vVzwagKp":{"":{":":{"#":"maza9xk70gsOC66vVzwagKp"},">":1747913009191.0151}}},"601afQwEMMpiCbUP":{"":{":":{"#":"maza9xk601afQwEMMpiCbUP"},">":1747913009191}}}},"41u70":{"1aAI4rBxq48l3Q":{"":{":":{"#":"maza41u701aAI4rBxq48l3Q"},">":1747912734799.003}},"5sEC1vhiBoWQX":{"":{":":{"#":"maza41u705sEC1vhiBoWQX"},">":1747912734799.006}},"967c3uxMGVGSMd":{"":{":":{"#":"maza41u70967c3uxMGVGSMd"},">":1747912734799.009}},"dCeVbINU6hfeV":{"":{":":{"#":"maza41u70dCeVbINU6hfeV"},">":1747912734799.012}},"gsPP5Jw8GZDv29":{"":{":":{"#":"maza41u70gsPP5Jw8GZDv29"},">":1747912734799.0151}}},"62ht0":{"1aghGRJRlKJ1bV":{"":{":":{"#":"maza62ht01aghGRJRlKJ1bV"},">":1747912828961.003}},"59nOMDrEKjEkH":{"":{":":{"#":"maza62ht059nOMDrEKjEkH"},">":1747912828961.006}},"96c2vAMWlGeKrs":{"":{":":{"#":"maza62ht096c2vAMWlGeKrs"},">":1747912828961.009}},"dG9stkEud3iE5":{"":{":":{"#":"maza62ht0dG9stkEud3iE5"},">":1747912828961.012}},"gs4F285BVy3jPx":{"":{":":{"#":"maza62ht0gs4F285BVy3jPx"},">":1747912828961.0151}}},"8utn0":{"1aSu0alrS4UsVD":{"":{":":{"#":"maza8utn01aSu0alrS4UsVD"},">":1747912958987.003}},"5gV9vxbc3fiRQ":{"":{":":{"#":"maza8utn05gV9vxbc3fiRQ"},">":1747912958987.006}},"96hjt8AJzcWG9m":{"":{":":{"#":"maza8utn096hjt8AJzcWG9m"},">":1747912958987.009}},"d0kVEjMZnA7UU":{"":{":":{"#":"maza8utn0d0kVEjMZnA7UU"},">":1747912958987.012}},"gsxTS2NI5kUhCl":{"":{":":{"#":"maza8utn0gsxTS2NI5kUhCl"},">":1747912958987.0151}}},"c7u":{"t":{"0":{"fiyOnCzj3LjPFe":{"":{":":{"#":"mazac7ut0fiyOnCzj3LjPFe"},">":1747913115845.016}},"nfyq6bPg2KEhSr":{"":{":":{"#":"mazac7ut0nfyq6bPg2KEhSr"},">":1747913115845.022}},"8xo5gnw9Uf68d":{"":{":":{"#":"mazac7ut08xo5gnw9Uf68d"},">":1747913115845.01}}},"EcPMACntRyHS":{"":{":":{"#":"mazac7utEcPMACntRyHS"},">":1747913115845.004}}},"u0":{"1acPwlTymoAwKf":{"":{":":{"#":"mazac7uu01acPwlTymoAwKf"},">":1747913115846.0051}},"96DnrNe3ZKEOr0":{"":{":":{"#":"mazac7uu096DnrNe3ZKEOr0"},">":1747913115846.011}}}}},"f":{"m":{"6f2":{"0":{"3tNPIFSp7ng8Z5":{"":{":":{"#":"mazfm6f203tNPIFSp7ng8Z5"},">":1747921978622.0051}},"8CqaBzZS4B3cW":{"":{":":{"#":"mazfm6f208CqaBzZS4B3cW"},">":1747921978622.008}},"bpBTDDyfGpjt3m":{"":{":":{"#":"mazfm6f20bpBTDDyfGpjt3m"},">":1747921978622.011}},"jmTJJaaNB6FzOq":{"":{":":{"#":"mazfm6f20jmTJJaaNB6FzOq"},">":1747921978622.017}},"fisIFTG1BOwohe":{"":{":":{"#":"mazfm6f20fisIFTG1BOwohe"},">":1747921978622.014}}},"sKgUPLZ1PF8F":{"":{":":{"#":"mazfm6f2sKgUPLZ1PF8F"},">":1747921978622.002}}},"9j":{"h01aZPXslueWA2qA":{"":{":":{"#":"mazfm9jh01aZPXslueWA2qA"},">":1747921982670}},"i0":{"1aCqrerucl0Jbg":{"":{":":{"#":"mazfm9ji01aCqrerucl0Jbg"},">":1747921982670.003}},"569BilKT0uPG0":{"":{":":{"#":"mazfm9ji0569BilKT0uPG0"},">":1747921982670.006}},"96r0wpQ1nNDMvh":{"":{":":{"#":"mazfm9ji096r0wpQ1nNDMvh"},">":1747921982670.009}},"dLEXjlXVApbdc":{"":{":":{"#":"mazfm9ji0dLEXjlXVApbdc"},">":1747921982670.012}},"gsp1qjUrGDGbuM":{"":{":":{"#":"mazfm9ji0gsp1qjUrGDGbuM"},">":1747921982670.0151}}}}},"n":{"r9":{"w0":{"1alCpZEzRrW4Em":{"":{":":{"#":"mazfnr9w01alCpZEzRrW4Em"},">":1747922052308.003}},"5ROknvaX84gTS":{"":{":":{"#":"mazfnr9w05ROknvaX84gTS"},">":1747922052308.006}},"96QxELVtGe8mjN":{"":{":":{"#":"mazfnr9w096QxELVtGe8mjN"},">":1747922052308.009}},"dq202QMQDEz8E":{"":{":":{"#":"mazfnr9w0dq202QMQDEz8E"},">":1747922052309}}},"x0":{"1aQwX1cd9DzkVt":{"":{":":{"#":"mazfnr9x01aQwX1cd9DzkVt"},">":1747922052309.003}},"5ljAmID9IS1kJ":{"":{":":{"#":"mazfnr9x05ljAmID9IS1kJ"},">":1747922052309.006}}}},"v2":{"v0":{"1ailzou23qg7k7":{"":{":":{"#":"mazfnv2v01ailzou23qg7k7"},">":1747922057239.003}},"54GaJoh4UfAzj":{"":{":":{"#":"mazfnv2v054GaJoh4UfAzj"},">":1747922057239.006}},"964HnuybuQiORR":{"":{":":{"#":"mazfnv2v0964HnuybuQiORR"},">":1747922057239.009}}},"w":{"0":{"3tRuXEoXSrEHiz":{"":{":":{"#":"mazfnv2w03tRuXEoXSrEHiz"},">":1747922057240.0051}},"8tU3GgltT91Jh":{"":{":":{"#":"mazfnv2w08tU3GgltT91Jh"},">":1747922057240.008}}},"Oa56HlcVJU8u":{"":{":":{"#":"mazfnv2wOa56HlcVJU8u"},">":1747922057240.002}}}}},"qp500":{"1a6ISh3sV2hXT9":{"":{":":{"#":"mazfqp5001a6ISh3sV2hXT9"},">":1747922189508.003}},"5PRpZ7TRVxykl":{"":{":":{"#":"mazfqp5005PRpZ7TRVxykl"},">":1747922189508.006}},"96uE0UMN7rBwwj":{"":{":":{"#":"mazfqp50096uE0UMN7rBwwj"},">":1747922189508.009}},"d96p92l6EIwsZ":{"":{":":{"#":"mazfqp500d96p92l6EIwsZ"},">":1747922189508.012}},"gskUNjHrlEq2Nh":{"":{":":{"#":"mazfqp500gskUNjHrlEq2Nh"},">":1747922189508.0151}},"lfeKu15TMUbZ8":{"":{":":{"#":"mazfqp500lfeKu15TMUbZ8"},">":1747922189508.018}}},"w1h":{"i01as6SUp9oXuKUE":{"":{":":{"#":"mazfw1hi01as6SUp9oXuKUE"},">":1747922438790.003}},"j":{"0":{"3tlvyxlczJHxsE":{"":{":":{"#":"mazfw1hj03tlvyxlczJHxsE"},">":1747922438791.0051}},"8qCTeyV8Uf6m0":{"":{":":{"#":"mazfw1hj08qCTeyV8Uf6m0"},">":1747922438791.008}},"bp9OXX9CDWKIt4":{"":{":":{"#":"mazfw1hj0bp9OXX9CDWKIt4"},">":1747922438791.011}},"fiIvkEer7m0yM6":{"":{":":{"#":"mazfw1hj0fiIvkEer7m0yM6"},">":1747922438791.014}}},"3oWv8kS5JSFl":{"":{":":{"#":"mazfw1hj3oWv8kS5JSFl"},">":1747922438791.002}}}},"z0ck":{"0":{"3tuk0OEJrg6DvC":{"":{":":{"#":"mazfz0ck03tuk0OEJrg6DvC"},">":1747922577284.0051}},"8fRXj8l9UsK5v":{"":{":":{"#":"mazfz0ck08fRXj8l9UsK5v"},">":1747922577284.008}},"bpjiwh4sRDXj0N":{"":{":":{"#":"mazfz0ck0bpjiwh4sRDXj0N"},">":1747922577284.011}},"fifTvChwvtQVGJ":{"":{":":{"#":"mazfz0ck0fifTvChwvtQVGJ"},">":1747922577284.014}},"jmBD2VbgEyKwaP":{"":{":":{"#":"mazfz0ck0jmBD2VbgEyKwaP"},">":1747922577284.017}}},"KQ5uEqQjVBXy":{"":{":":{"#":"mazfz0ckKQ5uEqQjVBXy"},">":1747922577284.002}}}}}}}}},"m":{"b":{"t7g":{"mhu0":{"1a9uEjFRtNPIBg\u001b":{"component":{"":{":":"WikiView",">":1749722267874.002}},"path":{"":{":":"wiki",">":1749722267874.002}}},"596JrvWK7Obn3\u001b":{"component":{"":{":":"WikiCreate",">":1749722267874.0051}},"path":{"":{":":"wiki/create",">":1749722267874.0051}}},"96h8jKOrFexuQN\u001b":{"component":{"":{":":"WikiSetting",">":1749722267874.008}},"path":{"":{":":"settings/wiki",">":1749722267874.008}}}},"u6":{"u01aBk9m0T4usEGo\u001b":{"component":{"":{":":"WikiView",">":1749722277847}},"path":{"":{":":"wiki",">":1749722277847}}},"v0":{"2jwUZuRwexsd3W\u001b":{"component":{"":{":":"WikiCreate",">":1749722277847.003}},"path":{"":{":":"wiki/create",">":1749722277847.003}}},"6nQTTs02MZQfrs\u001b":{"component":{"":{":":"WikiSetting",">":1749722277847.006}},"path":{"":{":":"settings/wiki",">":1749722277847.006}}}}}},"0q":{"9":{"tvq0":{"1a1cN11G7NZt2w\u001b":{"component":{"":{":":"WikiView",">":1748000344454.002}},"path":{"":{":":"wiki",">":1748000344454.002}}},"5S1AwRwbua3qW\u001b":{"component":{"":{":":"WikiCreate",">":1748000344454.0051}},"path":{"":{":":"wiki/create",">":1748000344454.0051}}},"96wxzExrqEVeyu\u001b":{"component":{"":{":":"WikiSetting",">":1748000344455}},"path":{"":{":":"settings/wiki",">":1748000344455}}}},"v3x0":{"96cRgNnCBandG8\u001b":{"component":{"":{":":"WikiSetting",">":1748000346045.008}},"path":{"":{":":"settings/wiki",">":1748000346045.008}}},"542zNx6CsWpBp\u001b":{"component":{"":{":":"WikiCreate",">":1748000346045.0051}},"path":{"":{":":"wiki/create",">":1748000346045.0051}}},"1azw6gEhsK2w0C\u001b":{"component":{"":{":":"WikiView",">":1748000346045.002}},"path":{"":{":":"wiki",">":1748000346045.002}}}}},"t":{"dw70":{"1a8nQpHHm4fa0j\u001b":{"component":{"":{":":"WikiView",">":1748001256855.002}},"path":{"":{":":"wiki",">":1748001256855.002}}},"5METqbywvzzrU\u001b":{"component":{"":{":":"WikiCreate",">":1748001256855.0051}},"path":{"":{":":"wiki/create",">":1748001256855.0051}}},"961eJpn7E0IAUN\u001b":{"component":{"":{":":"WikiSetting",">":1748001256856}},"path":{"":{":":"settings/wiki",">":1748001256856}}}},"eu4":{"0":{"8yUhFxdyrHK8K\u001b":{"component":{"":{":":"WikiSetting",">":1748001258076.007}},"path":{"":{":":"settings/wiki",">":1748001258076.007}}},"3tls6buiMS6hi2\u001b":{"component":{"":{":":"WikiCreate",">":1748001258076.004}},"path":{"":{":":"wiki/create",">":1748001258076.004}}}},"V2LCMf5rm78T\u001b":{"component":{"":{":":"WikiView",">":1748001258076.001}},"path":{"":{":":"wiki",">":1748001258076.001}}}}},"y":{"pvl":{"0":{"3tbstVnnfWQ8vz\u001b":{"component":{"":{":":"WikiCreate",">":1748001505665.004}},"path":{"":{":":"wiki/create",">":1748001505665.004}}},"81pfmw0AwZBaW\u001b":{"component":{"":{":":"WikiSetting",">":1748001505665.007}},"path":{"":{":":"settings/wiki",">":1748001505665.007}}}},"krGDdzPh9JMG\u001b":{"component":{"":{":":"WikiView",">":1748001505665.001}},"path":{"":{":":"wiki",">":1748001505665.001}}}},"nsk0":{"1aAFGb1le7wgtj\u001b":{"component":{"":{":":"WikiView",">":1748001502964.002}},"path":{"":{":":"wiki",">":1748001502964.002}}},"5d8Ve62C3MKzH\u001b":{"component":{"":{":":"WikiCreate",">":1748001502964.0051}},"path":{"":{":":"wiki/create",">":1748001502964.0051}}},"96OjbghKaOOsr2\u001b":{"component":{"":{":":"WikiSetting",">":1748001502964.008}},"path":{"":{":":"settings/wiki",">":1748001502964.008}}}}}},"4xj":{"pc3":{"0":{"3t0XuumHUKsS9j\u001b":{"component":{"":{":":"WikiCreate",">":1748254427139.004}},"path":{"":{":":"wiki/create",">":1748254427139.004}}},"8TlFIRKuSOwvg\u001b":{"component":{"":{":":"WikiSetting",">":1748254427139.007}},"path":{"":{":":"settings/wiki",">":1748254427139.007}}}},"z2Kf1oaynum9\u001b":{"component":{"":{":":"WikiView",">":1748254427139.001}},"path":{"":{":":"wiki",">":1748254427139.001}}}},"ryt0":{"96OhiwZPCZJMH5\u001b":{"component":{"":{":":"WikiSetting",">":1748254430549.008}},"path":{"":{":":"settings/wiki",">":1748254430549.008}}},"1ayQH0PoZhrbpX\u001b":{"component":{"":{":":"WikiView",">":1748254430549.002}},"path":{"":{":":"wiki",">":1748254430549.002}}},"54Z6BHmbhWUZj\u001b":{"component":{"":{":":"WikiCreate",">":1748254430549.0051}},"path":{"":{":":"wiki/create",">":1748254430549.0051}}}}},"u":{"m":{"4xo70":{"1aO3HcE2w9DNPg\u001b":{"component":{"":{":":"WikiView",">":1749807382903.002}},"path":{"":{":":"wiki",">":1749807382903.002}}},"50aJ4XftNXwck\u001b":{"component":{"":{":":"WikiCreate",">":1749807382903.0051}},"path":{"":{":":"wiki/create",">":1749807382903.0051}}},"96pUOenRQCn2p2\u001b":{"component":{"":{":":"WikiSetting",">":1749807382903.008}},"path":{"":{":":"settings/wiki",">":1749807382903.008}}},"dbhT8dZDz2to1\u001b":{"component":{"":{":":"Sidebar",">":1749807382903.011}},"slot":{"":{":":"InfoView",">":1749807382903.011}}},"gsW8GJB04jKqFw\u001b":{"href":{"":{":":"wiki",">":1749807382903.014}},"value":{"":{":":"Wiki",">":1749807382903.014}}}},"6hl":{"vIsQdrTMmf9GH\u001b":{"component":{"":{":":"Main",">":1749807455395.001}},"slot":{"":{":":"InfoView",">":1749807455395.001}}},"wER6oRNSX1ol3\u001b":{"component":{"":{":":"Dialog",">":1749807455396.001}},"slot":{"":{":":"Settings",">":1749807455396.001}}}},"e574":{"ir6vHdFPd8dK\u001b":{"component":{"":{":":"Sidebar",">":1749807812560.001}},"slot":{"":{":":"InfoView",">":1749807812560.001}}},"03toXC5JgoQs2mT\u001b":{"component":{"":{":":"Sidebar",">":1749807812560.004}},"slot":{"":{":":"Settings",">":1749807812560.004}}}}},"s":{"azr":{"a01aKMv9er8HSfft":{"\u001brelations":{"":{":":{"#":"mbusazra01aKMv9er8HSfft/relations"},">":1749817743238}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817743238}}},"b01aWEECSG2mXZTI":{"\u001brelations":{"":{":":{"#":"mbusazrb01aWEECSG2mXZTI/relations"},">":1749817743239}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817743239}}}},"b":{"0":{"6y0":{"1a5vLN62Kaf8tl":{"\u001brelations":{"":{":":{"#":"mbusb06y01a5vLN62Kaf8tl/relations"},">":1749817743802}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817743802}}},"3tc7NJKhsQys4q":{"\u001brelations":{"":{":":{"#":"mbusb06y03tc7NJKhsQys4q/relations"},">":1749817743802.002}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817743802.002}}}},"i":{"e01aary9sSGXWjsg":{"\u001brelations":{"":{":":{"#":"mbusb0ie01aary9sSGXWjsg/relations"},">":1749817744214}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817744214}}},"f01ayhFGXURlcv1W":{"\u001brelations":{"":{":":{"#":"mbusb0if01ayhFGXURlcv1W/relations"},">":1749817744215}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817744215}}}},"t":{"501abeOUyqbPZEtE":{"\u001brelations":{"":{":":{"#":"mbusb0t501abeOUyqbPZEtE/relations"},">":1749817744601}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817744601}}},"601a5aAEqbMb73C2":{"\u001brelations":{"":{":":{"#":"mbusb0t601a5aAEqbMb73C2/relations"},">":1749817744602}},"/relations\u001brelation/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817744602}}}}},"2":{"a":{"e01aT9kAWzmo18Sh":{"\u001brelations":{"":{":":{"#":"mbusb2ae01aT9kAWzmo18Sh/relations"},">":1749817746518}},"/relations\u001brelation/80b583c2-c207-48d0-9263-cc4475ac3fbf":{"":{":":null,">":1749817746518}}},"f01a2mkI7RIXeBBE":{"\u001brelations":{"":{":":{"#":"mbusb2af01a2mkI7RIXeBBE/relations"},">":1749817746519}},"/relations\u001brelation/80b583c2-c207-48d0-9263-cc4475ac3fbf":{"":{":":null,">":1749817746519}}}},"or0":{"1anZ3zftAMHkTo":{"\u001brelations":{"":{":":{"#":"mbusb2or01anZ3zftAMHkTo/relations"},">":1749817747035}},"/relations\u001brelation/80b583c2-c207-48d0-9263-cc4475ac3fbf":{"":{":":null,">":1749817747035}}},"3tJNQuN6H0j2HI":{"\u001brelations":{"":{":":{"#":"mbusb2or03tJNQuN6H0j2HI/relations"},">":1749817747035.002}},"/relations\u001brelation/80b583c2-c207-48d0-9263-cc4475ac3fbf":{"":{":":null,">":1749817747035.002}}}}},"1nv0":{"1avEy6OoRiBK50":{"\u001brelations":{"":{":":{"#":"mbusb1nv01avEy6OoRiBK50/relations"},">":1749817745707}},"/relations\u001brelation/df0d7b1b-9be3-4279-9a7f-36dba9a3e7fc":{"":{":":null,">":1749817745707}}},"3tUqDT56vgNw15":{"\u001brelations":{"":{":":{"#":"mbusb1nv03tUqDT56vgNw15/relations"},">":1749817745707.002}},"/relations\u001brelation/df0d7b1b-9be3-4279-9a7f-36dba9a3e7fc":{"":{":":null,">":1749817745707.002}}}},"b4":{"x01a0D8PQvFe7HeE":{"\u001brelations":{"":{":":{"#":"mbusbb4x01a0D8PQvFe7HeE/relations"},">":1749817757985}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817757985}}},"y01a0wPWdtGpHK21":{"\u001brelations":{"":{":":{"#":"mbusbb4y01a0wPWdtGpHK21/relations"},">":1749817757986}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817757986}}}},"d":{"n":{"b01ag8RIC4ZgJZGT":{"\u001brelations":{"":{":":{"#":"mbusbdnb01ag8RIC4ZgJZGT/relations"},">":1749817761239}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817761239}}},"c01aRBAtTIcIaC35":{"\u001brelations":{"":{":":{"#":"mbusbdnc01aRBAtTIcIaC35/relations"},">":1749817761240}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817761240}}}},"sp0":{"1aIGHIi5yCN35P":{"\u001brelations":{"":{":":{"#":"mbusbdsp01aIGHIi5yCN35P/relations"},">":1749817761433}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817761433}}},"3tzh5OqwcILo9S":{"\u001brelations":{"":{":":{"#":"mbusbdsp03tzh5OqwcILo9S/relations"},">":1749817761433.002}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817761433.002}}}},"xt0":{"1ahrP3U3j6jnsj":{"\u001brelations":{"":{":":{"#":"mbusbdxt01ahrP3U3j6jnsj/relations"},">":1749817761617}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817761617}}},"3tyfZwOCDN3Mm1":{"\u001brelations":{"":{":":{"#":"mbusbdxt03tyfZwOCDN3Mm1/relations"},">":1749817761617.002}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817761617.002}}}}},"o":{"6":{"f01aQ0HOWJmpnzZZ":{"\u001brelations":{"":{":":{"#":"mbusbo6f01aQ0HOWJmpnzZZ/relations"},">":1749817774887}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817774887}}},"g01adSL94X86NI30":{"\u001brelations":{"":{":":{"#":"mbusbo6g01adSL94X86NI30/relations"},">":1749817774888}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817774888}}}},"wa0":{"1a49TjVGMPFHr3":{"\u001brelations":{"":{":":{"#":"mbusbowa01a49TjVGMPFHr3/relations"},">":1749817775818}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817775818}}},"3tDvfn5I9mHtoZ":{"\u001brelations":{"":{":":{"#":"mbusbowa03tDvfn5I9mHtoZ/relations"},">":1749817775818.002}},"/relations\u001brelations/0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":null,">":1749817775818.002}}}}}}}},"p2jah":{"p01abEm4SrjFmeZQ\u001b":{"component":{"":{":":"CommunityView",">":1749472129501.002}},"path":{"":{":":"location",">":1749472129501.002}}},"q0":{"1aioGPDUkdRcNp\u001b":{"component":{"":{":":"Sidebar",">":1749472129502.002}},"slot":{"":{":":"InfoView",">":1749472129502.002}}},"5nZgrVlJApNB6\u001b":{"component":{"":{":":"Sidebar",">":1749472129502.0051}},"slot":{"":{":":"Settings",">":1749472129502.0051}}},"96OxcmvFgTjrWr\u001b":{"href":{"":{":":"location",">":1749472129502.008}},"value":{"":{":":"Community",">":1749472129502.008}}}}},"qba703":{"03tR0tTqsW2c76T\u001b":{"component":{"":{":":"Sidebar",">":1749547287795.004}},"slot":{"":{":":"Settings",">":1749547287795.004}}},"gmhhOzmnx2el\u001b":{"component":{"":{":":"Main",">":1749547287795.001}},"slot":{"":{":":"InfoView",">":1749547287795.001}}}},"50qlrz01aIKkiBof0p8oE\u001b":{"component":{"":{":":"Sidebar",">":1748259787967.002}},"slot":{"":{":":"InfoView",">":1748259787967.002}}},"clt8u0":{"0":{"bpvWMG49tFgKLD\u001b":{"href":{"":{":":"community",">":1748718446328.01}},"value":{"":{":":"Community",">":1748718446328.01}}},"3tsw7yU7EB5LOR\u001b":{"component":{"":{":":"Sidebar",">":1748718446328.004}},"slot":{"":{":":"InfoView",">":1748718446328.004}}},"8F7aLqhKyjVaU\u001b":{"component":{"":{":":"Sidebar",">":1748718446328.007}},"slot":{"":{":":"Settings",">":1748718446328.007}}}},"l7sk4AyG9tE9\u001b":{"component":{"":{":":"CommunityView",">":1748718446328.001}},"path":{"":{":":"community",">":1748718446328.001}}}}},"a":{"z":{"g":{"1":{"pl20":{"1a6M3BgAn58V2w\u001b":{"component":{"":{":":"WikiView",">":1747922703302.002}},"path":{"":{":":"wiki",">":1747922703302.002}}},"5UeBMch45TRK1\u001b":{"component":{"":{":":"WikiCreate",">":1747922703302.0051}},"path":{"":{":":"wiki/create",">":1747922703302.0051}}},"96vhjn8k0CzRsP\u001b":{"component":{"":{":":"WikiSetting",">":1747922703302.008}},"path":{"":{":":"settings/wiki",">":1747922703302.008}}},"dPE3AMnoHAuiG\u001b":{"component":{"":{":":"WikiView",">":1747922703302.011}},"slot":{"":{":":"tab",">":1747922703302.011}}},"gsoll0TB0jsDWZ\u001b":{"component":{"":{":":"WikiView",">":1747922703302.014}},"slot":{"":{":":"InfoView",">":1747922703302.014}}},"l1ctkkqef59nN\u001b":{"component":{"":{":":"WikiRoutes",">":1747922703302.017}},"slot":{"":{":":"Router",">":1747922703302.017}}}},"kc":{"p":{"0":{"bp999WZi9NEb0b\u001b":{"component":{"":{":":"WikiView",">":1747922696521.01}},"slot":{"":{":":"InfoView",">":1747922696521.01}}},"3tkV0ZLFeTy21y\u001b":{"component":{"":{":":"WikiSetting",">":1747922696521.004}},"path":{"":{":":"settings/wiki",">":1747922696521.004}}},"8KqEiSf7BwMpl\u001b":{"component":{"":{":":"WikiView",">":1747922696521.007}},"slot":{"":{":":"tab",">":1747922696521.007}}},"fiwWLjSl2hb21T\u001b":{"component":{"":{":":"WikiRoutes",">":1747922696521.013}},"slot":{"":{":":"Router",">":1747922696521.013}}}},"NPObc7KbaLTO\u001b":{"component":{"":{":":"WikiCreate",">":1747922696521.001}},"path":{"":{":":"wiki/create",">":1747922696521.001}}}},"o01aliZs9IRAKcbn\u001b":{"component":{"":{":":"WikiView",">":1747922696520.002}},"path":{"":{":":"wiki",">":1747922696520.002}}}}},"7":{"49w0":{"1aMGsGUh8soCSZ\u001b":{"component":{"":{":":"WikiView",">":1747922955620.002}},"path":{"":{":":"wiki",">":1747922955620.002}}},"5dcp4SAHCNvzN\u001b":{"component":{"":{":":"WikiCreate",">":1747922955620.0051}},"path":{"":{":":"wiki/create",">":1747922955620.0051}}},"96WpdGXOrVd95H\u001b":{"component":{"":{":":"WikiSetting",">":1747922955620.008}},"path":{"":{":":"settings/wiki",">":1747922955620.008}}},"dnrsigM6dVjdN\u001b":{"component":{"":{":":"WikiView",">":1747922955620.011}},"slot":{"":{":":"tab",">":1747922955620.011}}},"lVv90Pzwwh3kF\u001b":{"component":{"":{":":"WikiRoutes",">":1747922955620.017}},"slot":{"":{":":"Router",">":1747922955620.017}}},"gsP7FXDnJrk7Uo\u001b":{"component":{"":{":":"WikiView",">":1747922955620.014}},"slot":{"":{":":"InfoView",">":1747922955620.014}}}},"84i":{"0":{"3toqmJeRpVNySf\u001b":{"component":{"":{":":"WikiCreate",">":1747922960610.004}},"path":{"":{":":"wiki/create",">":1747922960610.004}}},"8dVLZdCfW7hBc\u001b":{"component":{"":{":":"WikiSetting",">":1747922960610.007}},"path":{"":{":":"settings/wiki",">":1747922960610.007}}},"bp3Jv5102Ouy5M\u001b":{"component":{"":{":":"WikiView",">":1747922960610.01}},"slot":{"":{":":"tab",">":1747922960610.01}}},"fiyGnKR6rjNQoz\u001b":{"component":{"":{":":"WikiView",">":1747922960610.013}},"slot":{"":{":":"InfoView",">":1747922960610.013}}},"jmGJtsMLq4Hlhu\u001b":{"component":{"":{":":"WikiRoutes",">":1747922960610.016}},"slot":{"":{":":"Router",">":1747922960610.016}}}},"DBgCsBPertGp\u001b":{"component":{"":{":":"WikiView",">":1747922960610.001}},"path":{"":{":":"wiki",">":1747922960610.001}}}}},"8":{"3":{"c":{"t":{"0":{"3tEP1WzBdAB4F4\u001b":{"component":{"":{":":"WikiCreate",">":1747923001085.004}},"path":{"":{":":"wiki/create",">":1747923001085.004}}},"bpsLXrwwDEDVt7\u001b":{"component":{"":{":":"WikiView",">":1747923001085.01}},"slot":{"":{":":"tab",">":1747923001085.01}}},"fiuJghGorNZbgK\u001b":{"component":{"":{":":"WikiView",">":1747923001085.013}},"slot":{"":{":":"InfoView",">":1747923001085.013}}},"jmbeX2oJKMwny2\u001b":{"component":{"":{":":"WikiRoutes",">":1747923001085.016}},"slot":{"":{":":"Router",">":1747923001085.016}}},"shbdofxIounu4n\u001b":{"component":{"":{":":"WikiView",">":1747923001085.023}},"path":{"":{":":"wiki",">":1747923001085.023}}},"wlXjJCAM2jqabD\u001b":{"component":{"":{":":"WikiCreate",">":1747923001085.0261}},"path":{"":{":":"wiki/create",">":1747923001085.0261}}},"8nJw5H9wf3xTP\u001b":{"component":{"":{":":"WikiSetting",">":1747923001085.007}},"path":{"":{":":"settings/wiki",">":1747923001085.007}}}},"1":{"0eVjcA9siXtKVF\u001b":{"component":{"":{":":"WikiSetting",">":1747923001085.029}},"path":{"":{":":"settings/wiki",">":1747923001085.029}}},"47rZDudyoNlcWZ\u001b":{"component":{"":{":":"WikiView",">":1747923001085.032}},"slot":{"":{":":"tab",">":1747923001085.032}}},"8pZCkzswssbzy\u001b":{"component":{"":{":":"WikiView",">":1747923001085.0352}},"slot":{"":{":":"InfoView",">":1747923001085.0352}}},"cHSVmchRrWfQh\u001b":{"component":{"":{":":"WikiRoutes",">":1747923001085.038}},"slot":{"":{":":"Router",">":1747923001085.038}}}},"mL9xkhZbPHSL\u001b":{"component":{"":{":":"WikiView",">":1747923001085.001}},"path":{"":{":":"wiki",">":1747923001085.001}}}},"u0":{"2j2iAv40cAORwK\u001b":{"component":{"":{":":"WikiView",">":1747923001086.003}},"path":{"":{":":"wiki",">":1747923001086.003}}},"6n1y0ydz60vTPq\u001b":{"component":{"":{":":"WikiCreate",">":1747923001086.006}},"path":{"":{":":"wiki/create",">":1747923001086.006}}},"agkJDWTQyqU7iL\u001b":{"component":{"":{":":"WikiSetting",">":1747923001086.009}},"path":{"":{":":"settings/wiki",">":1747923001086.009}}},"e9IpIxgf7KkQ1B\u001b":{"component":{"":{":":"WikiView",">":1747923001086.012}},"slot":{"":{":":"tab",">":1747923001086.012}}},"immFJvdkOxPlD\u001b":{"component":{"":{":":"WikiView",">":1747923001086.0151}},"slot":{"":{":":"InfoView",">":1747923001086.0151}}},"m72vt1zAeUKHq\u001b":{"component":{"":{":":"WikiRoutes",">":1747923001086.018}},"slot":{"":{":":"Router",">":1747923001086.018}}}}},"iq":{"0":{"bpVxa0rtWbo5cm\u001b":{"component":{"":{":":"WikiView",">":1747923001298.01}},"slot":{"":{":":"tab",">":1747923001298.01}}},"3tvWR8fSAdLvl7\u001b":{"component":{"":{":":"WikiCreate",">":1747923001298.004}},"path":{"":{":":"wiki/create",">":1747923001298.004}}},"fiGqiPhFEDU6M6\u001b":{"component":{"":{":":"WikiView",">":1747923001298.013}},"slot":{"":{":":"InfoView",">":1747923001298.013}}},"jmI1AMD7Azc3Ty\u001b":{"component":{"":{":":"WikiRoutes",">":1747923001298.016}},"slot":{"":{":":"Router",">":1747923001298.016}}},"8Ks7pPiq7Rh4s\u001b":{"component":{"":{":":"WikiSetting",">":1747923001298.007}},"path":{"":{":":"settings/wiki",">":1747923001298.007}}}},"VMSkJKOtIZLv\u001b":{"component":{"":{":":"WikiView",">":1747923001298.001}},"path":{"":{":":"wiki",">":1747923001298.001}}}}},"kaj":{"0":{"3tKhHkRAqTBMD3\u001b":{"component":{"":{":":"WikiCreate",">":1747923023035.004}},"path":{"":{":":"wiki/create",">":1747923023035.004}}},"8kZZKTbfG7SZQ\u001b":{"component":{"":{":":"WikiSetting",">":1747923023035.007}},"path":{"":{":":"settings/wiki",">":1747923023035.007}}},"bpioE3z9FssUux\u001b":{"component":{"":{":":"WikiView",">":1747923023035.01}},"slot":{"":{":":"tab",">":1747923023035.01}}},"fiuXSAygghR2pd\u001b":{"component":{"":{":":"WikiView",">":1747923023035.013}},"slot":{"":{":":"InfoView",">":1747923023035.013}}},"jmKWleZWhPKaoz\u001b":{"component":{"":{":":"WikiRoutes",">":1747923023035.016}},"slot":{"":{":":"Router",">":1747923023035.016}}}},"TswsSNZyIzlL\u001b":{"component":{"":{":":"WikiView",">":1747923023035.001}},"path":{"":{":":"wiki",">":1747923023035.001}}}}},"0kkg0":{"1af2h3tUeEz6RP\u001b":{"component":{"":{":":"WikiView",">":1747922650144.002}},"path":{"":{":":"wiki",">":1747922650144.002}}},"5r32Wt9DXhguy\u001b":{"component":{"":{":":"WikiCreate",">":1747922650144.0051}},"path":{"":{":":"wiki/create",">":1747922650144.0051}}},"96swx9OZeSF0Vd\u001b":{"component":{"":{":":"WikiSetting",">":1747922650144.008}},"path":{"":{":":"settings/wiki",">":1747922650144.008}}},"dzvHXg4Wl5sGC\u001b":{"component":{"":{":":"WikiView",">":1747922650144.011}},"slot":{"":{":":"tab",">":1747922650144.011}}},"gsnSPJXouc41Wl\u001b":{"component":{"":{":":"WikiView",">":1747922650144.014}},"slot":{"":{":":"InfoView",">":1747922650144.014}}},"lULPuJig73pa5\u001b":{"component":{"":{":":"WikiRoutes",">":1747922650144.017}},"slot":{"":{":":"Router",">":1747922650144.017}}}},"6whu":{"0":{"3t5xmad4GIzs0l\u001b":{"component":{"":{":":"WikiCreate",">":1747922945538.004}},"path":{"":{":":"wiki/create",">":1747922945538.004}}},"bpZH056MZ37Unj\u001b":{"component":{"":{":":"WikiView",">":1747922945538.01}},"slot":{"":{":":"tab",">":1747922945538.01}}},"fi2y6aEZrOQlkc\u001b":{"component":{"":{":":"WikiView",">":1747922945538.013}},"slot":{"":{":":"InfoView",">":1747922945538.013}}},"jm5VKt2g9MFSoK\u001b":{"component":{"":{":":"WikiRoutes",">":1747922945538.016}},"slot":{"":{":":"Router",">":1747922945538.016}}},"8D6jyuab3E6nk\u001b":{"component":{"":{":":"WikiSetting",">":1747922945538.007}},"path":{"":{":":"settings/wiki",">":1747922945538.007}}}},"ZTz36UOZkxT4\u001b":{"component":{"":{":":"WikiView",">":1747922945538.001}},"path":{"":{":":"wiki",">":1747922945538.001}}}},"t":{"hn":{"20":{"1ai19moHtGSTCZ\u001b":{"component":{"":{":":"WikiView",">":1747923999374.002}},"path":{"":{":":"wiki",">":1747923999374.002}}},"541bU4IFPr5zn\u001b":{"component":{"":{":":"WikiCreate",">":1747923999374.0051}},"path":{"":{":":"wiki/create",">":1747923999374.0051}}},"96SrvayKP1cBuK\u001b":{"component":{"":{":":"WikiCreate",">":1747923999375}},"path":{"":{":":"settings",">":1747923999375}}}},"30":{"2jTid7ISwvSgV2\u001b":{"component":{"":{":":"WikiView",">":1747923999375.003}},"slot":{"":{":":"tab",">":1747923999375.003}}},"6nRr8ubFap3ZeA\u001b":{"component":{"":{":":"WikiView",">":1747923999375.006}},"slot":{"":{":":"InfoView",">":1747923999375.006}}},"aggbqpq3WRLftU\u001b":{"component":{"":{":":"WikiRoutes",">":1747923999375.009}},"slot":{"":{":":"Router",">":1747923999375.009}}}}},"gq":{"k01a2aHRW33psjNx\u001b":{"component":{"":{":":"WikiView",">":1747923998205}},"path":{"":{":":"wiki",">":1747923998205}}},"l0":{"ifPLN64Sv9xXs\u001b":{"component":{"":{":":"WikiRoutes",">":1747923998205.0151}},"slot":{"":{":":"Router",">":1747923998205.0151}}},"2jStQOUSAF4tCI\u001b":{"component":{"":{":":"WikiCreate",">":1747923998205.003}},"path":{"":{":":"wiki/create",">":1747923998205.003}}},"agVgMSUggier7S\u001b":{"component":{"":{":":"WikiView",">":1747923998205.009}},"slot":{"":{":":"tab",">":1747923998205.009}}},"6n8kAvngLGbJkD\u001b":{"component":{"":{":":"WikiCreate",">":1747923998205.006}},"path":{"":{":":"settings",">":1747923998205.006}}},"e9yczQM3BymJnE\u001b":{"component":{"":{":":"WikiView",">":1747923998205.012}},"slot":{"":{":":"InfoView",">":1747923998205.012}}}}},"m5q0":{"1acwuEmMBjRORj\u001b":{"component":{"":{":":"WikiView",">":1747924005230.002}},"path":{"":{":":"wiki",">":1747924005230.002}}},"96VbfRn56PvKTO\u001b":{"component":{"":{":":"WikiCreate",">":1747924005230.008}},"path":{"":{":":"settings",">":1747924005230.008}}},"dRVEGWg4q6fgs\u001b":{"component":{"":{":":"WikiView",">":1747924005230.011}},"slot":{"":{":":"tab",">":1747924005230.011}}},"gsRtT9ciwl0G1T\u001b":{"component":{"":{":":"WikiView",">":1747924005230.014}},"slot":{"":{":":"InfoView",">":1747924005230.014}}},"50slw3C5Uxyu5\u001b":{"component":{"":{":":"WikiCreate",">":1747924005230.0051}},"path":{"":{":":"wiki/create",">":1747924005230.0051}}},"lOPE81HSGniE7\u001b":{"component":{"":{":":"WikiRoutes",">":1747924005230.017}},"slot":{"":{":":"Router",">":1747924005230.017}}}}},"h":{"6ae0":{"1awnAWn0gsFO4n\u001b":{"component":{"":{":":"WikiView",">":1747923424790.002}},"path":{"":{":":"wiki",">":1747923424790.002}}},"5mupGhfkK6liW\u001b":{"component":{"":{":":"WikiCreate",">":1747923424790.0051}},"path":{"":{":":"wiki/create",">":1747923424790.0051}}},"96iyGozG8c74DF\u001b":{"component":{"":{":":"WikiSetting",">":1747923424790.008}},"path":{"":{":":"settings/wiki",">":1747923424790.008}}},"dlzKwhILB7lGm\u001b":{"component":{"":{":":"WikiView",">":1747923424790.011}},"slot":{"":{":":"tab",">":1747923424790.011}}},"gsSHNwPV2Ds6hL\u001b":{"component":{"":{":":"WikiView",">":1747923424790.014}},"slot":{"":{":":"InfoView",">":1747923424790.014}}},"lJV5V9xVF70qb\u001b":{"component":{"":{":":"WikiRoutes",">":1747923424790.017}},"slot":{"":{":":"Router",">":1747923424790.017}}}},"cs2":{"0":{"3tRrJZBFpZfZqi\u001b":{"component":{"":{":":"WikiCreate",">":1747923433202.004}},"path":{"":{":":"wiki/create",">":1747923433202.004}}},"bphRXU4oXxBvo1\u001b":{"component":{"":{":":"WikiView",">":1747923433202.01}},"slot":{"":{":":"tab",">":1747923433202.01}}},"fip85FFkzSQpeI\u001b":{"component":{"":{":":"WikiView",">":1747923433202.013}},"slot":{"":{":":"InfoView",">":1747923433202.013}}},"jmXXCxtDXgd1by\u001b":{"component":{"":{":":"WikiRoutes",">":1747923433202.016}},"slot":{"":{":":"Router",">":1747923433202.016}}},"8IXw8OuGeLmZR\u001b":{"component":{"":{":":"WikiSetting",">":1747923433202.007}},"path":{"":{":":"settings/wiki",">":1747923433202.007}}}},"mWPwdg6ALu51\u001b":{"component":{"":{":":"WikiView",">":1747923433202.001}},"path":{"":{":":"wiki",">":1747923433202.001}}}}}},"9w":{"ruu0":{"1aocLrcRofrbSw\u001b":{"component":{"":{":":"WikiView",">":1747912395270.002}},"path":{"":{":":"wiki",">":1747912395270.002}}},"5z441luHQPaOI\u001b":{"component":{"":{":":"WikiCreate",">":1747912395270.0051}},"path":{"":{":":"/wiki/create",">":1747912395270.0051}}},"96eP7JVwDUH4Xh\u001b":{"component":{"":{":":"WikiSetting",">":1747912395270.008}},"path":{"":{":":"settings/wiki",">":1747912395270.008}}},"dRaWNZ5SWSPjo\u001b":{"component":{"":{":":"WikiView",">":1747912395270.011}},"slot":{"":{":":"tab",">":1747912395270.011}}},"gsuWAg7ul1FHtb\u001b":{"component":{"":{":":"WikiView",">":1747912395270.014}},"slot":{"":{":":"InfoView",">":1747912395270.014}}}},"vzc0":{"1a8tgWjbahPZwK\u001b":{"component":{"":{":":"WikiView",">":1747912400616.002}},"path":{"":{":":"wiki",">":1747912400616.002}}},"5ldNMUUGPSGMP\u001b":{"component":{"":{":":"WikiCreate",">":1747912400616.0051}},"path":{"":{":":"/wiki/create",">":1747912400616.0051}}},"96wiIhQo1oH8Sh\u001b":{"component":{"":{":":"WikiSetting",">":1747912400616.008}},"path":{"":{":":"settings/wiki",">":1747912400616.008}}},"dlQ5zpoPDdCtM\u001b":{"component":{"":{":":"WikiView","undefined":1747912400616.011}},"slot":{"":{":":"tab","undefined":1747912400616.011}}},"gszxl2XxN6WtDX\u001b":{"component":{"":{":":"WikiView","undefined":1747912400616.014}},"slot":{"":{":":"InfoView",">":1747912400616.014}}}},"zsp0":{"1au1zZGBXCOujJ\u001b":{"component":{"":{":":"WikiView",">":1747912405561.002}},"path":{"":{":":"wiki",">":1747912405561.002}}},"component":{"":{":":"WikiCreate",">":1747912405561.0051}},"path":{"":{":":"/wiki/create",">":1747912405561.0051}},"dtOTSQFBA98R8\u001b":{"component":{"":{":":"WikiView",">":1747912405561.011}},"slot":{"":{":":"tab",">":1747912405561.011}}},"gsBjNu6Ndol9Ph\u001b":{"component":{"":{":":"WikiView",">":1747912405561.014}},"slot":{"":{":":"InfoView","undefined":1747912405561.014}}},"96roPjotBU4FTE\u001b":{"component":{"":{":":"WikiSetting","undefined":1747912405561.008}},"path":{"":{":":"settings/wiki",">":1747912405561.008}}},"5tUrbApR2WRqR\u001b":{"component":{"":{":":"WikiCreate",">":1747912405561.0051}},"path":{"":{":":"/wiki/create",">":1747912405561.0051}}}}},"f":{"z":{"kn":{"80":{"1aR1uJx3JdW56F\u001b":{"component":{"":{":":"WikiView",">":1747922603588.002}},"path":{"":{":":"wiki",">":1747922603588.002}}},"5zFwH4kcv5wHz\u001b":{"component":{"":{":":"WikiCreate",">":1747922603588.0051}},"path":{"":{":":"wiki/create",">":1747922603588.0051}}},"96dZT0k8D3tbER\u001b":{"component":{"":{":":"WikiSetting",">":1747922603588.008}},"path":{"":{":":"settings/wiki",">":1747922603588.008}}},"dl7Ha4gRgicpr\u001b":{"component":{"":{":":"WikiView",">":1747922603589}},"slot":{"":{":":"tab",">":1747922603589}}}},"90":{"6nPOUPwFSW7bhB\u001b":{"component":{"":{":":"WikiRoutes",">":1747922603589.006}},"slot":{"":{":":"Router",">":1747922603589.006}}},"2jtSEyX7E1HeVG\u001b":{"component":{"":{":":"WikiView",">":1747922603589.003}},"slot":{"":{":":"InfoView",">":1747922603589.003}}}}},"0ck":{"0":{"jmBD2VbgEyKwaP\u001b":{"component":{"":{":":"WikiRoutes",">":1747922577284.016}},"slot":{"":{":":"Router",">":1747922577284.016}}},"3tuk0OEJrg6DvC\u001b":{"component":{"":{":":"WikiCreate",">":1747922577284.004}},"path":{"":{":":"wiki/create",">":1747922577284.004}}},"fifTvChwvtQVGJ\u001b":{"component":{"":{":":"WikiView",">":1747922577284.013}},"slot":{"":{":":"InfoView",">":1747922577284.013}}},"8fRXj8l9UsK5v\u001b":{"component":{"":{":":"WikiSetting",">":1747922577284.007}},"path":{"":{":":"settings/wiki",">":1747922577284.007}}},"bpjiwh4sRDXj0N\u001b":{"component":{"":{":":"WikiView",">":1747922577284.01}},"slot":{"":{":":"tab",">":1747922577284.01}}}},"KQ5uEqQjVBXy\u001b":{"component":{"":{":":"WikiView",">":1747922577284.001}},"path":{"":{":":"wiki",">":1747922577284.001}}}}},"n":{"r9":{"w0":{"1alCpZEzRrW4Em\u001b":{"component":{"":{":":"WikiView",">":1747922052308.002}},"":{"undefined":"wiki",">":1747922052308.002},"path":{"":{":":"wiki",">":1747922052308.002}}},"5ROknvaX84gTS\u001b":{"component":{"":{":":"WikiCreate",">":1747922052308.0051}},"path":{"":{":":"wiki/create",">":1747922052308.0051}}},"96QxELVtGe8mjN\u001b":{"component":{"":{":":"WikiSetting",">":1747922052308.008}},"path":{"":{":":"settings/wiki",">":1747922052308.008}}},"dq202QMQDEz8E\u001b":{"component":{"":{":":"WikiView",">":1747922052308.011}},"slot":{"":{":":"tab",">":1747922052308.011}}}},"x0":{"undefined":"WikiView",">":1747922052309.002,"slot":{"":{":":"InfoView",">":1747922052309.002}},"5ljAmID9IS1kJ\u001b":{"component":{"":{":":"WikiRoutes",">":1747922052309.0051}},"slot":{"":{":":"Router",">":1747922052309.0051}}},"1aQwX1cd9DzkVt\u001b":{"component":{"":{":":"WikiView",">":1747922052309.002}},"slot":{"":{":":"InfoView",">":1747922052309.002}}}}},"v2":{"v0":{"1ailzou23qg7k7\u001b":{"component":{"":{":":"WikiView",">":1747922057239.002}},"path":{"":{":":"wiki",">":1747922057239.002}}},"54GaJoh4UfAzj\u001b":{"component":{"":{":":"WikiCreate",">":1747922057239.0051}},"path":{"":{":":"wiki/create",">":1747922057239.0051}}},"964HnuybuQiORR\u001b":{"component":{"":{":":"WikiSetting",">":1747922057239.008}},"path":{"":{":":"settings/wiki",">":1747922057239.008}}}},"w":{"0":{"3tRuXEoXSrEHiz\u001b":{"component":{"":{":":"WikiView",">":1747922057240.004}},"slot":{"":{":":"InfoView",">":1747922057240.004}}},"8tU3GgltT91Jh\u001b":{"component":{"":{":":"WikiRoutes",">":1747922057240.007}},"slot":{"":{":":"Router",">":1747922057240.007}}}},"Oa56HlcVJU8u\u001b":{"component":{"":{":":"WikiView",">":1747922057240.001}},"slot":{"":{":":"tab",">":1747922057240.001}}}}}},"qp500":{"1a6ISh3sV2hXT9\u001b":{"component":{"":{":":"WikiView",">":1747922189508.002}},"path":{"":{":":"wiki",">":1747922189508.002}}},"5PRpZ7TRVxykl\u001b":{"component":{"":{":":"WikiCreate",">":1747922189508.0051}},"path":{"":{":":"wiki/create",">":1747922189508.0051}}},"96uE0UMN7rBwwj\u001b":{"component":{"":{":":"WikiSetting",">":1747922189508.008}},"path":{"":{":":"settings/wiki",">":1747922189508.008}}},"d96p92l6EIwsZ\u001b":{"component":{"":{":":"WikiView",">":1747922189508.011}},"slot":{"":{":":"tab",">":1747922189508.011}}},"lfeKu15TMUbZ8\u001b":{"component":{"":{":":"WikiRoutes",">":1747922189508.017}},"slot":{"":{":":"Router",">":1747922189508.017}}},"gskUNjHrlEq2Nh\u001b":{"component":{"":{":":"WikiView",">":1747922189508.014}},"slot":{"":{":":"InfoView",">":1747922189508.014}}}},"w1h":{"i01as6SUp9oXuKUE\u001b":{"component":{"":{":":"WikiView",">":1747922438790.002}},"path":{"":{":":"wiki",">":1747922438790.002}}},"j":{"0":{"3tlvyxlczJHxsE\u001b":{"component":{"":{":":"WikiSetting",">":1747922438791.004}},"path":{"":{":":"settings/wiki",">":1747922438791.004}}},"8qCTeyV8Uf6m0\u001b":{"component":{"":{":":"WikiView",">":1747922438791.007}},"slot":{"":{":":"tab",">":1747922438791.007}}},"fiIvkEer7m0yM6\u001b":{"component":{"":{":":"WikiRoutes",">":1747922438791.013}},"slot":{"":{":":"Router",">":1747922438791.013}}},"bp9OXX9CDWKIt4\u001b":{"component":{"":{":":"WikiView",">":1747922438791.01}},"slot":{"":{":":"InfoView",">":1747922438791.01}}}},"3oWv8kS5JSFl\u001b":{"component":{"":{":":"WikiCreate",">":1747922438791.001}},"path":{"":{":":"wiki/create",">":1747922438791.001}}}}},"6f2":{"0":{"3tNPIFSp7ng8Z5\u001b":{"component":{"":{":":"WikiCreate",">":1747921978622.004}},"path":{"":{":":"wiki/create",">":1747921978622.004}}},"8CqaBzZS4B3cW\u001b":{"component":{"":{":":"WikiSetting",">":1747921978622.007}},"path":{"":{":":"settings/wiki",">":1747921978622.007}}},"bpBTDDyfGpjt3m\u001b":{"component":{"":{":":"WikiView",">":1747921978622.01}},"slot":{"":{":":"tab",">":1747921978622.01}}},"fisIFTG1BOwohe\u001b":{"component":{"":{":":"WikiView","undefined":1747921978622.013}},"slot":{"":{":":"InfoView",">":1747921978622.013}}},"jmTJJaaNB6FzOq\u001b":{"component":{"":{":":"WikiRoutes",">":1747921978622.016}},"slot":{"":{":":"Router",">":1747921978622.016}}}},"sKgUPLZ1PF8F\u001b":{"component":{"":{":":"WikiView",">":1747921978622.001}},"path":{"":{":":"wiki",">":1747921978622.001}}}},"9j":{"i0":{"1aCqrerucl0Jbg\u001b":{"component":{"":{":":"WikiCreate",">":1747921982670.002}},"path":{"":{":":"wiki/create","undefined":1747921982670.002}}},"569BilKT0uPG0\u001b":{"component":{"":{":":"WikiSetting",">":1747921982670.0051}},"path":{"":{":":"settings/wiki",">":1747921982670.0051}}},"96r0wpQ1nNDMvh\u001b":{"component":{"":{":":"WikiView",">":1747921982670.008}},"slot":{"":{":":"tab",">":1747921982670.008}}},"dLEXjlXVApbdc\u001b":{"component":{"":{":":"WikiView",">":1747921982670.011}},"slot":{"":{":":"InfoView",">":1747921982670.011}}},"gsp1qjUrGDGbuM\u001b":{"component":{"":{":":"WikiRoutes",">":1747921982670.014}},"slot":{"":{":":"Router",">":1747921982670.014}}}},"h01aZPXslueWA2qA\u001b":{"component":{"":{":":"WikiView",">":1747921982669.002}},"path":{"":{":":"wiki",">":1747921982669.002}}}},"m":{"6f2":{"0":{"3tNPIFSp7ng8Z5\u001b":{"component":{"":{":":"WikiCreate",">":1747921978622.004}},"path":{"":{":":"wiki/create",">":1747921978622.004}}},"8CqaBzZS4B3cW\u001b":{"component":{"":{":":"WikiSetting",">":1747921978622.007}},"path":{"":{":":"settings/wiki",">":1747921978622.007}}},"bpBTDDyfGpjt3m\u001b":{"component":{"":{":":"WikiView",">":1747921978622.01}},"slot":{"":{":":"tab",">":1747921978622.01}}},"fisIFTG1BOwohe\u001b":{"component":{"":{":":"WikiView",">":1747921978622.013}},"slot":{"":{":":"InfoView",">":1747921978622.013}}},"jmTJJaaNB6FzOq\u001b":{"component":{"":{":":"WikiRoutes",">":1747921978622.016}},"slot":{"":{":":"Router",">":1747921978622.016}}}},"sKgUPLZ1PF8F\u001b":{"component":{"":{":":"WikiView",">":1747921978622.001}},"path":{"":{":":"wiki",">":1747921978622.001}}}},"9j":{"h01aZPXslueWA2qA\u001b":{"component":{"":{":":"WikiView",">":1747921982669.002}},"path":{"":{":":"wiki",">":1747921982669.002}}},"i0":{"1aCqrerucl0Jbg\u001b":{"component":{"":{":":"WikiCreate",">":1747921982670.002}},"path":{"":{":":"wiki/create",">":1747921982670.002}}},"569BilKT0uPG0\u001b":{"component":{"":{":":"WikiSetting",">":1747921982670.0051}},"path":{"":{":":"settings/wiki",">":1747921982670.0051}}},"96r0wpQ1nNDMvh\u001b":{"component":{"":{":":"WikiView",">":1747921982670.008}},"slot":{"":{":":"tab",">":1747921982670.008}}},"dLEXjlXVApbdc\u001b":{"component":{"":{":":"WikiView",">":1747921982670.011}},"slot":{"":{":":"InfoView",">":1747921982670.011}}},"gsp1qjUrGDGbuM\u001b":{"component":{"":{":":"WikiRoutes",">":1747921982670.014}},"slot":{"":{":":"Router",">":1747921982670.014}}}}}}},"a":{"3":{"6j":{"t01aZkgPlW78scHx\u001b":{"component":{"":{":":"WikiView",">":1747912694249.002}},"path":{"":{":":"wiki",">":1747912694249.002}}},"u0":{"1asxiEcjHxbQZI\u001b":{"component":{"":{":":"WikiCreate",">":1747912694250.002}},"path":{"":{":":"/wiki/create",">":1747912694250.002}}},"5udwJODN03BoC\u001b":{"component":{"":{":":"WikiSetting",">":1747912694250.0051}},"path":{"":{":":"settings/wiki",">":1747912694250.0051}}},"96waF9hNMpJxps\u001b":{"component":{"":{":":"WikiView",">":1747912694250.008}},"slot":{"":{":":"tab",">":1747912694250.008}}},"dq7pdjFFxM8gl\u001b":{"component":{"":{":":"WikiView",">":1747912694250.011}},"slot":{"":{":":"InfoView",">":1747912694250.011}}}}},"b3m0":{"1aObCpJHxnuxOV\u001b":{"component":{"":{":":"WikiView",">":1747912700146.002}},"path":{"":{":":"wiki",">":1747912700146.002}}},"52VELpjIL0a6h\u001b":{"component":{"":{":":"WikiCreate",">":1747912700146.0051}},"path":{"":{":":"/wiki/create",">":1747912700146.0051}}},"96d35hbmfh6EUU\u001b":{"component":{"":{":":"WikiSetting",">":1747912700146.008}},"path":{"":{":":"settings/wiki",">":1747912700146.008}}},"dyJ45bzNDVSKW\u001b":{"component":{"":{":":"WikiView",">":1747912700146.011}},"slot":{"":{":":"tab",">":1747912700146.011}}},"gsgtlu7MDT1IT8\u001b":{"component":{"":{":":"WikiView",">":1747912700146.014}},"slot":{"":{":":"InfoView",">":1747912700146.014}}}},"tpp":{"0":{"3tjGuZKrMfn6UJ\u001b":{"component":{"":{":":"WikiCreate",">":1747912724269.004}},"path":{"":{":":"wiki/create",">":1747912724269.004}}},"8yuWmEcHK7bcV\u001b":{"component":{"":{":":"WikiSetting",">":1747912724269.007}},"path":{"":{":":"settings/wiki",">":1747912724269.007}}},"bp8L2gAQv9irWj\u001b":{"component":{"":{":":"WikiView",">":1747912724269.01}},"slot":{"":{":":"tab",">":1747912724269.01}}},"fiAR9ag3fNQMox\u001b":{"component":{"":{":":"WikiView",">":1747912724269.013}},"slot":{"":{":":"InfoView",">":1747912724269.013}}}},"NOJ95csXOs1X\u001b":{"component":{"":{":":"WikiView",">":1747912724269.001}},"path":{"":{":":"wiki",">":1747912724269.001}}}}},"5":{"6ns0":{"1aH3i0TaltQSS4\u001b":{"component":{"":{":":"WikiView",">":1747912787704.002}},"path":{"":{":":"wiki",">":1747912787704.002}}},"5vnWJL39C9wJ4\u001b":{"component":{"":{":":"WikiCreate",">":1747912787704.0051}},"path":{"":{":":"wiki/create",">":1747912787704.0051}}},"96dzqGERqAWR42\u001b":{"component":{"":{":":"WikiSetting",">":1747912787704.008}},"path":{"":{":":"settings/wiki",">":1747912787704.008}}},"d5uejlHj9adp5\u001b":{"component":{"":{":":"WikiView",">":1747912787704.011}},"slot":{"":{":":"tab",">":1747912787704.011}}},"gs9PEUhVDnkd70\u001b":{"component":{"":{":":"WikiView",">":1747912787704.014}},"slot":{"":{":":"InfoView",">":1747912787704.014}}}},"qb":{"f0":{"1aQjQw08gXoJhr\u001b":{"component":{"":{":":"WikiView",">":1747912813179.002}},"path":{"":{":":"wiki",">":1747912813179.002}}},"5FsIus40sUHBg\u001b":{"component":{"":{":":"WikiCreate",">":1747912813179.0051}},"path":{"":{":":"wiki/create",">":1747912813179.0051}}},"9689viBFTUwTGa\u001b":{"component":{"":{":":"WikiSetting",">":1747912813179.008}},"path":{"":{":":"settings/wiki",">":1747912813179.008}}}},"g":{"03teCqZcnzcaMb6\u001b":{"component":{"":{":":"WikiView",">":1747912813180.004}},"slot":{"":{":":"InfoView",">":1747912813180.004}}},"MCNVFMsBFhNf\u001b":{"component":{"":{":":"WikiView",">":1747912813180.001}},"slot":{"":{":":"tab",">":1747912813180.001}}}}}},"6":{"2ht0":{"1aghGRJRlKJ1bV\u001b":{"component":{"":{":":"WikiView",">":1747912828961.002}},"path":{"undefined":"wiki",">":1747912828961.002,"":{":":"wiki",">":1747912828961.002}}},"59nOMDrEKjEkH\u001b":{"component":{"":{":":"WikiCreate",">":1747912828961.0051}},"path":{"":{":":"wiki/create",">":1747912828961.0051}}},"96c2vAMWlGeKrs\u001b":{"component":{"":{":":"WikiSetting",">":1747912828961.008}},"path":{"":{":":"settings/wiki",">":1747912828961.008}}},"dG9stkEud3iE5\u001b":{"component":{"":{":":"WikiView",">":1747912828961.011}},"slot":{"":{":":"tab",">":1747912828961.011}}},"gs4F285BVy3jPx\u001b":{"component":{"":{":":"WikiView",">":1747912828961.014}},"slot":{"":{":":"InfoView",">":1747912828961.014}}}},"pn60":{"1aOvo4FDc1cyjG\u001b":{"component":{"":{":":"WikiView",">":1747912858962.002}},"path":{"":{":":"wiki",">":1747912858962.002}}},"5j2Js9pyoTXL7\u001b":{"component":{"":{":":"WikiCreate",">":1747912858962.0051}},"path":{"":{":":"wiki/create",">":1747912858962.0051}}},"96nxDlOLTHaHcC\u001b":{"component":{"":{":":"WikiSetting",">":1747912858962.008}},"path":{"":{":":"settings/wiki",">":1747912858962.008}}},"d3DhyRJ0eIc3t\u001b":{"component":{"":{":":"WikiView",">":1747912858962.011}},"slot":{"":{":":"tab",">":1747912858962.011}}},"gsANkXVunFpDyX\u001b":{"component":{"":{":":"WikiView",">":1747912858962.014}},"slot":{"":{":":"InfoView",">":1747912858962.014}}}}},"7":{"7210":{"1al3K4ZQanAOKC\u001b":{"component":{"":{":":"WikiView",">":1747912881529.002}},"path":{"":{":":"wiki",">":1747912881529.002}}},"5SwUy8ToKpUXw\u001b":{"component":{"":{":":"WikiCreate",">":1747912881529.0051}},"path":{"":{":":"wiki/create",">":1747912881529.0051}}},"96B7qIUzkkcu8z\u001b":{"component":{"":{":":"WikiSetting",">":1747912881529.008}},"path":{"":{":":"settings/wiki",">":1747912881529.008}}},"dCJx6HbnRqHJM\u001b":{"component":{"":{":":"WikiView",">":1747912881529.011}},"slot":{"":{":":"tab",">":1747912881529.011}}},"gsTRNWvI2ipq6b\u001b":{"component":{"":{":":"WikiView",">":1747912881529.014}},"slot":{"":{":":"InfoView",">":1747912881529.014}}}},"5vx0":{"1aEfbq9NESymN3\u001b":{"component":{"":{":":"WikiView",">":1747912880013.002}},"path":{"":{":":"wiki",">":1747912880013.002}}},"54yeufUTXw4U6\u001b":{"component":{"":{":":"WikiCreate",">":1747912880013.0051}},"path":{"":{":":"wiki/create",">":1747912880013.0051}}},"96IzpmU7s1VHnK\u001b":{"component":{"":{":":"WikiSetting",">":1747912880013.008}},"path":{"":{":":"settings/wiki",">":1747912880013.008}}},"dTE3MP8lukmKE\u001b":{"component":{"":{":":"WikiView",">":1747912880013.011}},"slot":{"":{":":"tab",">":1747912880013.011}}},"gsgDD9o8efOi4E\u001b":{"component":{"":{":":"WikiView",">":1747912880013.014}},"slot":{"":{":":"InfoView",">":1747912880013.014}}}}},"9":{"0s90":{"5Gl7p0BLwBTdv\u001b":{"component":{"":{":":"WikiCreate",">":1747912966713.0051}},"path":{"":{":":"wiki/create",">":1747912966713.0051}}},"1adfMIRFV5ESpX\u001b":{"component":{"":{":":"WikiView",">":1747912966713.002}},"path":{"":{":":"wiki",">":1747912966713.002}}},"96tXaVdAEcLvX9\u001b":{"component":{"":{":":"WikiSetting",">":1747912966713.008}},"path":{"":{":":"settings/wiki",">":1747912966713.008}}},"dnGmAoF7XIdV4\u001b":{"component":{"":{":":"WikiView",">":1747912966713.011}},"slot":{"":{":":"tab",">":1747912966713.011}}},"gsMerT0ybZMvEL\u001b":{"component":{"":{":":"WikiView",">":1747912966713.014}},"slot":{"":{":":"InfoView",">":1747912966713.014}}}},"xk":{"70":{"1ao9MGoT9A3oXH\u001b":{"component":{"":{":":"WikiView",">":1747913009191.002}},"path":{"":{":":"wiki/:page",">":1747913009191.002}}},"5jupalXyh2S2p\u001b":{"component":{"":{":":"WikiCreate",">":1747913009191.0051}},"path":{"":{":":"wiki/create",">":1747913009191.0051}}},"96JKPKKUj9F2n6\u001b":{"component":{"":{":":"WikiSetting",">":1747913009191.008}},"path":{"":{":":"settings/wiki",">":1747913009191.008}}},"dAOVx4Dx06sZj\u001b":{"component":{"":{":":"WikiView",">":1747913009191.011}},"slot":{"":{":":"tab",">":1747913009191.011}}},"gsOC66vVzwagKp\u001b":{"component":{"":{":":"WikiView",">":1747913009191.014}},"slot":{"":{":":"InfoView",">":1747913009191.014}}}},"601afQwEMMpiCbUP\u001b":{"component":{"":{":":"WikiView",">":1747913009190.002}},"path":{"":{":":"wiki",">":1747913009190.002}}}}},"41u70":{"1aAI4rBxq48l3Q\u001b":{"component":{"":{":":"WikiView",">":1747912734799.002}},"path":{"":{":":"wiki",">":1747912734799.002}}},"5sEC1vhiBoWQX\u001b":{"component":{"":{":":"WikiCreate",">":1747912734799.0051}},"path":{"":{":":"wiki/create",">":1747912734799.0051}}},"967c3uxMGVGSMd\u001b":{"component":{"":{":":"WikiSetting",">":1747912734799.008}},"path":{"":{":":"settings/wiki",">":1747912734799.008}}},"dCeVbINU6hfeV\u001b":{"component":{"":{":":"WikiView",">":1747912734799.011}},"slot":{"":{":":"tab",">":1747912734799.011}}},"gsPP5Jw8GZDv29\u001b":{"component":{"":{":":"WikiView",">":1747912734799.014}},"slot":{"":{":":"InfoView",">":1747912734799.014}}}},"8utn0":{"5gV9vxbc3fiRQ\u001b":{"component":{"":{":":"WikiCreate",">":1747912958987.0051}},"path":{"":{":":"wiki/create",">":1747912958987.0051}}},"96hjt8AJzcWG9m\u001b":{"component":{"":{":":"WikiSetting",">":1747912958987.008}},"path":{"":{":":"settings/wiki",">":1747912958987.008}}},"d0kVEjMZnA7UU\u001b":{"component":{"":{":":"WikiView",">":1747912958987.011}},"slot":{"":{":":"tab",">":1747912958987.011}}},"gsxTS2NI5kUhCl\u001b":{"component":{"":{":":"WikiView",">":1747912958987.014}},"slot":{"":{":":"InfoView",">":1747912958987.014}}},"1aSu0alrS4UsVD\u001b":{"component":{"":{":":"WikiView",">":1747912958987.002}},"path":{"":{":":"wiki",">":1747912958987.002}}}},"c7u":{"t":{"0":{"8xo5gnw9Uf68d\u001b":{"component":{"":{":":"WikiView",">":1747913115845.007}},"path":{"":{":":"wiki/:page",">":1747913115845.007}}},"fiyOnCzj3LjPFe\u001b":{"component":{"":{":":"WikiCreate",">":1747913115845.013}},"path":{"":{":":"wiki/create",">":1747913115845.013}}},"nfyq6bPg2KEhSr\u001b":{"component":{"":{":":"WikiSetting",">":1747913115845.019}},"path":{"":{":":"settings/wiki",">":1747913115845.019}}}},"EcPMACntRyHS\u001b":{"component":{"":{":":"WikiView",">":1747913115845.001}},"path":{"":{":":"wiki",">":1747913115845.001}}}},"u0":{"1acPwlTymoAwKf\u001b":{"component":{"":{":":"WikiView",">":1747913115846.002}},"slot":{"":{":":"tab",">":1747913115846.002}}},"96DnrNe3ZKEOr0\u001b":{"component":{"":{":":"WikiView",">":1747913115846.008}},"slot":{"":{":":"InfoView",">":1747913115846.008}}}}}}},"xqx":{"6jz0":{"1auUArhOzG1qCf\u001b":{"component":{"":{":":"WikiView",">":1747820035439.002}},"path":{"":{":":"wiki",">":1747820035439.002}}},"5w36gWOTejsbA\u001b":{"component":{"":{":":"WikiCreate",">":1747820035439.0051}},"path":{"":{":":"wiki/create",">":1747820035439.0051}}}},"8ii":{"03tynfzMIPdCWwF\u001b":{"component":{"":{":":"WikiCreate",">":1747820037978.004}},"path":{"":{":":"wiki/create",">":1747820037978.004}}},"uC8B3GHR9Xp1\u001b":{"component":{"":{":":"WikiView",">":1747820037978.001}},"path":{"":{":":"wiki",">":1747820037978.001}}}}}},"c":{"8":{"x":{"o2u901abf8168rhJDTp\u001b":{"component":{"":{":":"Main",">":1750673278305.002}},"slot":{"":{":":"InfoView",">":1750673278305.002}}},"q1yb01aAXNDB1PfGvFs\u001b":{"component":{"":{":":"Dialog",">":1750673370467.002}},"slot":{"":{":":"Settings",">":1750673370467.002}}},"uhr2GbjoB8TIKmzR\u001b":{"component":{"":{":":"",">":1750673577566.001}},"slot":{"":{":":"",">":1750673577566.001}}},"xjpw8Cvjqa9gJm1g\u001b":{"component":{"":{":":"Main",">":1750673720084.001}},"slot":{"":{":":"InfoView",">":1750673720084.001}}}},"y":{"1":{"5k1LKuCu6Gj4TGS\u001b":{"component":{"":{":":"Main",">":1750673888353.001}},"slot":{"":{":":"InfoView",">":1750673888353.001}}},"et6yBcRMm63ZKJK\u001b":{"component":{"":{":":"Main",">":1750673900346.001}},"slot":{"":{":":"InfoView",">":1750673900346.001}}},"m861j7oqzpc21bs\u001b":{"component":{"":{":":"Main",">":1750673909958.001}},"slot":{"":{":":"InfoView",">":1750673909958.001}}}},"2qwxnjFiind14zk5\u001b":{"component":{"":{":":"Main",">":1750673962689.001}},"slot":{"":{":":"InfoView",">":1750673962689.001}}},"cywc1LcFFVBXARhR\u001b":{"component":{"":{":":"Main",">":1750674439596.001}},"slot":{"":{":":"InfoView",">":1750674439596.001}}},"g2na01aUNHeRcINsWbW\u001b":{"component":{"":{":":"Dialog",">":1750674584422.002}},"slot":{"":{":":"Settings",">":1750674584422.002}}},"qpv401a1K281MABsXPL\u001b":{"component":{"":{":":"Main",">":1750675081072.002}},"slot":{"":{":":"InfoView",">":1750675081072.002}}},"r9vx02jad03jltVCWIy\u001b":{"component":{"":{":":"Dialog",">":1750675107021.003}},"slot":{"":{":":"Settings",">":1750675107021.003}}},"wpyq01adSfC3XUKhtal\u001b":{"component":{"":{":":"Main",">":1750675361138.002}},"slot":{"":{":":"InfoView",">":1750675361138.002}}},"x3k402jn8kl312u7L6N\u001b":{"component":{"":{":":"Dialog",">":1750675378756.003}},"slot":{"":{":":"Settings",">":1750675378756.003}}}}},"j3x9l9W2qnELWMe8iw\u001b":{"credential":{"":{":":"{\"clientDataJSON\":\"\",\"attestationObject\":\"\"}",">":1751288446412}},"id":{"":{":":"sNRXW1ewgLolGMT5yXPPOdJ4-Zc",">":1751288446412}}}}},"l":{"ink_plugin":{"\u001b":{"slots":{"":{":":{"#":"link_plugin/slots"},">":1750411064682.0051}},"id":{"":{":":"link_plugin",">":1750411064681}},"name":{"":{":":"Link",">":1750411064681}},"url":{"":{":":"https://toplocs.com:3005/assets/plugin.js",">":1750411064681}},"paths":{"":{":":{"#":"link_plugin/paths"},">":1750411064682.006}},"tabs":{"":{":":{"#":"link_plugin/tabs"},">":1750411064682.007}}},"/slots\u001bmb":{"ume574":{"ir6vHdFPd8dK":{"":{":":null,">":1750411064682}},"03toXC5JgoQs2mT":{"":{":":null,">":1750411064784.001}}},"50qlrz01aIKkiBof0p8oE":{"":{":":null,">":1750411064784}}}},"ocation":{"_plugin":{"\u001b":{"paths":{"":{":":{"#":"location_plugin/paths"},">":1750675862183.002}},"slots":{"":{":":{"#":"location_plugin/slots"},">":1750675862183.001}},"tabs":{"":{":":{"#":"location_plugin/tabs"},">":1750675862183.003}},"id":{"":{":":"location_plugin",">":1750675862182}},"name":{"":{":":"Location",">":1750675862182}},"url":{"":{":":"http://localhost:3007/assets/plugin.js",">":1750675862182}}},"/":{"paths\u001bmbp2jahp01abEm4SrjFmeZQ":{"":{":":null,">":1750675199180}},"tabs\u001bmbp2jahq096OxcmvFgTjrWr":{"":{":":null,">":1750675199180.001}},"slots\u001bm":{"b":{"um6hl":{"vIsQdrTMmf9GH":{"":{":":null,">":1750675199179.004}},"wER6oRNSX1ol3":{"":{":":null,">":1750675199179.0051}}},"p2jahq0":{"1aioGPDUkdRcNp":{"":{":":null,">":1750675199179}},"5nZgrVlJApNB6":{"":{":":null,">":1750675199179.001}}},"qba703":{"03tR0tTqsW2c76T":{"":{":":null,">":1750675199179.002}},"gmhhOzmnx2el":{"":{":":null,">":1750675199179.003}}}},"c":{"8":{"x":{"o2u901abf8168rhJDTp":{"":{":":null,">":1750675199190.0051}},"q1yb01aAXNDB1PfGvFs":{"":{":":null,">":1750675199191}},"uhr2GbjoB8TIKmzR":{"":{":":null,">":1750675199191.001}},"xjpw8Cvjqa9gJm1g":{"":{":":null,">":1750675199191.002}}},"y":{"1":{"5k1LKuCu6Gj4TGS":{"":{":":null,">":1750675199191.003}},"et6yBcRMm63ZKJK":{"":{":":null,">":1750675199191.004}},"m861j7oqzpc21bs":{"":{":":null,">":1750675199191.0051}}},"2qwxnjFiind14zk5":{"":{":":null,">":1750675199191.006}},"cywc1LcFFVBXARhR":{"":{":":null,">":1750675199191.007}},"g2na01aUNHeRcINsWbW":{"":{":":null,">":1750675199195}},"qpv401a1K281MABsXPL":{"":{":":null,">":1750675199298}},"r9vx02jad03jltVCWIy":{"":{":":null,">":1750675199299}},"wpyq01adSfC3XUKhtal":{"":{":":{"#":"mc8ywpyq01adSfC3XUKhtal"},">":1750675862183}},"x3k402jn8kl312u7L6N":{"":{":":{"#":"mc8yx3k402jn8kl312u7L6N"},">":1750675378757}}}},"1ys06n0":{"1aEJ1UVQv9cptD":{"":{":":null,">":1750675199179.006}},"5G25fXcl1loAs":{"":{":":null,">":1750675199179.007}}}}}}},"s\u001blocation-plugin/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"location-plugin/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807958766}},"-plugin/a68e112c-063c-49f8-9150-74ec964c782f\u001b":{"l":{"at":{"":{":":"45.46617196901387",">":1749807958765}},"ng":{"":{":":"12.530854622720064",">":1749807958765}}},"zoom":{"":{":":"15",">":1749807958765}}}}},"629368f3-e80f-4007-aede-be702f6a2890":{"\u001brelations":{"":{":":{"#":"629368f3-e80f-4007-aede-be702f6a2890/relations"},">":1750324231252}},"/relations\u001brelations/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3/":{"relation/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/28b62942-103f-4b53-bb76-0d3589a9c0d3/relation/629368f3-e80f-4007-aede-be702f6a2890"},">":1749810499896}},"location_category/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749810499995.001}},"child/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749823831135}}},"a":{"f5926c1-2e47-48b8-ac0c-002a8a8bdce7/":{"relation/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749808723018}},"location_category/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/af5926c1-2e47-48b8-ac0c-002a8a8bdce7/location_category/629368f3-e80f-4007-aede-be702f6a2890"},">":1749808722918.002}}},"6d471f6-a848-4835-bd44-8fac301b3ca5/":{"relation/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/relation/629368f3-e80f-4007-aede-be702f6a2890"},">":1749811176843.002}},"c":{"ategory/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749823411647.001}},"hild":{"/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749823492847.001}},"16/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/child16/629368f3-e80f-4007-aede-be702f6a2890"},">":1749816068284.002}}}},"undefined/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/undefined/629368f3-e80f-4007-aede-be702f6a2890"},">":1749813968135.002}}}},"629368f3-e80f-4007-aede-be702f6a2890/":{"c":{"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823494898}},"hild/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823423996}},"a6":{"d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/child/a6d471f6-a848-4835-bd44-8fac301b3ca5"},">":1749823830214.001}},"8e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/child/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749823836364.001}}}}},"relation/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/relation/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823494798.001}},"a6":{"d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":null,">":1749823830314}},"8e112c-063c-49f8-9150-74ec964c782f":{"":{":":null,">":1749823842664}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/relation/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749823845880.001}}}},"050a20ac-5bff-427d-b861-ff7eb3d02b6c/":{"relation/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749909210049.001}},"visit/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/visit/629368f3-e80f-4007-aede-be702f6a2890"},">":1749909269782.002}},"live/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749909269881.001}}},"48e09c14-283f-4654-943f-b47f67e3e575/live/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/48e09c14-283f-4654-943f-b47f67e3e575/live/629368f3-e80f-4007-aede-be702f6a2890"},">":1750324231252}}}},"a":{"6":{"bae370-5a99-40d7-b5a4-f2c90b46426c":{"\u001brelations":{"":{":":{"#":"a6bae370-5a99-40d7-b5a4-f2c90b46426c/relations"},">":1749807944390.001}},"/relations\u001brelations/a6bae370-5a99-40d7-b5a4-f2c90b46426c/":{"going/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/a6bae370-5a99-40d7-b5a4-f2c90b46426c/going/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807254738.001}},"work/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/a6bae370-5a99-40d7-b5a4-f2c90b46426c/work/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807944390.001}},"love/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6bae370-5a99-40d7-b5a4-f2c90b46426c/love/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749807301699}}}},"8e112c-063c-49f8-9150-74ec964c782f":{"\u001b":{"relations":{"":{":":{"#":"a68e112c-063c-49f8-9150-74ec964c782f/relations"},">":1749907772447.002}},"wikis":{"":{":":{"#":"a68e112c-063c-49f8-9150-74ec964c782f/wikis"},">":1749909918766.001}}},"/":{"relations\u001brelations/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3/":{"relation/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":null,">":1749807314701.001}},"in/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/28b62942-103f-4b53-bb76-0d3589a9c0d3/in/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807314601.002}}},"a6":{"bae370-5a99-40d7-b5a4-f2c90b46426c/":{"going/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/a6bae370-5a99-40d7-b5a4-f2c90b46426c/going/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807254738.002}},"work/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/a6bae370-5a99-40d7-b5a4-f2c90b46426c/work/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749807944391}}},"8e112c-063c-49f8-9150-74ec964c782f/":{"relation/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749808466249}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749809089604}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":null,">":1749907765098}}},"topic_category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":{"#":"relations/a68e112c-063c-49f8-9150-74ec964c782f/topic_category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b"},">":1749809205054.001}},"c":{"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823291331}},"hild/":{"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749809205153}},"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a68e112c-063c-49f8-9150-74ec964c782f/child/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823291232.001}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/a68e112c-063c-49f8-9150-74ec964c782f/child/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749907765000}}}}}},"629368f3-e80f-4007-aede-be702f6a2890/":{"relation/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":null,">":1749823842664.001}},"child/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/child/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749823836364.002}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/relation/a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/relation/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749907772447.002}}},"wikis\u001bwiki-plugin/108ab63b-3028-4e4f-9b06-423e7e497614":{"":{":":{"#":"wiki-plugin/108ab63b-3028-4e4f-9b06-423e7e497614"},">":1749909918766.001}}}},"d471f6-a848-4835-bd44-8fac301b3ca5":{"\u001brelations":{"":{":":{"#":"a6d471f6-a848-4835-bd44-8fac301b3ca5/relations"},">":1749823830314.001}},"/relations\u001brelations/":{"a6d471f6-a848-4835-bd44-8fac301b3ca5/":{"relation/":{"629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/relation/629368f3-e80f-4007-aede-be702f6a2890"},">":1749823492748.001}},"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/relation/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823321882.001}},"a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":null,">":1749817969202.001}},"d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":null,">":1749816064301}}},"c":{"ategory/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823321997}},"629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749823411647}},"a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":null,">":1749813696565.001}},"d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":null,">":1749815097574}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749818097441}}},"hild":{"1":{"2/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/child12/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749816067250.001}},"6/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/child16/629368f3-e80f-4007-aede-be702f6a2890"},">":1749816068284.001}}},"/":{"629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749823492847}},"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749816155967}},"a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":null,">":1749814060467.001}},"d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":null,">":1749815994431}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749822007073}}},"6/d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/child6/d6b60733-7ab4-430f-b828-df6b9466a2bc"},">":1749816064203}}}},"undefined/":{"629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/undefined/629368f3-e80f-4007-aede-be702f6a2890"},">":1749813968135.001}},"a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/undefined/a6d471f6-a848-4835-bd44-8fac301b3ca5"},">":1749814063151.002}},"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/undefined/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749814065182.001}}}},"id":{"":{":":{"#":"relations/id"},">":1749817407312}},"0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":{"#":"relations/0a56dc61-1422-419e-92ab-03002180d63a"},">":1749817501794.001}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b/relation/a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":{"#":"relations/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/relation/a6d471f6-a848-4835-bd44-8fac301b3ca5"},">":1749823208634.001}},"629368f3-e80f-4007-aede-be702f6a2890/":{"relation/a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":null,">":1749823830314.001}},"child/a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/child/a6d471f6-a848-4835-bd44-8fac301b3ca5"},">":1749823830215}}}}}},"f5926c1-2e47-48b8-ac0c-002a8a8bdce7":{"\u001brelations":{"":{":":{"#":"af5926c1-2e47-48b8-ac0c-002a8a8bdce7/relations"},">":1749808723017}},"/relations\u001brelations/af5926c1-2e47-48b8-ac0c-002a8a8bdce7/":{"relation/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749808723017}},"location_category/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/af5926c1-2e47-48b8-ac0c-002a8a8bdce7/location_category/629368f3-e80f-4007-aede-be702f6a2890"},">":1749808722918.001}}}}},"d6":{"e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"\u001b":{"relations":{"":{":":{"#":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/relations"},">":1749909508256.002}},"wikis":{"":{":":{"#":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/wikis"},">":1749909918766}}},"/":{"relations\u001brelations/":{"629368f3-e80f-4007-aede-be702f6a2890/relation/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/629368f3-e80f-4007-aede-be702f6a2890/relation/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749823845880.002}},"050a20ac-5bff-427d-b861-ff7eb3d02b6c/":{"teach/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/teach/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909196665.002}},"l":{"ove/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/love/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909506040.001}},"earn/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/learn/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909198397.002}},"ike/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/like/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909508256.002}}}},"a68e112c-063c-49f8-9150-74ec964c782f/":{"relation/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":null,">":1749907765098.001}},"child/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/a68e112c-063c-49f8-9150-74ec964c782f/child/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749907765000.001}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/":{"relation/":{"a68e112c-063c-49f8-9150-74ec964c782f":{"":{":":{"#":"relations/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/relation/a68e112c-063c-49f8-9150-74ec964c782f"},">":1749907772447.001}},"d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":{"#":"relations/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/relation/d6b60733-7ab4-430f-b828-df6b9466a2bc"},">":1749907776230.001}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749907779147}}},"category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":{"#":"relations/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b"},">":1749907779048.001}}}},"wikis\u001bwiki-plugin/108ab63b-3028-4e4f-9b06-423e7e497614":{"":{":":{"#":"wiki-plugin/108ab63b-3028-4e4f-9b06-423e7e497614"},">":1749909918766}}}},"b60733-7ab4-430f-b828-df6b9466a2bc":{"\u001brelations":{"":{":":{"#":"d6b60733-7ab4-430f-b828-df6b9466a2bc/relations"},">":1749907776230.002}},"/relations\u001brelations/":{"a6d471f6-a848-4835-bd44-8fac301b3ca5/":{"relation/d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":null,">":1749816064301.001}},"c":{"ategory/d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":null,">":1749815097574.001}},"hild":{"/d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":null,">":1749815994431.001}},"6/d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":{"#":"relations/a6d471f6-a848-4835-bd44-8fac301b3ca5/child6/d6b60733-7ab4-430f-b828-df6b9466a2bc"},">":1749816064203.001}}}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/relation/d6b60733-7ab4-430f-b828-df6b9466a2bc":{"":{":":{"#":"relations/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/relation/d6b60733-7ab4-430f-b828-df6b9466a2bc"},">":1749907776230.002}}}}},"relation":{"s/":{"0":{"a56dc61-1422-419e-92ab-03002180d63a\u001b":{"id":{"":{":":"0a56dc61-1422-419e-92ab-03002180d63a",">":1749817501794}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749817501794}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b","undefined":1749817501794}},"ype":{"":{":":"relation",">":1749817501794}}},"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749817501794}},"ype":{"":{":":"relation",">":1749817501794}}},"50a20ac-5bff-427d-b861-ff7eb3d02b6c/":{"teach/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001b":{"id":{"":{":":"49dbc2e7-bb83-4795-8401-322e99d8b8ea",">":1749909196665}},"one":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749909196665}},"t":{"wo":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749909196665}},"ype":{"":{":":"teach",">":1749909196665}}}},"l":{"ove/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001b":{"id":{"":{":":"66f0a703-727b-4d12-8e8a-7352e4f0aeb9",">":1749909506039}},"one":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749909506039}},"t":{"wo":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749909506039}},"ype":{"":{":":"love",">":1749909506039}}}},"earn/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001b":{"id":{"":{":":"9c0e7a9a-1362-4731-b9aa-382ddfb8fc41",">":1749909198397}},"one":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749909198397}},"t":{"wo":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749909198397}},"ype":{"":{":":"learn",">":1749909198397}}}},"i":{"ve/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"db64a8e9-1052-4a7c-abf1-321ac9ca4c61",">":1749909260617}},"one":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749909260617}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749909260617}},"ype":{"":{":":"live",">":1749909260617}}}},"ke/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001b":{"id":{"":{":":"9c1b9122-9643-4833-9080-3ca8cd5ed70a",">":1749909508256}},"one":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749909508256}},"t":{"wo":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749909508256}},"ype":{"":{":":"like",">":1749909508256}}}}}},"relation/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"246f6ff6-8dbc-4e0e-8296-9f45f017cce8",">":1749909208246}},"one":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749909208246}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749909208246}},"ype":{"":{":":"relation",">":1749909208246}}}},"visit/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"f3ff228d-8019-4080-90c7-9d5a94dd343c",">":1749909269782}},"one":{"":{":":"050a20ac-5bff-427d-b861-ff7eb3d02b6c",">":1749909269782}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749909269782}},"ype":{"":{":":"visit",">":1749909269782}}}}}},"28b62942-103f-4b53-bb76-0d3589a9c0d3/":{"in/a68e112c-063c-49f8-9150-74ec964c782f\u001b":{"id":{"":{":":"39b115e5-1e7f-4b1a-8bad-c50443cc7ab3",">":1749807314601}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749807314601}},"t":{"wo":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749807314601}},"ype":{"":{":":"in",">":1749807314601}}}},"relation/":{"a68e112c-063c-49f8-9150-74ec964c782f\u001b":{"id":{"":{":":"e41bc52d-8dcc-44ef-bc82-d22d742c5adb",">":1749807312065}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749807312065}},"t":{"wo":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749807312065}},"ype":{"":{":":"relation",">":1749807312065}}}},"629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"4c9a2279-edae-460d-acd6-2212d21d32a7",">":1749823408265}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823408265}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823408265}},"ype":{"":{":":"relation",">":1749823408265}}}},"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"83fce8c9-8543-40b6-a796-207e8d36fa4e",">":1749808502096}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749808502096}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749808502096}},"ype":{"":{":":"relation",">":1749808502096}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"42532320-d682-436e-b34e-b327ea1a1283",">":1749811065562}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749811065562}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749811065562}},"ype":{"":{":":"relation",">":1749811065562}}}}},"location_category/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"917c9ddb-d10d-4b68-8e80-534f4a7e16ba",">":1749808492699}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749808492699}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749808492699}},"ype":{"":{":":"location_category",">":1749808492699}}}},"topic_category/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"96577643-1fdb-46cc-b602-56e3f7b14981",">":1749808503530}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749808503530}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749808503530}},"ype":{"":{":":"topic_category",">":1749808503530}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"d27d80c9-659b-4814-b26c-eb5056cb6b3d",">":1749810238731}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749810238731}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749810238731}},"ype":{"":{":":"topic_category",">":1749810238731}}}}},"child/":{"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"fe4c80fb-ab50-4a5c-8811-5cf88953297f",">":1749817982086}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749817982086}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749817982086}},"ype":{"":{":":"child",">":1749817982086}}}},"629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"7c315301-a27b-48de-85a3-2fcbb508e792",">":1749823823167}},"one":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823823167}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823823167}},"ype":{"":{":":"child",">":1749823823167}}}}}},"a":{"6":{"bae370-5a99-40d7-b5a4-f2c90b46426c/":{"going/a68e112c-063c-49f8-9150-74ec964c782f\u001b":{"id":{"":{":":"996769e7-394b-4421-beec-28d0f5be2cdc",">":1749807254738}},"one":{"":{":":"a6bae370-5a99-40d7-b5a4-f2c90b46426c",">":1749807254738}},"t":{"wo":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749807254738}},"ype":{"":{":":"going",">":1749807254738}}}},"work/a68e112c-063c-49f8-9150-74ec964c782f\u001b":{"id":{"":{":":"d1132de5-837e-4215-915f-1f53e62608ce",">":1749807944390}},"one":{"":{":":"a6bae370-5a99-40d7-b5a4-f2c90b46426c",">":1749807944390}},"t":{"wo":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749807944390}},"ype":{"":{":":"work",">":1749807944390}}}},"love/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"955abf2b-9cf4-4fa1-a859-7c706568293c",">":1749807301698}},"one":{"":{":":"a6bae370-5a99-40d7-b5a4-f2c90b46426c",">":1749807301698}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749807301698}},"ype":{"":{":":"love",">":1749807301698}}}}},"8e112c-063c-49f8-9150-74ec964c782f/":{"relation/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"b9e55cea-0925-438c-b07f-f3d590fa31cf",">":1749808032173}},"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749808032173}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749808032173}},"ype":{"":{":":"relation",">":1749808032173}}}},"undefined":"ce8c739c-0338-4a08-9e13-25056cef6f73",">":1749808743983,"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749808743983}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749808743983}},"ype":{"":{":":"relation",">":1749808743983}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001b":{"id":{"":{":":"260559bf-e75c-47aa-b734-d4243d5950fa",">":1749808745833}},"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749808745833}},"t":{"wo":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749808745833}},"ype":{"":{":":"relation",">":1749808745833}}}}},"topic_category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"22ec0fdc-d815-4aac-9c39-6d2a58e933f6",">":1749809205054}},"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749809205054}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749809205054}},"ype":{"":{":":"topic_category",">":1749809205054}}}},"c":{"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"7af42f72-7e6e-4aee-bd2f-26a13104ea07",">":1749808466149}},"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749808466149}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749808466149}},"ype":{"":{":":"category",">":1749808466149}},"":{":":"category",">":1749808466149}}},"hild/":{"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"5836ec20-25bc-46a5-a96d-1d229dc3ae6d",">":1749809203237}},"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749809203237}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749809203237}},"ype":{"":{":":"child",">":1749809203237}}}},"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"f0c5e6e6-b8ff-4414-be5d-d0c87af445d2",">":1749823291232}},"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749823291232}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823291232}},"ype":{"":{":":"child",">":1749823291232}}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001b":{"id":{"":{":":"ec35706f-13e2-4990-bf7d-df867c722b60",">":1749907764998}},"one":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749907764998}},"t":{"wo":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749907764998}},"ype":{"":{":":"child",">":1749907764998}}}}}}},"d471f6-a848-4835-bd44-8fac301b3ca5/":{"relation/":{"629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"b385e496-fabe-4196-bf1f-f5f258ce0912",">":1749823492748}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749823492748}},"t":{"wo":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823492748},"ype":{"":{":":"relation",">":1749823492748}}}},"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"df0d7b1b-9be3-4279-9a7f-36dba9a3e7fc",">":1749816155867}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749816548548}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749816548548}},"ype":{"":{":":"category",">":1749816548548}}}},"a6d471f6-a848-4835-bd44-8fac301b3ca5\u001b":{"id":{"":{":":"484b0c32-6807-4350-b92a-9cf3f34820b9",">":1749814060368}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749814060368}},"t":{"wo":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749814060368}},"ype":{"":{":":"relation",">":1749814060368}}}},"d6b60733-7ab4-430f-b828-df6b9466a2bc\u001b":{"id":{"":{":":"d3cdf735-a8f2-4305-8a39-b70b0b84efbf",">":1749815994332}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5","undefined":1749815994332}},"t":{"wo":{"":{":":"d6b60733-7ab4-430f-b828-df6b9466a2bc",">":1749815994332}},"ype":{"":{":":"relation",">":1749815994332}}}}},"c":{"ategory/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"f686cc38-7bd1-4801-90f6-1028b583e67c",">":1749816025266}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749817241128}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749817241128}},"ype":{"":{":":"relation",">":1749817241128}}}},"629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"584da055-48f0-4de1-b20a-0321ef453eac",">":1749823405448}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749823405448}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823405448}},"ype":{"":{":":"category",">":1749823405448}}}},"a6d471f6-a848-4835-bd44-8fac301b3ca5\u001b":{"id":{"":{":":"c0dd16c4-6b7d-4ae6-865a-7d82d36ca63f","undefined":1749813690100}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749813690100}},"t":{"wo":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5","undefined":1749813690100}},"ype":{"":{":":"category",">":1749813690100}}}},"d6b60733-7ab4-430f-b828-df6b9466a2bc\u001b":{"id":{"":{":":"f1afd30d-30ca-4c31-9585-544e0587daea",">":1749815094205}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5","undefined":1749815094205}},"t":{"wo":{"":{":":"d6b60733-7ab4-430f-b828-df6b9466a2bc",">":1749815094205}},"ype":{"":{":":"category",">":1749815094205}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"facd0489-0cbd-46be-a847-080adef60c15",">":1749818069754.001}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5","undefined":1749818069754.001}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749818069754.001}},"ype":{"":{":":"category",">":1749818069754.001}}}}},"hild":{"1":{"2/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"56924390-b6a0-4f33-bb3b-f2f554525506",">":1749816067250}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749816067250}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749816067250}},"ype":{"":{":":"child12",">":1749816067250}}}},"6/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"d98dbc65-6074-4b10-a768-b9421845d288",">":1749816068284}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749816068284}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749816068284}},"ype":{"":{":":"child16",">":1749816068284}}}}},"629368f3-e80f-4007-aede-be702f6a2890\u001b":{"":{":":"7a0af102-6379-41a7-bfd9-a8d6a0ef4029","undefined":1749823380017},":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749823380017,"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823380017}},"ype":{"":{":":"child",">":1749823380017}}}},"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"026db83a-f349-4e68-a9d9-02ad365a5b3e",">":1749816154051}},"undefined":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749816154051,"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749816154051}},"ype":{"":{":":"child",">":1749816154051}}}},"a6d471f6-a848-4835-bd44-8fac301b3ca5\u001b":{"id":{"":{":":"93a6bbc4-f121-41fe-8071-6fa93f99da62",">":1749813760768}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749813760768}},"t":{"wo":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749813760768}},"ype":{"":{":":"child","undefined":1749813760768}}}},"d6b60733-7ab4-430f-b828-df6b9466a2bc\u001b":{"id":{"":{":":"40806fa5-0760-4c24-a293-d02885d6c700",">":1749815986000}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749815986000}},"t":{"":{":":"d6b60733-7ab4-430f-b828-df6b9466a2bc",">":1749815986000},"ype":{"":{":":"child",">":1749815986000}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"":{":":"8b73584a-ab42-4db2-bf4b-b731d82ff669",">":1749818067055},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749822005325}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749822005325}},"ype":{"":{":":"child",">":1749822005325}}},"id":{"":{":":"6ee9bb5f-0a56-4661-ad1d-fa967a664da4",">":1749822005325}}},"6/d6b60733-7ab4-430f-b828-df6b9466a2bc\u001b":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5","undefined":1749816064202},"t":{"wo":{"":{":":"d6b60733-7ab4-430f-b828-df6b9466a2bc",">":1749816064202}},"ype":{"":{":":"child6",">":1749816064202}}}},"/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"5854d0d7-ae4e-4312-9674-e01a86e2f960",">":1749823489598}},"one":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749823489598}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823489598}},"ype":{"":{":":"child",">":1749823489598}}}}}}}},"f5926c1-2e47-48b8-ac0c-002a8a8bdce7/":{"relation/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"77cf18dc-d904-46b4-8540-64f7968f4df4",">":1749808720999}},"one":{"":{":":"af5926c1-2e47-48b8-ac0c-002a8a8bdce7",">":1749808720999}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890","undefined":1749808720999}},"ype":{"":{"undefined":1749808720999}}}},"location_category/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"302e0203-5ea1-4769-b3f7-74fd7cf6ff97",">":1749808722918}},"one":{"":{":":"af5926c1-2e47-48b8-ac0c-002a8a8bdce7",">":1749808722918}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749808722918}},"ype":{"":{":":"location_category",">":1749808722918}}}}}},"id\u001b":{"id":{"":{":":"04b0215f-8269-4ce3-b8bd-fd95cec5b658",">":1749817407311}},"undefined":1749817407311,"t":{"wo":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749817407311}},"ype":{"":{":":"relation",">":1749817407311}}}},"629368f3-e80f-4007-aede-be702f6a2890/":{"c":{"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"30b9f875-2af7-48c5-812c-e20e411003c0",">":1749823491166}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823491166}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823491166}},"ype":{"":{":":"category",">":1749823491166}}}},"hild/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"76634c63-298d-42ab-a319-f2bb9190581c",">":1749823415449}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823415449}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823415449}},"ype":{"":{":":"child",">":1749823415449}}}},"a6":{"d471f6-a848-4835-bd44-8fac301b3ca5\u001b":{"id":{"":{":":"739c1e96-07c6-4f5d-98d8-e2ee7eda8558",">":1749823830214}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823830214}},"t":{"wo":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749823830214}},"ype":{"":{":":"child",">":1749823830214}}}},"8e112c-063c-49f8-9150-74ec964c782f\u001b":{"id":{"":{":":"39ce7b54-5b49-4b44-8c03-72ef411729de",">":1749823836364}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823836364}},"t":{"wo":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749823836364}},"ype":{"":{":":"child",">":1749823836364}}}}}}},"relation/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"ff1b3619-201a-4b02-b248-fcd759471736",">":1749823494798}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823494798}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823494798}},"ype":{"":{":":"relation",">":1749823494798}}}},"a6":{"d471f6-a848-4835-bd44-8fac301b3ca5\u001b":{"id":{"":{":":"b0355e72-da86-468a-a04b-e94eb3b98b2a",">":1749823828780}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823828780}},"t":{"wo":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749823828780}},"ype":{"":{":":"relation",">":1749823828780}}}},"8e112c-063c-49f8-9150-74ec964c782f\u001b":{"id":{"":{":":"0a64e654-72eb-446a-9dba-b1bdc471a8d3",">":1749823841413}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823841413}},"t":{"wo":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749823841413}},"ype":{"":{":":"relation",">":1749823841413}}}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc\u001b":{"id":{"":{":":"26592542-55b4-4d42-acad-075dd2869d1d",">":1749823845880}},"one":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1749823845880}},"t":{"wo":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749823845880}},"ype":{"":{":":"relation",">":1749823845880}}}}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/":{"relation/":{"a68e112c-063c-49f8-9150-74ec964c782f\u001b":{"id":{"":{":":"18c6141a-f51b-44c2-8ea6-d8a121546d47",">":1749907772447}},"one":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749907772447}},"t":{"wo":{"":{":":"a68e112c-063c-49f8-9150-74ec964c782f",">":1749907772447}},"ype":{"":{":":"relation",">":1749907772447}}}},"d6b60733-7ab4-430f-b828-df6b9466a2bc\u001b":{"id":{"":{":":"006675e5-81d3-4595-97b4-3d27a1891fce",">":1749907776230}},"one":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749907776230}},"t":{"wo":{"":{":":"d6b60733-7ab4-430f-b828-df6b9466a2bc",">":1749907776230}},"ype":{"":{":":"relation",">":1749907776230}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"5e4db21d-c7a1-429e-b3a7-81ee26d5fbcb",">":1749907777646}},"one":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749907777646}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749907777646}},"ype":{"":{":":"relation",">":1749907777646}}}}},"category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b\u001b":{"id":{"":{":":"9e48216b-e7e4-48a5-ae1b-fc435f7d2305",">":1749907779048}},"one":{"":{":":"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc",">":1749907779048}},"t":{"wo":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749907779048}},"ype":{"":{":":"category",">":1749907779048}}}}},"48e09c14-283f-4654-943f-b47f67e3e575/live/629368f3-e80f-4007-aede-be702f6a2890\u001b":{"id":{"":{":":"9ee17653-f740-4c5c-b996-02d79ff824cc",">":1750324231250}},"one":{"":{":":"48e09c14-283f-4654-943f-b47f67e3e575",">":1750324231250}},"t":{"wo":{"":{":":"629368f3-e80f-4007-aede-be702f6a2890",">":1750324231250}},"ype":{"":{":":"live",">":1750324231250}}}},"f":{"9e8b7a0-ed34-48c1-b5c5-e5780821832b/":{"relation/":{"a6d471f6-a848-4835-bd44-8fac301b3ca5\u001b":{"id":{"":{":":"0323ffc9-d717-4827-a8bf-7c7cd50d7563",">":1749823208633}},"one":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749823208633}},"t":{"wo":{"":{":":"a6d471f6-a848-4835-bd44-8fac301b3ca5",">":1749823208633}},"ype":{"":{":":"relation",">":1749823208633}}}},"28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"3590b0ee-053b-44f5-b415-a9efa0a4db41",">":1749818109469}},"one":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749818109469}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749818109469}},"ype":{"":{":":"relation",">":1749818109469}}}}},"c":{"hild/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"ca99e815-f3c4-4e0b-8ffb-910a82196f1a",">":1749823292398}},"one":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749823292398}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823292398}},"ype":{"":{":":"child",">":1749823292398}}}},"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"b2cddd35-35bf-4c16-b1f4-fbfda73e806f",">":1749823215215}},"one":{"":{":":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b",">":1749823215215}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1749823215215}},"ype":{"":{":":"category",">":1749823215215}}}}}},"d46adef-41e3-4423-b36e-fd9534eba9de/":{"going/99c82ec1-9c8f-48e1-808c-19037e69a2b9\u001b":{"id":{"":{":":"ef937690-0782-4678-82cb-65e415608e82",">":1750338270582}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750338270582}},"t":{"wo":{"":{":":"99c82ec1-9c8f-48e1-808c-19037e69a2b9",">":1750338270582}},"ype":{"":{":":"going",">":1750338270582}}}},"teach/435ab3b6-414d-463a-8c0b-68c63714c570\u001b":{"id":{"":{":":"7f18d50f-94e2-4192-a2dc-07d09b9ccdc5",">":1750338312649}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750338312649}},"t":{"wo":{"":{":":"435ab3b6-414d-463a-8c0b-68c63714c570",">":1750338312649}},"ype":{"":{":":"teach",">":1750338312649}}}},"relation/":{"435ab3b6-414d-463a-8c0b-68c63714c570\u001b":{"id":{"":{":":"48523c93-6ef9-48da-abd6-d1488173980c",">":1750338308315}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750338308315}},"t":{"wo":{"":{":":"435ab3b6-414d-463a-8c0b-68c63714c570",">":1750338308315}},"ype":{"":{":":"relation",">":1750338308315}}}},"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3\u001b":{"id":{"":{":":"dcd4e1e7-9c76-447c-b8df-01a9b6683e9c",">":1750342411197}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750342411197}},"t":{"wo":{"":{":":"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3",">":1750342411197}},"ype":{"":{":":"relation",">":1750342411197}}}},"cda54940-6eff-47ae-94c8-7413681b424c\u001b":{"id":{"":{":":"6c1bb8d5-3145-41e4-9525-34b9a1bb44e5",">":1750342421665}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750342421665}},"t":{"wo":{"":{":":"cda54940-6eff-47ae-94c8-7413681b424c",">":1750342421665}},"ype":{"":{":":"relation",">":1750342421665}}}}},"like/":{"435ab3b6-414d-463a-8c0b-68c63714c570\u001b":{"id":{"":{":":"7a15012f-82e6-480c-85e0-c2b67a0994fe",">":1750338310234}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750338310234}},"t":{"wo":{"":{":":"435ab3b6-414d-463a-8c0b-68c63714c570",">":1750338310234}},"ype":{"":{":":"like",">":1750338310234}}}},"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3\u001b":{"id":{"":{":":"1adbc7ee-d449-4d25-9d3d-3e8def91ad90",">":1750342417049}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750342417049}},"t":{"wo":{"":{":":"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3",">":1750342417049}},"ype":{"":{":":"like",">":1750342417049}}}}},"visit/":{"99c82ec1-9c8f-48e1-808c-19037e69a2b9\u001b":{"id":{"":{":":"6bd28da4-131a-4144-b68a-aa04d7bf4e00",">":1750338269335}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750338269335}},"t":{"wo":{"":{":":"99c82ec1-9c8f-48e1-808c-19037e69a2b9",">":1750338269335}},"ype":{"":{":":"visit",">":1750338269335}}}},"cda54940-6eff-47ae-94c8-7413681b424c\u001b":{"id":{"":{":":"785f8dfb-3e8c-44a7-97f7-f707ad8f976c",">":1750342424166}},"one":{"":{":":"fd46adef-41e3-4423-b36e-fd9534eba9de",">":1750342424166}},"t":{"wo":{"":{":":"cda54940-6eff-47ae-94c8-7413681b424c",">":1750342424166}},"ype":{"":{":":"visit",">":1750342424166}}}}}}},"9b09b58e-154a-4dd4-b002-74c5ed12318c/":{"learn/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3\u001b":{"id":{"":{":":"a0adf4c5-b9c4-4af6-af79-927f5ffd4a15",">":1750413443348}},"one":{"":{":":"9b09b58e-154a-4dd4-b002-74c5ed12318c",">":1750413443348}},"t":{"wo":{"":{":":"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3",">":1750413443348}},"ype":{"":{":":"learn",">":1750413443348}}}},"teach/2":{"b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3\u001b":{"id":{"":{":":"24842edf-a5ea-4d1c-bdb8-9b6bfd488141",">":1750413445518}},"one":{"":{":":"9b09b58e-154a-4dd4-b002-74c5ed12318c",">":1750413445518}},"t":{"wo":{"":{":":"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3",">":1750413445518}},"ype":{"":{":":"teach",">":1750413445518}}}},"8b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"1c9a10ac-f0d0-4177-8138-de7df92fc819",">":1751285863031}},"one":{"":{":":"9b09b58e-154a-4dd4-b002-74c5ed12318c",">":1751285863031}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1751285863031}},"ype":{"":{":":"teach",">":1751285863031}}}}}},"e330c765-0e91-4f79-b5e3-34945ccc9684/":{"learn/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"6c499b1f-8195-48a9-a199-d47fd45b7ceb",">":1751287329213}},"one":{"":{":":"e330c765-0e91-4f79-b5e3-34945ccc9684",">":1751287329213}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1751287329213}},"ype":{"":{":":"learn",">":1751287329213}}}},"teach/28b62942-103f-4b53-bb76-0d3589a9c0d3\u001b":{"id":{"":{":":"d52d592d-db47-4937-b083-e02b85f1b8ec",">":1751287383178}},"one":{"":{":":"e330c765-0e91-4f79-b5e3-34945ccc9684",">":1751287383178}},"t":{"wo":{"":{":":"28b62942-103f-4b53-bb76-0d3589a9c0d3",">":1751287383178}},"ype":{"":{":":"teach",">":1751287383178}}}}}},"/":{"0":{"4b0215f-8269-4ce3-b8bd-fd95cec5b658\u001btype":{"":{":":"child",">":1749817514928}},"a56dc61-1422-419e-92ab-03002180d63a\u001btype":{"":{":":"category",">":1749817613995}}},"80b583c2-c207-48d0-9263-cc4475ac3fbf\u001btype":{"":{":":"relation",">":1749817513396}},"df0d7b1b-9be3-4279-9a7f-36dba9a3e7fc\u001btype":{"":{":":"relation",">":1749817531396}}}},"050a20ac-5bff-427d-b861-ff7eb3d02b6c":{"\u001brelations":{"":{":":{"#":"050a20ac-5bff-427d-b861-ff7eb3d02b6c/relations"},">":1749909508256.001}},"/relations\u001brelations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/":{"teach/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/teach/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909196665.001}},"l":{"ove/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/love/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909506040}},"earn/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/learn/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909198397.001}},"i":{"ve/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749909269881}},"ke/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/like/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc"},">":1749909508256.001}}}},"relation/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":null,">":1749909210049}},"visit/629368f3-e80f-4007-aede-be702f6a2890":{"":{":":{"#":"relations/050a20ac-5bff-427d-b861-ff7eb3d02b6c/visit/629368f3-e80f-4007-aede-be702f6a2890"},">":1749909269782.001}}}},"c":{"redentials":{"\u001b":{"yannik@yx3m1.com":{"":{":":{"#":"credentials/yannik@yx3m1.com"},">":1750245259828}},"mail@yx3m1.com":{"":{":":{"#":"credentials/mail@yx3m1.com"},">":1750323581663}},"test@yx3m1.com":{"":{":":{"#":"credentials/test@yx3m1.com"},">":1750338183937}},"localhost@yx3m1.com":{"":{":":{"#":"credentials/localhost@yx3m1.com"},">":1750407460487}}},"/":{"yannik@yx3m1.com\u001b":{"credential":{"":{":":"{\"clientDataJSON\":\"\",\"attestationObject\":\"\"}",">":1750245259828}},"id":{"":{":":"OyiXoIC8RuZsmHN82OrYkAafz2Y",">":1750245259828}}},"mail@yx3m1.com\u001b":{"credential":{"":{":":"{\"clientDataJSON\":\"\",\"attestationObject\":\"\"}",">":1750323581663}},"id":{"":{":":"JeeNF7NJ7jozaetnFfhxRB1iD-U",">":1750323581663}}},"test@yx3m1.com\u001b":{"credential":{"":{":":"{\"clientDataJSON\":\"\",\"attestationObject\":\"\"}",">":1750338183937}},"id":{"":{":":"vxoCiCk6DDw-QAkMSK3bnP8PZzU",">":1750338183937}}},"localhost@yx3m1.com\u001b":{"credential":{"":{":":"{\"clientDataJSON\":\"\",\"attestationObject\":\"\"}",">":1750407460487}},"id":{"":{":":"Mh7xRRl6IQ3ZkahFsGoyTBCC7A0",">":1750407460487}}}}},"ommunity_plugin":{"\u001b":{"id":{"":{":":"community_plugin",">":1748718446327}},"name":{"":{":":"Community",">":1748718446327}},"paths":{"":{":":{"#":"community_plugin/paths"},">":1748718446328.012}},"slots":{"":{":":{"#":"community_plugin/slots"},">":1748718446328.013}},"tabs":{"":{":":{"#":"community_plugin/tabs"},">":1748718446328.014}},"url":{"":{":":"http://localhost:3006/assets/plugin.js",">":1748718446327}}},"/":{"paths\u001bmbclt8u0l7sk4AyG9tE9":{"":{":":{"#":"mbclt8u0l7sk4AyG9tE9"},">":1748718446328.002}},"slots\u001bmbclt8u00":{"3tsw7yU7EB5LOR":{"":{":":{"#":"mbclt8u003tsw7yU7EB5LOR"},">":1748718446328.0051}},"8F7aLqhKyjVaU":{"":{":":{"#":"mbclt8u008F7aLqhKyjVaU"},">":1748718446328.008}}},"tabs\u001bmbclt8u00bpvWMG49tFgKLD":{"":{":":{"#":"mbclt8u00bpvWMG49tFgKLD"},">":1748718446328.011}}}},"da54940-6eff-47ae-94c8-7413681b424c":{"\u001brelations":{"":{":":{"#":"cda54940-6eff-47ae-94c8-7413681b424c/relations"},">":1750342424265.001}},"/relations\u001brelations/fd46adef-41e3-4423-b36e-fd9534eba9de/":{"relation/cda54940-6eff-47ae-94c8-7413681b424c":{"":{":":null,">":1750342424265.001}},"visit/cda54940-6eff-47ae-94c8-7413681b424c":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/visit/cda54940-6eff-47ae-94c8-7413681b424c"},">":1750342424166.002}}}}},"wiki":{"_plugin":{"/":{"slots\u001bmbum4xo70dbhT8dZDz2to1":{"":{":":{"#":"mbum4xo70dbhT8dZDz2to1"},">":1749807382903.012}},"tabs\u001bmbum4xo70gsW8GJB04jKqFw":{"":{":":{"#":"mbum4xo70gsW8GJB04jKqFw"},">":1749807382903.0151}},"paths\u001bm":{"az":{"fzkn":{"80":{"1aR1uJx3JdW56F":{"":{":":{"#":"mazfzkn801aR1uJx3JdW56F"},">":1747922603588.003}},"5zFwH4kcv5wHz":{"":{":":{"#":"mazfzkn805zFwH4kcv5wHz"},">":1747922603588.006}},"96dZT0k8D3tbER":{"":{":":{"#":"mazfzkn8096dZT0k8D3tbER"},">":1747922603588.009}},"dl7Ha4gRgicpr":{"":{":":{"#":"mazfzkn80dl7Ha4gRgicpr"},">":1747922603589.001}}},"90":{"2jtSEyX7E1HeVG":{"":{":":{"#":"mazfzkn902jtSEyX7E1HeVG"},">":1747922603589.004}},"6nPOUPwFSW7bhB":{"":{":":{"#":"mazfzkn906nPOUPwFSW7bhB"},">":1747922603589.007}}}},"g":{"1":{"kc":{"o01aliZs9IRAKcbn":{"":{":":{"#":"mazg1kco01aliZs9IRAKcbn"},">":1747922696520.003}},"p":{"0":{"3tkV0ZLFeTy21y":{"":{":":{"#":"mazg1kcp03tkV0ZLFeTy21y"},">":1747922696521.0051}},"8KqEiSf7BwMpl":{"":{":":{"#":"mazg1kcp08KqEiSf7BwMpl"},">":1747922696521.008}},"bp999WZi9NEb0b":{"":{":":{"#":"mazg1kcp0bp999WZi9NEb0b"},">":1747922696521.011}},"fiwWLjSl2hb21T":{"":{":":{"#":"mazg1kcp0fiwWLjSl2hb21T"},">":1747922696521.014}}},"NPObc7KbaLTO":{"":{":":{"#":"mazg1kcpNPObc7KbaLTO"},">":1747922696521.002}}}},"pl20":{"1a6M3BgAn58V2w":{"":{":":{"#":"mazg1pl201a6M3BgAn58V2w"},">":1747922703302.003}},"5UeBMch45TRK1":{"":{":":{"#":"mazg1pl205UeBMch45TRK1"},">":1747922703302.006}},"96vhjn8k0CzRsP":{"":{":":{"#":"mazg1pl2096vhjn8k0CzRsP"},">":1747922703302.009}},"dPE3AMnoHAuiG":{"":{":":{"#":"mazg1pl20dPE3AMnoHAuiG"},">":1747922703302.012}},"gsoll0TB0jsDWZ":{"":{":":{"#":"mazg1pl20gsoll0TB0jsDWZ"},"undefined":1747922703302.0151}},"l1ctkkqef59nN":{"":{":":{"#":"mazg1pl20l1ctkkqef59nN"},">":1747922703302.018}}}},"7":{"49w0":{"1aMGsGUh8soCSZ":{"":{":":{"#":"mazg749w01aMGsGUh8soCSZ"},">":1747922955620.003}},"5dcp4SAHCNvzN":{"":{":":{"#":"mazg749w05dcp4SAHCNvzN"},">":1747922955620.006}},"96WpdGXOrVd95H":{"":{":":{"#":"mazg749w096WpdGXOrVd95H"},">":1747922955620.009}},"dnrsigM6dVjdN":{"":{":":{"#":"mazg749w0dnrsigM6dVjdN"},">":1747922955620.012}},"lVv90Pzwwh3kF":{"":{":":{"#":"mazg749w0lVv90Pzwwh3kF"},">":1747922955620.018}},"gsP7FXDnJrk7Uo":{"":{":":{"#":"mazg749w0gsP7FXDnJrk7Uo"},">":1747922955620.0151}}},"84i":{"0":{"3toqmJeRpVNySf":{"":{":":{"#":"mazg784i03toqmJeRpVNySf"},">":1747922960610.0051}},"8dVLZdCfW7hBc":{"":{":":{"#":"mazg784i08dVLZdCfW7hBc"},">":1747922960610.008}},"bp3Jv5102Ouy5M":{"":{":":{"#":"mazg784i0bp3Jv5102Ouy5M"},">":1747922960610.011}},"fiyGnKR6rjNQoz":{"":{":":{"#":"mazg784i0fiyGnKR6rjNQoz"},">":1747922960610.014}},"jmGJtsMLq4Hlhu":{"":{":":{"#":"mazg784i0jmGJtsMLq4Hlhu"},">":1747922960610.017}}},"DBgCsBPertGp":{"":{":":{"#":"mazg784iDBgCsBPertGp"},">":1747922960610.002}}}},"8":{"3":{"c":{"t":{"0":{"3tEP1WzBdAB4F4":{"":{":":{"#":"mazg83ct03tEP1WzBdAB4F4"},">":1747923001085.0051}},"bpsLXrwwDEDVt7":{"":{":":{"#":"mazg83ct0bpsLXrwwDEDVt7"},">":1747923001085.011}},"fiuJghGorNZbgK":{"":{":":{"#":"mazg83ct0fiuJghGorNZbgK"},"undefined":1747923001085.014}},"jmbeX2oJKMwny2":{"":{":":{"#":"mazg83ct0jmbeX2oJKMwny2"},">":1747923001085.017}},"shbdofxIounu4n":{"":{":":{"#":"mazg83ct0shbdofxIounu4n"},">":1747923001085.024}},"wlXjJCAM2jqabD":{"":{":":{"#":"mazg83ct0wlXjJCAM2jqabD"},">":1747923001085.027}},"8nJw5H9wf3xTP":{"":{":":{"#":"mazg83ct08nJw5H9wf3xTP"},">":1747923001085.008}}},"1":{"0eVjcA9siXtKVF":{"":{":":{"#":"mazg83ct10eVjcA9siXtKVF"},"undefined":1747923001085.03}},"47rZDudyoNlcWZ":{"":{":":{"#":"mazg83ct147rZDudyoNlcWZ"},">":1747923001085.033}},"8pZCkzswssbzy":{"":{":":{"#":"mazg83ct18pZCkzswssbzy"},">":1747923001085.0361}},"cHSVmchRrWfQh":{"":{":":{"#":"mazg83ct1cHSVmchRrWfQh"},">":1747923001085.039}}},"mL9xkhZbPHSL":{"":{":":{"#":"mazg83ctmL9xkhZbPHSL"},">":1747923001085.002}}},"u0":{"2j2iAv40cAORwK":{"":{":":{"#":"mazg83cu02j2iAv40cAORwK"},"undefined":1747923001086.004}},"6n1y0ydz60vTPq":{"":{":":{"#":"mazg83cu06n1y0ydz60vTPq"},">":1747923001086.007}},"agkJDWTQyqU7iL":{"":{":":{"#":"mazg83cu0agkJDWTQyqU7iL"},">":1747923001086.01}},"e9IpIxgf7KkQ1B":{"":{":":{"#":"mazg83cu0e9IpIxgf7KkQ1B"},"undefined":1747923001086.013}},"immFJvdkOxPlD":{"":{":":{"#":"mazg83cu0immFJvdkOxPlD"},">":1747923001086.016}},"m72vt1zAeUKHq":{"":{":":{"#":"mazg83cu0m72vt1zAeUKHq"},">":1747923001086.019}}}},"iq":{"0":{":":{"#":"mazg83iq03tvWR8fSAdLvl7"},"undefined":1747923001298.0051,"8Ks7pPiq7Rh4s":{"":{":":{"#":"mazg83iq08Ks7pPiq7Rh4s"},">":1747923001298.008}},"bpVxa0rtWbo5cm":{"":{":":{"#":"mazg83iq0bpVxa0rtWbo5cm"},"undefined":1747923001298.011}},"fiGqiPhFEDU6M6":{"":{":":{"#":"mazg83iq0fiGqiPhFEDU6M6"},">":1747923001298.014}},"jmI1AMD7Azc3Ty":{"":{":":{"#":"mazg83iq0jmI1AMD7Azc3Ty"},">":1747923001298.017}}},"VMSkJKOtIZLv":{"":{":":{"#":"mazg83iqVMSkJKOtIZLv"},"undefined":1747923001298.002}}}},"kaj":{"0":{"3tKhHkRAqTBMD3":{"":{":":{"#":"mazg8kaj03tKhHkRAqTBMD3"},">":1747923023035.0051}},"8kZZKTbfG7SZQ":{"":{":":{"#":"mazg8kaj08kZZKTbfG7SZQ"},">":1747923023035.008}},"bpioE3z9FssUux":{"":{":":{"undefined":"mazg8kaj0bpioE3z9FssUux"},">":1747923023035.011}},"fiuXSAygghR2pd":{"":{":":{"#":"mazg8kaj0fiuXSAygghR2pd"},">":1747923023035.014}},"jmKWleZWhPKaoz":{"":{":":{"#":"mazg8kaj0jmKWleZWhPKaoz"},">":1747923023035.017}}},"TswsSNZyIzlL":{"":{":":{"#":"mazg8kajTswsSNZyIzlL"},">":1747923023035.002}}}},"0kkg0":{"1af2h3tUeEz6RP":{"":{":":{"#":"mazg0kkg01af2h3tUeEz6RP"},">":1747922650144.003}},"5r32Wt9DXhguy":{"":{":":{"#":"mazg0kkg05r32Wt9DXhguy"},">":1747922650144.006}},"96swx9OZeSF0Vd":{"":{":":{"#":"mazg0kkg096swx9OZeSF0Vd"},">":1747922650144.009}},"dzvHXg4Wl5sGC":{"":{":":{"#":"mazg0kkg0dzvHXg4Wl5sGC"},">":1747922650144.012}},"gsnSPJXouc41Wl":{"":{":":{"#":"mazg0kkg0gsnSPJXouc41Wl"},">":1747922650144.0151}},"lULPuJig73pa5":{"":{":":{"#":"mazg0kkg0lULPuJig73pa5"},">":1747922650144.018}}},"6whu":{"0":{"3t5xmad4GIzs0l":{"":{":":{"#":"mazg6whu03t5xmad4GIzs0l"},">":1747922945538.0051}},"bpZH056MZ37Unj":{"":{":":{"#":"mazg6whu0bpZH056MZ37Unj"},">":1747922945538.011}},"fi2y6aEZrOQlkc":{"":{":":{"#":"mazg6whu0fi2y6aEZrOQlkc"},"undefined":1747922945538.014}},"jm5VKt2g9MFSoK":{"":{":":{"#":"mazg6whu0jm5VKt2g9MFSoK"},">":1747922945538.017}},"8D6jyuab3E6nk":{"":{":":{"#":"mazg6whu08D6jyuab3E6nk"},">":1747922945538.008}}},"ZTz36UOZkxT4":{"":{":":{"#":"mazg6whuZTz36UOZkxT4"},">":1747922945538.002}}},"t":{"hn":{"20":{"1ai19moHtGSTCZ":{"":{":":{"#":"mazgthn201ai19moHtGSTCZ"},">":1747923999374.003}},"541bU4IFPr5zn":{"":{":":{"#":"mazgthn20541bU4IFPr5zn"},"undefined":1747923999374.006}},"96SrvayKP1cBuK":{"":{":":{"#":"mazgthn2096SrvayKP1cBuK"},">":1747923999375.001}}},"30":{"2jTid7ISwvSgV2":{"":{":":{"#":"mazgthn302jTid7ISwvSgV2"},">":1747923999375.004}},"6nRr8ubFap3ZeA":{"":{":":{"#":"mazgthn306nRr8ubFap3ZeA"},">":1747923999375.007}},"aggbqpq3WRLftU":{"":{":":{"#":"mazgthn30aggbqpq3WRLftU"},">":1747923999375.01}}}},"gq":{"k01a2aHRW33psjNx":{"":{":":{"#":"mazgtgqk01a2aHRW33psjNx"},">":1747923998205.001}},"l0":{"ifPLN64Sv9xXs":{"":{":":{"#":"mazgtgql0ifPLN64Sv9xXs"},">":1747923998205.016}},"2jStQOUSAF4tCI":{"":{":":{"#":"mazgtgql02jStQOUSAF4tCI"},">":1747923998205.004}},"6n8kAvngLGbJkD":{"":{":":{"#":"mazgtgql06n8kAvngLGbJkD"},">":1747923998205.007}},"agVgMSUggier7S":{"":{":":{"#":"mazgtgql0agVgMSUggier7S"},">":1747923998205.01}},"e9yczQM3BymJnE":{"":{":":{"#":"mazgtgql0e9yczQM3BymJnE"},">":1747923998205.013}}}},"m5q0":{"1acwuEmMBjRORj":{"":{":":{"#":"mazgtm5q01acwuEmMBjRORj"},">":1747924005230.003}},"50slw3C5Uxyu5":{"":{":":{"#":"mazgtm5q050slw3C5Uxyu5"},">":1747924005230.006}},"96VbfRn56PvKTO":{"":{":":{"#":"mazgtm5q096VbfRn56PvKTO"},">":1747924005230.009}},"dRVEGWg4q6fgs":{"":{":":{"#":"mazgtm5q0dRVEGWg4q6fgs"},">":1747924005230.012}},"gsRtT9ciwl0G1T":{"":{":":{"#":"mazgtm5q0gsRtT9ciwl0G1T"},">":1747924005230.0151}},"lOPE81HSGniE7":{"":{":":{"#":"mazgtm5q0lOPE81HSGniE7"},">":1747924005230.018}}}},"h":{"6ae0":{"1awnAWn0gsFO4n":{"":{":":{"#":"mazgh6ae01awnAWn0gsFO4n"},">":1747923424790.003}},"5mupGhfkK6liW":{"":{":":{"#":"mazgh6ae05mupGhfkK6liW"},">":1747923424790.006}},"96iyGozG8c74DF":{"":{":":{"#":"mazgh6ae096iyGozG8c74DF"},">":1747923424790.009}},"dlzKwhILB7lGm":{"":{":":{"#":"mazgh6ae0dlzKwhILB7lGm"},">":1747923424790.012}},"gsSHNwPV2Ds6hL":{"":{":":{"#":"mazgh6ae0gsSHNwPV2Ds6hL"},">":1747923424790.0151}},"lJV5V9xVF70qb":{"":{":":{"#":"mazgh6ae0lJV5V9xVF70qb"},">":1747923424790.018}}},"cs2":{"0":{"3tRrJZBFpZfZqi":{"":{":":{"#":"mazghcs203tRrJZBFpZfZqi"},">":1747923433202.0051}},"bphRXU4oXxBvo1":{"":{":":{"#":"mazghcs20bphRXU4oXxBvo1"},">":1747923433202.011}},"fip85FFkzSQpeI":{"":{":":{"#":"mazghcs20fip85FFkzSQpeI"},">":1747923433202.014}},"jmXXCxtDXgd1by":{"":{":":{"#":"mazghcs20jmXXCxtDXgd1by"},">":1747923433202.017}},"8IXw8OuGeLmZR":{"":{":":{"#":"mazghcs208IXw8OuGeLmZR"},">":1747923433202.008}}},"mWPwdg6ALu51":{"":{":":{"#":"mazghcs2mWPwdg6ALu51"},">":1747923433202.002}}}}}},"b":{"um4xo70":{"1aO3HcE2w9DNPg":{"":{":":{"#":"mbum4xo701aO3HcE2w9DNPg"},">":1749807382903.003}},"50aJ4XftNXwck":{"":{":":{"#":"mbum4xo7050aJ4XftNXwck"},">":1749807382903.006}},"96pUOenRQCn2p2":{"":{":":{"#":"mbum4xo7096pUOenRQCn2p2"},">":1749807382903.009}}},"0q":{"9":{"tvq0":{"1a1cN11G7NZt2w":{"":{":":{"#":"mb0q9tvq01a1cN11G7NZt2w"},">":1748000344454.003}},"5S1AwRwbua3qW":{"":{":":{"#":"mb0q9tvq05S1AwRwbua3qW"},">":1748000344454.006}},"96wxzExrqEVeyu":{"":{":":{"#":"mb0q9tvq096wxzExrqEVeyu"},">":1748000344455.001}}},"v3x0":{"1azw6gEhsK2w0C":{"":{":":{"#":"mb0q9v3x01azw6gEhsK2w0C"},">":1748000346045.003}},"542zNx6CsWpBp":{"":{":":{"#":"mb0q9v3x0542zNx6CsWpBp"},">":1748000346045.006}},"96cRgNnCBandG8":{"":{":":{"#":"mb0q9v3x096cRgNnCBandG8"},">":1748000346045.009}}}},"t":{"dw70":{"1a8nQpHHm4fa0j":{"":{":":{"#":"mb0qtdw701a8nQpHHm4fa0j"},">":1748001256855.003}},"5METqbywvzzrU":{"":{":":{"#":"mb0qtdw705METqbywvzzrU"},">":1748001256855.006}},"961eJpn7E0IAUN":{"":{":":{"#":"mb0qtdw70961eJpn7E0IAUN"},">":1748001256856.001}}},"eu4":{"0":{"3tls6buiMS6hi2":{"":{":":{"#":"mb0qteu403tls6buiMS6hi2"},">":1748001258076.0051}},"8yUhFxdyrHK8K":{"":{":":{"#":"mb0qteu408yUhFxdyrHK8K"},">":1748001258076.008}}},"V2LCMf5rm78T":{"":{":":{"#":"mb0qteu4V2LCMf5rm78T"},">":1748001258076.002}}}},"y":{"nsk0":{"1aAFGb1le7wgtj":{"":{":":{"#":"mb0qynsk01aAFGb1le7wgtj"},">":1748001502964.003}},"5d8Ve62C3MKzH":{"":{":":{"#":"mb0qynsk05d8Ve62C3MKzH"},">":1748001502964.006}},"96OjbghKaOOsr2":{"":{":":{"#":"mb0qynsk096OjbghKaOOsr2"},">":1748001502964.009}}},"pvl":{"0":{"3tbstVnnfWQ8vz":{"":{":":{"#":"mb0qypvl03tbstVnnfWQ8vz"},">":1748001505665.0051}},"81pfmw0AwZBaW":{"":{":":{"#":"mb0qypvl081pfmw0AwZBaW"},">":1748001505665.008}}},"krGDdzPh9JMG":{"":{":":{"#":"mb0qypvlkrGDdzPh9JMG"},">":1748001505665.002}}}}},"4xj":{"pc3":{"0":{"3t0XuumHUKsS9j":{"":{":":{"#":"mb4xjpc303t0XuumHUKsS9j"},">":1748254427139.0051}},"8TlFIRKuSOwvg":{"":{":":{"#":"mb4xjpc308TlFIRKuSOwvg"},">":1748254427139.008}}},"z2Kf1oaynum9":{"":{":":{"#":"mb4xjpc3z2Kf1oaynum9"},">":1748254427139.002}}},"ryt0":{"":{":":{"#":"mb4xjryt01ayQH0PoZhrbpX"},">":1748254430549.003},"54Z6BHmbhWUZj":{"":{":":{"#":"mb4xjryt054Z6BHmbhWUZj"},">":1748254430549.006}},"96OhiwZPCZJMH5":{"":{":":{"#":"mb4xjryt096OhiwZPCZJMH5"},">":1748254430549.009}},"1ayQH0PoZhrbpX":{"":{":":{"#":"mb4xjryt01ayQH0PoZhrbpX"},">":1748254430549.003}}}},"t7g":{"mhu0":{"1a9uEjFRtNPIBg":{"":{":":{"#":"mbt7gmhu01a9uEjFRtNPIBg"},">":1749722267874.003}},"596JrvWK7Obn3":{"":{":":{"#":"mbt7gmhu0596JrvWK7Obn3"},">":1749722267874.006}},"96h8jKOrFexuQN":{"":{":":{"#":"mbt7gmhu096h8jKOrFexuQN"},">":1749722267874.009}}},"u6":{"u01aBk9m0T4usEGo":{"":{":":{"#":"mbt7gu6u01aBk9m0T4usEGo"},">":1749722277847.001}},"v0":{"2jwUZuRwexsd3W":{"":{":":{"#":"mbt7gu6v02jwUZuRwexsd3W"},">":1749722277847.004}},"6nQTTs02MZQfrs":{"":{":":{"#":"mbt7gu6v06nQTTs02MZQfrs"},">":1749722277847.007}}}}}}}},"\u001b":{"paths":{"":{":":{"#":"wiki_plugin/paths"},">":1749807382903.016}},"slots":{"":{":":{"#":"wiki_plugin/slots"},">":1749807382903.017}},"tabs":{"":{":":{"#":"wiki_plugin/tabs"},">":1749807382903.018}},"id":{"":{":":"wiki_plugin",">":1749807382903}},"name":{"":{":":"Wiki",">":1749807382903}},"url":{"":{":":"http://localhost:3002/assets/plugin.js",">":1749807382903}}}},"content":{"":{"undefined":"\"<h1>Welcome to the Wiki</h1><p>This is a simple <em>wiki</em> page made for your <strong>text editor</strong>. It includes basic text styles that you would expect from any modern editor. But there’s more than just text. Take a look at the lists below:</p><ul><li><p>A standard bullet point …</p></li><li><p>… with two items, just for fun.</p></li></ul><p>Pretty cool, right? But that’s not all! Here’s a code block for you to try:</p><pre><code class=\\\"language-js\\\">function greet() {\\n      console.log(\\\"Hello, world!\\\");\\n    }</code></pre><p>Nice, isn’t it? Don’t stop there, explore more features by trying out different options. Maybe even create some more code or lists of your own.</p><blockquote><p>\\\"This wiki page looks fantastic, keep up the good work!\\\" 👏 <br>— Your Mentor</p></blockquote>\"",">":1749909918765}},"id":{"":{":":"108ab63b-3028-4e4f-9b06-423e7e497614","undefined":1749909918765}},"spheres":{"":{":":"[{\"_\":{\"#\":\"sphere/a68e112c-063c-49f8-9150-74ec964c782f/local\",\">\":{\"id\":1749807247500,\"title\":1749807247500,\"type\":1749807247500}},\"id\":\"a68e112c-063c-49f8-9150-74ec964c782f\",\"title\":\"Campingplatz\",\"type\":\"location\"}]","undefined":1749909918765}},"title":{"":{":":"Hi",">":1749909918765}}},"f":{"9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"\u001brelations":{"":{":":{"#":"f9e8b7a0-ed34-48c1-b5c5-e5780821832b/relations"},">":1749907779148}},"/relations\u001brelations/":{"28b62942-103f-4b53-bb76-0d3589a9c0d3/":{"relation/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749817982187.001}},"child/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749817986106.002}},"topic_category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749810498395.001}}},"0a56dc61-1422-419e-92ab-03002180d63a":{"":{":":{"#":"relations/0a56dc61-1422-419e-92ab-03002180d63a"},">":1749817501794.002}},"a6":{"8e112c-063c-49f8-9150-74ec964c782f/":{"relation/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749809089604.001}},"topic_category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":{"#":"relations/a68e112c-063c-49f8-9150-74ec964c782f/topic_category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b"},">":1749809205054.002}},"child/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749809205154}}},"d471f6-a848-4835-bd44-8fac301b3ca5/c":{"ategory/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749818097441.001}},"hild/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749822007073.001}}}},"f9e8b7a0-ed34-48c1-b5c5-e5780821832b/":{"relation/":{"a6d471f6-a848-4835-bd44-8fac301b3ca5":{"":{":":{"#":"relations/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/relation/a6d471f6-a848-4835-bd44-8fac301b3ca5"},">":1749823208634}},"28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749818110771}}},"c":{"hild/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":{"#":"relations/f9e8b7a0-ed34-48c1-b5c5-e5780821832b/child/28b62942-103f-4b53-bb76-0d3589a9c0d3"},">":1749823292398.001}},"ategory/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1749823292497}}}},"d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/":{"relation/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":null,">":1749907779148}},"category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b":{"":{":":{"#":"relations/d6e9ec6b-5cdc-4d36-9ffb-edeef6250ecc/category/f9e8b7a0-ed34-48c1-b5c5-e5780821832b"},">":1749907779048.002}}}}},"d46adef-41e3-4423-b36e-fd9534eba9de":{"\u001brelations":{"":{":":{"#":"fd46adef-41e3-4423-b36e-fd9534eba9de/relations"},">":1750342424265}},"/relations\u001brelations/fd46adef-41e3-4423-b36e-fd9534eba9de/":{"going/99c82ec1-9c8f-48e1-808c-19037e69a2b9":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/going/99c82ec1-9c8f-48e1-808c-19037e69a2b9"},">":1750338270582.001}},"teach/435ab3b6-414d-463a-8c0b-68c63714c570":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/teach/435ab3b6-414d-463a-8c0b-68c63714c570"},">":1750338312649.001}},"relation/":{"435ab3b6-414d-463a-8c0b-68c63714c570":{"":{":":null,">":1750338310333}},"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":null,">":1750342417149}},"cda54940-6eff-47ae-94c8-7413681b424c":{"":{":":null,">":1750342424265}}},"like/":{"435ab3b6-414d-463a-8c0b-68c63714c570":{"":{"undefined":null,">":1750338312749}},"2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/like/2b5d39b2-ecf7-4011-86cc-64a4e2eaa9e3"},">":1750342417050}}},"visit/":{"99c82ec1-9c8f-48e1-808c-19037e69a2b9":{"":{":":null,">":1750338270682}},"cda54940-6eff-47ae-94c8-7413681b424c":{"":{":":{"#":"relations/fd46adef-41e3-4423-b36e-fd9534eba9de/visit/cda54940-6eff-47ae-94c8-7413681b424c"},">":1750342424166.001}}}}}},"e330c765-0e91-4f79-b5e3-34945ccc9684":{"\u001brelations":{"":{":":{"#":"e330c765-0e91-4f79-b5e3-34945ccc9684/relations"},">":1751287384275}},"/relations\u001brelations/e330c765-0e91-4f79-b5e3-34945ccc9684/":{"learn/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1751287333808}},"teach/28b62942-103f-4b53-bb76-0d3589a9c0d3":{"":{":":null,">":1751287384275}}}}}
\ No newline at end of file
diff --git a/server/ra-data/%1C b/server/ra-data/%1C
new file mode 100644
index 00000000..4337f21d
--- /dev/null
+++ b/server/ra-data/%1C
@@ -0,0 +1 @@
+{"!":{"":1}}
\ No newline at end of file
diff --git a/server/src/actions/activity.js b/server/src/actions/activity.js
new file mode 100644
index 00000000..83efd577
--- /dev/null
+++ b/server/src/actions/activity.js
@@ -0,0 +1,52 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findActivities = findActivities;
+exports.createActivity = createActivity;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findActivities(query) {
+    try {
+        const activities = await prisma_1.default.activity.findMany({
+            where: {
+                ...(query.profileId && { profileId: query.profileId }),
+                ...(query.interestId && { interestId: query.interestId }),
+                ...(query.locationId && { locationId: query.locationId }),
+            },
+            include: {
+                profile: true,
+                location: true,
+                interest: true,
+            },
+            take: 20,
+            orderBy: { date: 'desc' },
+        });
+        return { success: activities };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createActivity(props) {
+    try {
+        const activity = await prisma_1.default.activity.create({
+            data: {
+                profileId: props.profileId,
+                text: props.text,
+                href: props.href,
+                status: props.status || 'IMPORTANT',
+                type: props.type || 'NORMAL',
+                date: new Date(),
+                locationId: props.locationId,
+                interestId: props.interestId,
+            },
+        });
+        return { success: activity };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
diff --git a/server/src/actions/activity.ts b/server/src/actions/activity.ts
new file mode 100644
index 00000000..90f6b830
--- /dev/null
+++ b/server/src/actions/activity.ts
@@ -0,0 +1,59 @@
+import prisma from '../lib/prisma';
+
+export async function findActivities(query: {
+  profileId?: string,
+  interestId?: string,
+  locationId?: string,
+}) {
+  try {
+    const activities = await prisma.activity.findMany({
+      where: {
+        ...(query.profileId && { profileId: query.profileId }),
+        ...(query.interestId && { interestId: query.interestId }),
+        ...(query.locationId && { locationId: query.locationId }),
+      },
+      include: {
+        profile: true,
+        location: true,
+        interest: true,
+      },
+      take: 20,
+      orderBy: { date: 'desc' },
+    });
+
+    return { success: activities };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createActivity(props: {
+  profileId: string,
+  text: string,
+  href?: string,
+  status?: any,
+  type?: any,
+  locationId?: string,
+  interestId?: string
+}) {
+  try {
+    const activity = await prisma.activity.create({
+      data: {
+        profileId: props.profileId,
+        text: props.text,
+        href: props.href,
+        status: props.status || 'IMPORTANT',
+        type: props.type || 'NORMAL',
+        date: new Date(),
+        locationId: props.locationId,
+        interestId: props.interestId,
+      },
+    });
+
+    return { success: activity };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
diff --git a/server/src/actions/discussion.js b/server/src/actions/discussion.js
new file mode 100644
index 00000000..431c9b38
--- /dev/null
+++ b/server/src/actions/discussion.js
@@ -0,0 +1,133 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findDiscussions = findDiscussions;
+exports.createDiscussion = createDiscussion;
+exports.voteYes = voteYes;
+exports.voteNo = voteNo;
+exports.resolveDiscussion = resolveDiscussion;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findDiscussions(params) {
+    try {
+        const discussions = await prisma_1.default.discussion.findMany({
+            where: {
+                OR: [
+                    { interestId: params.id },
+                    { locationId: params.id },
+                ]
+            },
+            take: 20,
+        });
+        return { success: discussions };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createDiscussion(data) {
+    try {
+        const discussion = await prisma_1.default.discussion.create({
+            data: data
+        });
+        return { success: discussion };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function voteYes({ profileId, discussionId, }) {
+    try {
+        const discussion = await prisma_1.default.discussion.findUnique({
+            where: { id: discussionId },
+        });
+        if (discussion) {
+            const votes = discussion.votes;
+            await prisma_1.default.discussion.update({
+                where: { id: discussionId },
+                data: {
+                    voters: { push: profileId },
+                    votes: {
+                        ...votes,
+                        yes: (votes.yes || 0) + 1,
+                    }
+                }
+            });
+            if (discussion.voters?.length + 1 >= discussion.limit) {
+                await resolveDiscussion(discussion, (votes.yes >= votes.no));
+            }
+        }
+        return { success: discussion };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function voteNo({ profileId, discussionId, }) {
+    try {
+        const discussion = await prisma_1.default.discussion.findUnique({
+            where: { id: discussionId },
+        });
+        if (discussion) {
+            const votes = discussion.votes;
+            await prisma_1.default.discussion.update({
+                where: { id: discussionId },
+                data: {
+                    voters: { push: profileId },
+                    votes: {
+                        ...votes,
+                        no: (votes.no || 0) + 1,
+                    }
+                }
+            });
+            if (discussion.voters?.length + 1 >= discussion.limit) {
+                await resolveDiscussion(discussion, (votes.yes >= votes.no));
+            }
+        }
+        return { success: discussion };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function resolveDiscussion(discussion, result) {
+    if (discussion.type == 'askAccess'
+        && discussion.interestId
+        && result == true) {
+        const profile = discussion.attachment;
+        const interest = await prisma_1.default.interest.findUnique({
+            where: { id: discussion.interestId },
+        });
+        await prisma_1.default.interest.update({
+            where: { id: discussion.interestId },
+            data: {
+                profiles: { connect: profile },
+                ask: interest?.ask.filter((x) => x != profile.id)
+            }
+        });
+    }
+    if (discussion.type == 'askAccess'
+        && discussion.locationId
+        && result == true) {
+        const profile = discussion.attachment;
+        const location = await prisma_1.default.location.findUnique({
+            where: { id: discussion.locationId },
+        });
+        await prisma_1.default.location.update({
+            where: { id: discussion.locationId },
+            data: {
+                profiles: { connect: profile },
+                ask: location?.ask.filter((x) => x != profile.id)
+            }
+        });
+    }
+    await prisma_1.default.discussion.delete({
+        where: { id: discussion.id },
+    });
+    console.log('Discussion resolved');
+}
diff --git a/server/src/actions/discussion.ts b/server/src/actions/discussion.ts
new file mode 100644
index 00000000..79d65063
--- /dev/null
+++ b/server/src/actions/discussion.ts
@@ -0,0 +1,157 @@
+import prisma from '../lib/prisma';
+
+export async function findDiscussions(params: {
+  id?: string,
+}) {
+  try {
+    const discussions = await prisma.discussion.findMany({
+      where: {
+        OR: [
+          { interestId: params.id },
+          { locationId: params.id },
+        ]
+      },
+      take: 20,
+    });
+
+    return { success: discussions };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createDiscussion(data: {
+  type: string,
+  text: string,
+  limit: number,
+  votes: any,
+  attachment: any,
+  interestId?: string,
+  locationId?: string,
+}) {
+  try {
+    const discussion = await prisma.discussion.create({
+      data: data
+    });
+
+    return { success: discussion };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function voteYes({
+  profileId,
+  discussionId,
+}: {
+  profileId: string,
+  discussionId: string,
+}) {
+  try {
+    const discussion = await prisma.discussion.findUnique({
+      where: { id: discussionId },
+    });
+    if (discussion) {
+      const votes = discussion.votes as { yes: number; no: number };
+      await prisma.discussion.update({
+        where: { id: discussionId },
+        data: {
+          voters: { push: profileId },
+          votes: {
+            ...votes,
+            yes: (votes.yes || 0) + 1,
+          }
+        }
+      });
+      if (discussion.voters?.length + 1 >= discussion.limit) {
+        await resolveDiscussion(discussion, (votes.yes >= votes.no));
+      }
+    }
+
+    return { success: discussion };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function voteNo({
+  profileId,
+  discussionId,
+}: {
+  profileId: string,
+  discussionId: string,
+}) {
+  try {
+    const discussion = await prisma.discussion.findUnique({
+      where: { id: discussionId },
+    });
+    if (discussion) {
+      const votes = discussion.votes as { yes: number; no: number };
+      await prisma.discussion.update({
+        where: { id: discussionId },
+        data: {
+          voters: { push: profileId },
+          votes: {
+            ...votes,
+            no: (votes.no || 0) + 1,
+          }
+        }
+      });
+      if (discussion.voters?.length + 1 >= discussion.limit) {
+        await resolveDiscussion(discussion, (votes.yes >= votes.no));
+      }
+    }
+
+    return { success: discussion };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function resolveDiscussion(
+  discussion: any,
+  result: Boolean
+) {
+  if (
+    discussion.type == 'askAccess'
+    && discussion.interestId
+    && result == true
+  ) {
+    const profile = discussion.attachment;
+    const interest = await prisma.interest.findUnique({
+      where: { id: discussion.interestId },
+    });
+    await prisma.interest.update({
+      where: { id: discussion.interestId },
+      data: {
+        profiles: { connect: profile },
+        ask: interest?.ask.filter((x: string) => x != profile.id)
+      }
+    });
+  }
+  if (
+    discussion.type == 'askAccess'
+    && discussion.locationId
+    && result == true
+  ) {
+    const profile = discussion.attachment;
+    const location = await prisma.location.findUnique({
+      where: { id: discussion.locationId },
+    });
+    await prisma.location.update({
+      where: { id: discussion.locationId },
+      data: {
+        profiles: { connect: profile },
+        ask: location?.ask.filter((x: string) => x != profile.id)
+      }
+    });
+  }
+  await prisma.discussion.delete({
+    where: { id: discussion.id },
+  });
+  console.log('Discussion resolved');
+}
\ No newline at end of file
diff --git a/server/src/actions/interest-relations.js b/server/src/actions/interest-relations.js
new file mode 100644
index 00000000..a55a3bd7
--- /dev/null
+++ b/server/src/actions/interest-relations.js
@@ -0,0 +1,112 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findInterestRelations = findInterestRelations;
+exports.findLocationRelations = findLocationRelations;
+exports.createInterestRelation = createInterestRelation;
+exports.createLocationRelation = createLocationRelation;
+exports.removeInterestRelation = removeInterestRelation;
+exports.removeLocationRelation = removeLocationRelation;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findInterestRelations(id) {
+    try {
+        const relations = await prisma_1.default.interestInterest.findMany({
+            where: { interestId: id },
+            select: {
+                id: true,
+                key: true,
+                OtherInterest: true,
+            },
+            take: 50,
+        });
+        return { success: relations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function findLocationRelations(id) {
+    try {
+        const relations = await prisma_1.default.interestLocation.findMany({
+            where: { interestId: id },
+            select: {
+                id: true,
+                key: true,
+                Location: true,
+            },
+            take: 50,
+        });
+        return { success: relations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createInterestRelation(id, body) {
+    try {
+        const relation = await prisma_1.default.interestInterest.create({
+            data: {
+                key: body.key,
+                interestId: id,
+                otherInterestId: body.otherInterestId,
+            },
+            select: {
+                key: true,
+                OtherInterest: true,
+            },
+        });
+        return { success: relation };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createLocationRelation(id, body) {
+    try {
+        const relation = await prisma_1.default.interestLocation.create({
+            data: {
+                key: body.key,
+                interestId: id,
+                locationId: body.locationId,
+            },
+            select: {
+                key: true,
+                Location: true,
+            },
+        });
+        return { success: relation };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function removeInterestRelation(id) {
+    try {
+        await prisma_1.default.interestInterest.delete({
+            where: { id: id }
+        });
+        return { success: true };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function removeLocationRelation(id) {
+    try {
+        await prisma_1.default.interestLocation.delete({
+            where: { id: id }
+        });
+        return { success: true };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
diff --git a/server/src/actions/interest-relations.ts b/server/src/actions/interest-relations.ts
new file mode 100644
index 00000000..e7ff43fa
--- /dev/null
+++ b/server/src/actions/interest-relations.ts
@@ -0,0 +1,124 @@
+import prisma from '../lib/prisma';
+
+export async function findInterestRelations(
+  id: string,
+) {
+  try {
+    const relations = await prisma.interestInterest.findMany({
+      where: { interestId: id },
+      select: {
+        id: true,
+        key: true,
+        OtherInterest: true,
+      },
+      take: 50,
+    });
+
+    return { success: relations };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function findLocationRelations(
+  id: string,
+) {
+  try {
+    const relations = await prisma.interestLocation.findMany({
+      where: { interestId: id },
+      select: {
+        id: true,
+        key: true,
+        Location: true,
+      },
+      take: 50,
+    });
+
+    return { success: relations };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+
+export async function createInterestRelation(
+  id: string,
+  body: {
+    key: string,
+    otherInterestId: string,
+  }
+) {
+  try {
+    const relation = await prisma.interestInterest.create({
+      data: {
+        key: body.key,
+        interestId: id,
+        otherInterestId: body.otherInterestId,
+      },
+      select: {
+        key: true,
+        OtherInterest: true,
+      },
+    });
+
+    return { success: relation };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createLocationRelation(
+  id: string,
+  body: {
+    key: string,
+    locationId: string,
+  }
+) {
+  try {
+    const relation = await prisma.interestLocation.create({
+      data: {
+        key: body.key,
+        interestId: id,
+        locationId: body.locationId,
+      },
+      select: {
+        key: true,
+        Location: true,
+      },
+    });
+
+    return { success: relation };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function removeInterestRelation(id: string) {
+  try {
+    await prisma.interestInterest.delete({
+      where: { id: id }
+    });
+
+    return { success: true };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function removeLocationRelation(id: string) {
+  try {
+    await prisma.interestLocation.delete({
+      where: { id: id }
+    });
+
+    return { success: true };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
\ No newline at end of file
diff --git a/server/src/actions/interest.js b/server/src/actions/interest.js
new file mode 100644
index 00000000..ea0b7d39
--- /dev/null
+++ b/server/src/actions/interest.js
@@ -0,0 +1,208 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findInterests = findInterests;
+exports.createInterest = createInterest;
+exports.updateInterest = updateInterest;
+exports.getInterestById = getInterestById;
+exports.addInterest = addInterest;
+exports.removeInterest = removeInterest;
+exports.askAccess = askAccess;
+exports.inviteFriends = inviteFriends;
+exports.addLink = addLink;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findInterests(query) {
+    try {
+        const interests = await prisma_1.default.interest.findMany({
+            where: {
+                title: {
+                    contains: query.title,
+                    mode: 'insensitive'
+                }
+            },
+            take: 20,
+        });
+        return { success: interests };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createInterest(formData) {
+    try {
+        const relations = JSON.parse(formData.relations);
+        const interest = await prisma_1.default.interest.create({
+            data: {
+                title: formData.title,
+                access: JSON.parse(formData.access),
+                relations: {
+                    create: relations,
+                }
+            },
+        });
+        return { success: interest };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function updateInterest(formData) {
+    try {
+        const relations = JSON.parse(formData.relations);
+        const check = await prisma_1.default.interest.findUnique({
+            where: {
+                id: formData.interestId,
+            },
+            include: {
+                relations: true,
+            }
+        });
+        const existingRelationIds = check?.relations.map((rel) => rel.id);
+        const newRelationIds = relations.map((rel) => rel.id);
+        const relationsToDelete = existingRelationIds?.filter((id) => !newRelationIds.includes(id));
+        await prisma_1.default.relation.deleteMany({
+            where: {
+                id: { in: relationsToDelete },
+            },
+        });
+        const interest = await prisma_1.default.interest.update({
+            where: {
+                id: formData.interestId,
+            },
+            data: {
+                title: formData.title,
+                access: JSON.parse(formData.access),
+                relations: {
+                    create: relations.filter((x) => !x.id),
+                }
+            },
+        });
+        return { success: interest };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function getInterestById(params) {
+    try {
+        const interest = await prisma_1.default.interest.findUnique({
+            where: {
+                id: params?.id,
+            },
+            include: {
+                profiles: true,
+                relations: true,
+                discussions: true,
+            }
+        });
+        return { success: interest };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function addInterest({ profileId, interestId, }) {
+    try {
+        const profile = await prisma_1.default.profile.update({
+            where: {
+                id: profileId,
+            },
+            data: {
+                interests: { connect: { id: interestId } },
+            },
+        });
+        return { success: profile };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function removeInterest({ profileId, interestId, }) {
+    try {
+        const profile = await prisma_1.default.profile.update({
+            where: {
+                id: profileId,
+            },
+            data: {
+                interests: { disconnect: { id: interestId } },
+            },
+        });
+        return { success: profile };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function askAccess({ profileId, interestId, }) {
+    try {
+        const interest = await prisma_1.default.interest.update({
+            where: {
+                id: interestId,
+            },
+            data: {
+                ask: { push: profileId },
+            },
+            include: {
+                profiles: true,
+            }
+        });
+        return {
+            title: interest.title,
+            limit: interest.profiles.length,
+        };
+    }
+    catch (e) {
+        console.error(e);
+    }
+}
+async function inviteFriends({ invites, interestId, }) {
+    try {
+        const interest = await prisma_1.default.interest.findUnique({
+            where: { id: interestId },
+            select: { invites: true },
+        });
+        const newInvites = invites.filter(x => !interest?.invites.includes(x));
+        await prisma_1.default.interest.update({
+            where: { id: interestId },
+            data: {
+                invites: { push: newInvites }
+            },
+            include: {
+                profiles: true,
+            }
+        });
+        return {
+            invites: newInvites,
+        };
+    }
+    catch (e) {
+        console.error(e);
+    }
+}
+async function addLink(formData) {
+    try {
+        if (formData.link.length < 3)
+            throw new Error('Your link is too short');
+        const interest = await prisma_1.default.interest.update({
+            where: {
+                id: formData?.id,
+            },
+            data: {
+                links: { push: formData.link }
+            }
+        });
+        return { success: interest };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
diff --git a/server/src/actions/interest.ts b/server/src/actions/interest.ts
new file mode 100644
index 00000000..005bb56f
--- /dev/null
+++ b/server/src/actions/interest.ts
@@ -0,0 +1,242 @@
+import prisma from '../lib/prisma';
+
+export async function findInterests(query: {
+  title?: string
+}) {
+  try {
+    const interests = await prisma.interest.findMany({
+      where: {
+        title: {
+          contains: query.title,
+          mode: 'insensitive'
+        }
+      },
+      take: 20,
+    });
+
+    return { success: interests };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createInterest(formData: {
+  title: string,
+  access: string,
+  relations: string,
+}) {
+  try {
+    const relations = JSON.parse(formData.relations);
+    const interest = await prisma.interest.create({
+      data: {
+        title: formData.title,
+        access: JSON.parse(formData.access),
+        relations: {
+          create: relations,
+        }
+      },
+    });
+
+    return { success: interest };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function updateInterest(formData: {
+  interestId: string,
+  title: string,
+  access: string,
+  relations: string,
+}) {
+  try {
+    const relations = JSON.parse(formData.relations);
+    const check = await prisma.interest.findUnique({
+      where: {
+        id: formData.interestId,
+      },
+      include: {
+        relations: true,
+      }
+    });
+    const existingRelationIds = check?.relations.map((rel: any) => rel.id);
+    const newRelationIds = relations.map((rel: any) => rel.id);
+    const relationsToDelete = existingRelationIds?.filter((id) => !newRelationIds.includes(id));
+    await prisma.relation.deleteMany({
+      where: {
+        id: { in: relationsToDelete },
+      },
+    });
+    const interest = await prisma.interest.update({
+      where: {
+        id: formData.interestId,
+      },
+      data: {
+        title: formData.title,
+        access: JSON.parse(formData.access),
+        relations: {
+          create: relations.filter((x: any) => !x.id),
+        }
+      },
+    });
+
+    return { success: interest };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function getInterestById(params: {
+  id?: string
+}) {
+  try {
+    const interest = await prisma.interest.findUnique({
+      where: {
+        id: params?.id,
+      },
+      include: {
+        profiles: true,
+        relations: true,
+        discussions: true,
+      }
+    });
+
+    return { success: interest };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function addInterest({
+  profileId,
+  interestId,
+}: {
+  profileId: string,
+  interestId: string,
+}) {
+  try {
+    const profile = await prisma.profile.update({
+      where: {
+        id: profileId,
+      },
+      data: {
+        interests: { connect: { id: interestId } },
+      },
+    });
+
+    return { success: profile };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function removeInterest({
+  profileId,
+  interestId,
+}: {
+  profileId: string,
+  interestId: string,
+}) {
+  try {
+    const profile = await prisma.profile.update({
+      where: {
+        id: profileId,
+      },
+      data: {
+        interests: { disconnect: { id: interestId } },
+      },
+    });
+
+    return { success: profile };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function askAccess({
+  profileId,
+  interestId,
+}: {
+  profileId: string,
+  interestId: string,
+}) {
+  try {
+    const interest = await prisma.interest.update({
+      where: {
+        id: interestId,
+      },
+      data: {
+        ask: { push: profileId },
+      },
+      include: {
+        profiles: true,
+      }
+    });
+
+    return {
+      title: interest.title,
+      limit: interest.profiles.length,
+    };
+  } catch(e: any) {
+    console.error(e);
+  }
+}
+
+export async function inviteFriends({
+  invites,
+  interestId,
+}: {
+  invites: string[],
+  interestId: string,
+}) {
+  try {
+    const interest = await prisma.interest.findUnique({
+      where: { id: interestId },
+      select: { invites: true },
+    });
+    const newInvites = invites.filter(x => !interest?.invites.includes(x));
+    await prisma.interest.update({
+      where: { id: interestId },
+      data: {
+        invites: { push: newInvites }
+      },
+      include: {
+        profiles: true,
+      }
+    });
+
+    return {
+      invites: newInvites,
+    };
+  } catch(e: any) {
+    console.error(e);
+  }
+}
+
+export async function addLink(formData: {
+  id: string,
+  link: string,
+}) {
+  try {
+    if (formData.link.length < 3) throw new Error('Your link is too short');
+    const interest = await prisma.interest.update({
+      where: {
+        id: formData?.id,
+      },
+      data: {
+        links: { push: formData.link }
+      }
+    });
+
+    return { success: interest };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
\ No newline at end of file
diff --git a/server/src/actions/location-relations.js b/server/src/actions/location-relations.js
new file mode 100644
index 00000000..c553775e
--- /dev/null
+++ b/server/src/actions/location-relations.js
@@ -0,0 +1,134 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findInterestRelations = findInterestRelations;
+exports.findLocationRelations = findLocationRelations;
+exports.createProfileRelation = createProfileRelation;
+exports.createInterestRelation = createInterestRelation;
+exports.createLocationRelation = createLocationRelation;
+exports.removeInterestRelation = removeInterestRelation;
+exports.removeLocationRelation = removeLocationRelation;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findInterestRelations(id) {
+    try {
+        const relations = await prisma_1.default.interestLocation.findMany({
+            where: { locationId: id },
+            select: {
+                id: true,
+                key: true,
+                Interest: true,
+            },
+            take: 50,
+        });
+        return { success: relations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function findLocationRelations(id) {
+    try {
+        const relations = await prisma_1.default.locationLocation.findMany({
+            where: { locationId: id },
+            select: {
+                id: true,
+                key: true,
+                OtherLocation: true,
+            },
+            take: 50,
+        });
+        return { success: relations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createProfileRelation(id, body) {
+    try {
+        const relation = await prisma_1.default.profileLocation.create({
+            data: {
+                key: body.key,
+                locationId: id,
+                profileId: body.profileId,
+            },
+            select: {
+                key: true,
+                Profile: true,
+                Location: true,
+            },
+        });
+        return { success: relation };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createInterestRelation(id, body) {
+    try {
+        const relation = await prisma_1.default.interestLocation.create({
+            data: {
+                key: body.key,
+                locationId: id,
+                interestId: body.interestId,
+            },
+            select: {
+                key: true,
+                Interest: true,
+            },
+        });
+        return { success: relation };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createLocationRelation(id, body) {
+    try {
+        const relation = await prisma_1.default.locationLocation.create({
+            data: {
+                key: body.key,
+                locationId: id,
+                otherLocationId: body.otherLocationId,
+            },
+            select: {
+                key: true,
+                OtherLocation: true,
+            },
+        });
+        return { success: relation };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function removeInterestRelation(id) {
+    try {
+        await prisma_1.default.interestLocation.delete({
+            where: { id: id }
+        });
+        return { success: true };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function removeLocationRelation(id) {
+    try {
+        await prisma_1.default.locationLocation.delete({
+            where: { id: id }
+        });
+        return { success: true };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
diff --git a/server/src/actions/location-relations.ts b/server/src/actions/location-relations.ts
new file mode 100644
index 00000000..24327084
--- /dev/null
+++ b/server/src/actions/location-relations.ts
@@ -0,0 +1,151 @@
+import prisma from '../lib/prisma';
+
+export async function findInterestRelations(
+  id: string,
+) {
+  try {
+    const relations = await prisma.interestLocation.findMany({
+      where: { locationId: id },
+      select: {
+        id: true,
+        key: true,
+        Interest: true,
+      },
+      take: 50,
+    });
+
+    return { success: relations };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function findLocationRelations(
+  id: string,
+) {
+  try {
+    const relations = await prisma.locationLocation.findMany({
+      where: { locationId: id },
+      select: {
+        id: true,
+        key: true,
+        OtherLocation: true,
+      },
+      take: 50,
+    });
+
+    return { success: relations };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createProfileRelation(
+  id: string,
+  body: {
+    key: string,
+    profileId: string,
+  }
+) {
+  try {
+    const relation = await prisma.profileLocation.create({
+      data: {
+        key: body.key,
+        locationId: id,
+        profileId: body.profileId,
+      },
+      select: {
+        key: true,
+        Profile: true,
+        Location: true,
+      },
+    });
+
+    return { success: relation };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createInterestRelation(
+  id: string,
+  body: {
+    key: string,
+    interestId: string,
+  }
+) {
+  try {
+    const relation = await prisma.interestLocation.create({
+      data: {
+        key: body.key,
+        locationId: id,
+        interestId: body.interestId,
+      },
+      select: {
+        key: true,
+        Interest: true,
+      },
+    });
+
+    return { success: relation };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createLocationRelation(
+  id: string,
+  body: {
+    key: string,
+    otherLocationId: string,
+  }
+) {
+  try {
+    const relation = await prisma.locationLocation.create({
+      data: {
+        key: body.key,
+        locationId: id,
+        otherLocationId: body.otherLocationId,
+      },
+      select: {
+        key: true,
+        OtherLocation: true,
+      },
+    });
+
+    return { success: relation };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function removeInterestRelation(id: string) {
+  try {
+    await prisma.interestLocation.delete({
+      where: { id: id }
+    });
+
+    return { success: true };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function removeLocationRelation(id: string) {
+  try {
+    await prisma.locationLocation.delete({
+      where: { id: id }
+    });
+
+    return { success: true };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
\ No newline at end of file
diff --git a/server/src/actions/location.js b/server/src/actions/location.js
new file mode 100644
index 00000000..7b3bbc8d
--- /dev/null
+++ b/server/src/actions/location.js
@@ -0,0 +1,312 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findLocations = findLocations;
+exports.createLocation = createLocation;
+exports.updateLocation = updateLocation;
+exports.getLocationById = getLocationById;
+exports.getLocationByCoords = getLocationByCoords;
+exports.getLocationByBounds = getLocationByBounds;
+exports.updateCurrentLocation = updateCurrentLocation;
+exports.addLocation = addLocation;
+exports.removeLocation = removeLocation;
+exports.askAccess = askAccess;
+exports.addLink = addLink;
+exports.getProfileLocations = getProfileLocations;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findLocations(query) {
+    try {
+        const locations = await prisma_1.default.location.findMany({
+            where: {
+                title: {
+                    contains: query.title,
+                    mode: 'insensitive'
+                }
+            },
+            take: 20,
+        });
+        return { success: locations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function createLocation(formData) {
+    try {
+        const location = await prisma_1.default.location.create({
+            data: {
+                title: formData.title,
+                yCoordinate: formData.yCoordinate,
+                xCoordinate: formData.xCoordinate,
+                latitude: parseFloat(formData.xCoordinate),
+                longitude: parseFloat(formData.yCoordinate),
+                zoom: JSON.parse(formData.zoom),
+                access: JSON.parse(formData.access),
+            },
+        });
+        if (formData.relations) {
+            //create relation
+        }
+        return { success: location };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function updateLocation(formData) {
+    try {
+        const relations = JSON.parse(formData.relations);
+        const check = await prisma_1.default.location.findUnique({
+            where: {
+                id: formData.locationId,
+            },
+            include: {
+                relations: true,
+            }
+        });
+        const existingRelationIds = check?.relations.map((rel) => rel.id);
+        const newRelationIds = relations.map((rel) => rel.id);
+        const relationsToDelete = existingRelationIds?.filter((id) => !newRelationIds.includes(id));
+        await prisma_1.default.relation.deleteMany({
+            where: {
+                id: { in: relationsToDelete },
+            },
+        });
+        const location = await prisma_1.default.location.update({
+            where: {
+                id: formData.locationId,
+            },
+            data: {
+                title: formData.title,
+                yCoordinate: formData.yCoordinate,
+                xCoordinate: formData.xCoordinate,
+                zoom: JSON.parse(formData.zoom),
+                access: JSON.parse(formData.access),
+                relations: {
+                    create: relations.filter((x) => !x.id),
+                }
+            },
+        });
+        return { success: location };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function getLocationById(params) {
+    try {
+        const location = await prisma_1.default.location.findUnique({
+            where: {
+                id: params?.id,
+            },
+            include: {
+                profiles: true,
+                relations: true,
+                discussions: true,
+            }
+        });
+        return { success: location };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function getLocationByCoords(query) {
+    const { lat, lng } = query;
+    const latitude = parseFloat(lat);
+    const longitude = parseFloat(lng);
+    const radiusInKm = 50;
+    const radiusInDegrees = radiusInKm / 111.32;
+    if (isNaN(latitude) || isNaN(longitude)) {
+        return { error: 'Invalid latitude or longitude' };
+    }
+    try {
+        const locations = await prisma_1.default.location.findMany({
+            where: {
+                latitude: {
+                    gte: latitude - radiusInDegrees,
+                    lte: latitude + radiusInDegrees,
+                },
+                longitude: {
+                    gte: longitude - radiusInDegrees,
+                    lte: longitude + radiusInDegrees,
+                },
+            },
+        });
+        return { success: locations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function getLocationByBounds(query) {
+    try {
+        const northeast = JSON.parse(query.northeast);
+        const southwest = JSON.parse(query.southwest);
+        const locations = await prisma_1.default.location.findMany({
+            where: {
+                latitude: {
+                    gte: southwest.lat,
+                    lte: northeast.lat,
+                },
+                longitude: {
+                    gte: southwest.lng,
+                    lte: northeast.lng,
+                },
+            },
+            take: 20,
+        });
+        return { success: locations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function updateCurrentLocation({ profileId, lat, lng }) {
+    try {
+        const locations = await prisma_1.default.$queryRaw `
+      SELECT 
+        id, 
+        title, 
+        latitude, 
+        longitude,
+        ( 6371 * acos(
+          cos(radians(${lat})) * cos(radians(latitude)) * cos(radians(longitude) - radians(${lng})) 
+          + sin(radians(${lat})) * sin(radians(latitude))
+        )) AS distance
+      FROM "Location"
+      ORDER BY distance ASC
+      LIMIT 1;
+    `;
+        const location = locations[0];
+        if (location) {
+            await prisma_1.default.profileLocation.updateMany({
+                where: {
+                    key: 'current',
+                    profileId: profileId,
+                },
+                data: { key: 'past' }
+            });
+            const current = await prisma_1.default.profileLocation.create({
+                data: {
+                    key: 'current',
+                    profileId: profileId,
+                    locationId: location.id,
+                }
+            });
+        }
+        return { success: locations[0] };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function addLocation({ profileId, locationId, }) {
+    try {
+        const profile = await prisma_1.default.profile.update({
+            where: {
+                id: profileId,
+            },
+            data: {
+                locations: { connect: { id: locationId } },
+            }
+        });
+        return { success: profile };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function removeLocation({ profileId, locationId, }) {
+    try {
+        const profile = await prisma_1.default.profile.update({
+            where: {
+                id: profileId,
+            },
+            data: {
+                locations: { disconnect: { id: locationId } },
+            }
+        });
+        return { success: profile };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function askAccess({ profileId, locationId, }) {
+    const location = await prisma_1.default.location.update({
+        where: {
+            id: locationId,
+        },
+        data: {
+            ask: { push: profileId },
+        },
+        include: {
+            profiles: true,
+        }
+    });
+    return {
+        title: location.title,
+        limit: location.profiles.length,
+    };
+}
+async function addLink(formData) {
+    try {
+        if (formData.link.length < 3)
+            throw new Error('Your link is too short');
+        const location = await prisma_1.default.location.update({
+            where: {
+                id: formData?.id,
+            },
+            data: {
+                links: { push: formData.link }
+            }
+        });
+        return { success: location };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function getProfileLocations(params) {
+    try {
+        const locationProfiles = await prisma_1.default.profileLocation.findMany({
+            where: {
+                locationId: params?.id,
+            },
+            include: {
+                Profile: true,
+            },
+            take: 20,
+            orderBy: { createdAt: 'desc' },
+        });
+        console.log({ locationProfiles: locationProfiles.map((x) => x.Profile) });
+        // TODO Merge better
+        const userIds = locationProfiles.map((profileLocation) => {
+            return profileLocation.Profile.userId;
+        });
+        const uniqueUserIds = Array.from(new Set(userIds));
+        const mergedProfiles = uniqueUserIds.map((userId) => {
+            return locationProfiles.find((profileLocation) => profileLocation.Profile.userId === userId);
+        });
+        const filteredProfiles = mergedProfiles.filter((profile) => profile !== undefined);
+        console.log({ mergedProfiles });
+        return { success: mergedProfiles };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
diff --git a/server/src/actions/location.ts b/server/src/actions/location.ts
new file mode 100644
index 00000000..82468ee4
--- /dev/null
+++ b/server/src/actions/location.ts
@@ -0,0 +1,375 @@
+import { ProfileLocation } from '@tribelike/types/Relation';
+import { Location } from '@tribelike/types/Location';
+import prisma from '../lib/prisma';
+
+export async function findLocations(query: {
+  title?: string
+}) {
+  try {
+    const locations = await prisma.location.findMany({
+      where: {
+        title: {
+          contains: query.title,
+          mode: 'insensitive'
+        }
+      },
+      take: 20,
+    });
+
+    return { success: locations };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function createLocation(formData: {
+  title: string,
+  xCoordinate: string,
+  yCoordinate: string,
+  zoom: string,
+  access: string,
+  relations: string,
+}) {
+  try {
+    const location = await prisma.location.create({
+      data: {
+        title: formData.title,
+        yCoordinate: formData.yCoordinate,
+        xCoordinate: formData.xCoordinate,
+        latitude: parseFloat(formData.xCoordinate),
+        longitude: parseFloat(formData.yCoordinate),
+        zoom: JSON.parse(formData.zoom),
+        access: JSON.parse(formData.access),
+      },
+    });
+    if (formData.relations) {
+      //create relation
+    }
+
+    return { success: location };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function updateLocation(formData: {
+  locationId: string,
+  title: string,
+  xCoordinate: string,
+  yCoordinate: string,
+  zoom: string,
+  access: string,
+  relations: string,
+}) {
+  try {
+    const relations = JSON.parse(formData.relations);
+    const check = await prisma.location.findUnique({
+      where: {
+        id: formData.locationId,
+      },
+      include: {
+        relations: true,
+      }
+    });
+    const existingRelationIds = check?.relations.map((rel: any) => rel.id);
+    const newRelationIds = relations.map((rel: any) => rel.id);
+    const relationsToDelete = existingRelationIds?.filter((id) => !newRelationIds.includes(id));
+    await prisma.relation.deleteMany({
+      where: {
+        id: { in: relationsToDelete },
+      },
+    });
+    const location = await prisma.location.update({
+      where: {
+        id: formData.locationId,
+      },
+      data: {
+        title: formData.title,
+        yCoordinate: formData.yCoordinate,
+        xCoordinate: formData.xCoordinate,
+        zoom: JSON.parse(formData.zoom),
+        access: JSON.parse(formData.access),
+        relations: {
+          create: relations.filter((x: any) => !x.id),
+        }
+      },
+    });
+
+    return { success: location };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function getLocationById(params: {
+  id?: string
+}) {
+  try {
+    const location = await prisma.location.findUnique({
+      where: {
+        id: params?.id,
+      },
+      include: {
+        profiles: true,
+        relations: true,
+        discussions: true,
+      }
+    });
+
+    return { success: location };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function getLocationByCoords(query: {
+  lat: string,
+  lng: string,
+}) {
+  const { lat, lng } = query;
+  const latitude = parseFloat(lat);
+  const longitude = parseFloat(lng);
+  const radiusInKm = 50;
+  const radiusInDegrees = radiusInKm/111.32;
+
+  if (isNaN(latitude) || isNaN(longitude)) {
+    return { error: 'Invalid latitude or longitude' };
+  }
+  try {
+    const locations = await prisma.location.findMany({
+      where: {
+        latitude: {
+          gte: latitude - radiusInDegrees,
+          lte: latitude + radiusInDegrees,
+        },
+        longitude: {
+          gte: longitude - radiusInDegrees,
+          lte: longitude + radiusInDegrees,
+        },
+      },
+    });
+
+    return { success: locations };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function getLocationByBounds(query: {
+  northeast: string,
+  southwest: string,
+}) {
+  try {
+    const northeast = JSON.parse(query.northeast);
+    const southwest = JSON.parse(query.southwest);
+    const locations = await prisma.location.findMany({
+      where: {
+        latitude: {
+          gte: southwest.lat,
+          lte: northeast.lat,
+        },
+        longitude: {
+          gte: southwest.lng,
+          lte: northeast.lng,
+        },
+      },
+      take: 20,
+    });
+
+    return { success: locations };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function updateCurrentLocation({
+  profileId,
+  lat,
+  lng
+}: {
+  profileId: string,
+  lat: number,
+  lng: number
+}) {
+  try {
+    const locations = await prisma.$queryRaw<Location[]>`
+      SELECT 
+        id, 
+        title, 
+        latitude, 
+        longitude,
+        ( 6371 * acos(
+          cos(radians(${lat})) * cos(radians(latitude)) * cos(radians(longitude) - radians(${lng})) 
+          + sin(radians(${lat})) * sin(radians(latitude))
+        )) AS distance
+      FROM "Location"
+      ORDER BY distance ASC
+      LIMIT 1;
+    `;
+    const location: Location = locations[0];
+    if (location) {
+      await prisma.profileLocation.updateMany({
+        where: {
+          key: 'current',
+          profileId: profileId,
+        },
+        data: { key: 'past' }
+      });
+      const current = await prisma.profileLocation.create({
+        data: {
+          key: 'current',
+          profileId: profileId,
+          locationId: location.id,
+        }
+      });
+    }
+
+    return { success: locations[0] };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function addLocation({
+  profileId,
+  locationId,
+}: {
+  profileId: string,
+  locationId: string,
+}) {
+  try {
+    const profile = await prisma.profile.update({
+      where: {
+        id: profileId,
+      },
+      data: {
+        locations: { connect: { id: locationId } },
+      }
+    });
+
+    return { success: profile };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function removeLocation({
+  profileId,
+  locationId,
+}: {
+  profileId: string,
+  locationId: string,
+}) {
+  try {
+    const profile = await prisma.profile.update({
+      where: {
+        id: profileId,
+      },
+      data: {
+        locations: { disconnect: { id: locationId } },
+      }
+    });
+
+    return { success: profile };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function askAccess({
+  profileId,
+  locationId,
+}: {
+  profileId: string,
+  locationId: string,
+}) {
+  const location = await prisma.location.update({
+    where: {
+      id: locationId,
+    },
+    data: {
+      ask: { push: profileId },
+    },
+    include: {
+      profiles: true,
+    }
+  });
+
+  return {
+    title: location.title,
+    limit: location.profiles.length,
+  };
+}
+
+export async function addLink(formData: {
+  id: string,
+  link: string,
+}) {
+  try {
+    if (formData.link.length < 3) throw new Error('Your link is too short');
+    const location = await prisma.location.update({
+      where: {
+        id: formData?.id,
+      },
+      data: {
+        links: { push: formData.link }
+      }
+    });
+
+    return { success: location };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function getProfileLocations(params: {
+  id?: string
+}) {
+  try {
+    const locationProfiles = await prisma.profileLocation.findMany({
+      where: {
+        locationId: params?.id,
+      },
+      include: {
+        Profile: true,
+      },
+      take: 20,
+      orderBy: { createdAt: 'desc' },
+    });
+
+    console.log({ locationProfiles: locationProfiles.map((x: { Profile: any; }) => x.Profile) });
+    
+    // TODO Merge better
+    const userIds = locationProfiles.map(
+      (profileLocation: { Profile: { userId: string | null } }) => {
+        return profileLocation.Profile.userId;
+      }
+    );
+    const uniqueUserIds = Array.from(new Set(userIds));
+
+    const mergedProfiles = uniqueUserIds.map(
+      (userId) => {
+        return locationProfiles.find((profileLocation: { Profile: { userId: string | null } }) => profileLocation.Profile.userId === userId);
+      }
+    );
+
+    const filteredProfiles = mergedProfiles.filter((profile) => profile !== undefined);
+
+    console.log({ mergedProfiles });
+
+    return { success: mergedProfiles };
+  } catch(e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
\ No newline at end of file
diff --git a/server/src/actions/plugin.js b/server/src/actions/plugin.js
new file mode 100644
index 00000000..4ed49c51
--- /dev/null
+++ b/server/src/actions/plugin.js
@@ -0,0 +1,72 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findPluginSettings = findPluginSettings;
+exports.togglePluginActive = togglePluginActive;
+exports.updatePluginSettings = updatePluginSettings;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findPluginSettings(query) {
+    try {
+        const pluginSettings = await prisma_1.default.pluginSettings.findMany({
+            where: {
+                key: query.key,
+                profileId: query.profileId,
+            }
+        });
+        return { success: pluginSettings };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function togglePluginActive(formData) {
+    try {
+        const pluginSettings = await prisma_1.default.pluginSettings.upsert({
+            where: {
+                id: formData.pluginSettingsId || '',
+            },
+            update: {
+                active: formData.active == 'true',
+            },
+            create: {
+                name: formData.name,
+                path: formData.path,
+                key: formData.key,
+                pluginId: formData.pluginId,
+                profileId: formData.profileId,
+                active: formData.active == 'true',
+            }
+        });
+        return { success: pluginSettings };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function updatePluginSettings(formData) {
+    try {
+        /*const pluginSettings = await prisma.pluginSettings.upsert({
+          where: {
+            id: formData.pluginSettingsId || '',
+          },
+          update: {
+            settings: JSON.parse(formData.settings),
+          },
+          create: {
+            pluginId: formData.pluginId,
+            profileId: formData.profileId,
+            settings: JSON.parse(formData.settings),
+          }
+        });
+    
+        return { success: pluginSettings };*/
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
diff --git a/server/src/actions/plugin.ts b/server/src/actions/plugin.ts
new file mode 100644
index 00000000..3fc0dc11
--- /dev/null
+++ b/server/src/actions/plugin.ts
@@ -0,0 +1,82 @@
+import prisma from '../lib/prisma';
+
+export async function findPluginSettings(query: {
+  key?: string,
+  profileId?: string,
+}) {
+  try {
+    const pluginSettings = await prisma.pluginSettings.findMany({
+      where: {
+        key: query.key,
+        profileId: query.profileId,
+      }
+    });
+
+    return { success: pluginSettings };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function togglePluginActive(formData: {
+  pluginSettingsId: string
+  name: string,
+  path: string,
+  key: string,
+  pluginId: string,
+  profileId: string,
+  active: string,
+}) {
+  try {
+    const pluginSettings = await prisma.pluginSettings.upsert({
+      where: {
+        id: formData.pluginSettingsId || '',
+      },
+      update: {
+        active: formData.active == 'true',
+      },
+      create: {
+        name: formData.name,
+        path: formData.path,
+        key: formData.key,
+        pluginId: formData.pluginId,
+        profileId: formData.profileId,
+        active: formData.active == 'true',
+      }
+    });
+
+    return { success: pluginSettings };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function updatePluginSettings(formData: {
+  pluginSettingsId: string,
+  pluginId: string,
+  profileId: string,
+  settings: string,
+}) {
+  try {
+    /*const pluginSettings = await prisma.pluginSettings.upsert({
+      where: {
+        id: formData.pluginSettingsId || '',
+      },
+      update: {
+        settings: JSON.parse(formData.settings),
+      },
+      create: {
+        pluginId: formData.pluginId,
+        profileId: formData.profileId,
+        settings: JSON.parse(formData.settings),
+      }
+    });
+
+    return { success: pluginSettings };*/
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
diff --git a/server/src/actions/relation.js b/server/src/actions/relation.js
new file mode 100644
index 00000000..5e755240
--- /dev/null
+++ b/server/src/actions/relation.js
@@ -0,0 +1,49 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.findRelations = findRelations;
+exports.addRelation = addRelation;
+exports.removeRelation = removeRelation;
+const prisma_1 = __importDefault(require("../lib/prisma"));
+async function findRelations(query) {
+    try {
+        const relations = await prisma_1.default.relation.findMany({
+            where: {
+                ...(query.interestId && { interestId: query.interestId }),
+                ...(query.locationId && { locationId: query.locationId }),
+            },
+            take: 20,
+        });
+        return { success: relations.map(x => x.data) };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function addRelation(data) {
+    try {
+        const relation = await prisma_1.default.relation.create({
+            data: data
+        });
+        return { success: relation };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
+async function removeRelation(data) {
+    try {
+        const relations = await prisma_1.default.relation.deleteMany({
+            where: data
+        });
+        return { success: relations };
+    }
+    catch (e) {
+        console.error(e);
+        return { error: e.message };
+    }
+}
diff --git a/server/src/actions/relation.ts b/server/src/actions/relation.ts
new file mode 100644
index 00000000..1d4f6be0
--- /dev/null
+++ b/server/src/actions/relation.ts
@@ -0,0 +1,58 @@
+import prisma from '../lib/prisma';
+
+export async function findRelations(query: {
+  interestId?: string,
+  locationId?: string,
+}) {
+  try {
+    const relations = await prisma.relation.findMany({
+      where: {
+        ...(query.interestId && { interestId: query.interestId }),
+        ...(query.locationId && { locationId: query.locationId }),
+      },
+      take: 20,
+    });
+
+    return { success: relations.map(x => x.data) };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function addRelation(data: {
+  key: string,
+  data: string,
+  type: string,
+  interestId: string,
+  locationId: string,
+}) {
+  try {
+    const relation = await prisma.relation.create({
+      data: data
+    });
+
+    return { success: relation };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
+
+export async function removeRelation(data: {
+  key: string,
+  type: string,
+  interestId: string,
+  locationId: string,
+}) {
+  try {
+    const relations = await prisma.relation.deleteMany({
+      where: data
+    });
+
+    return { success: relations };
+  } catch (e: any) {
+    console.error(e);
+    return { error: e.message };
+  }
+}
diff --git a/server/src/api/activity.js b/server/src/api/activity.js
new file mode 100644
index 00000000..7d772cc2
--- /dev/null
+++ b/server/src/api/activity.js
@@ -0,0 +1,18 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const activity_1 = require("../actions/activity");
+const router = express_1.default.Router();
+router.route('/').get(async (req, res) => {
+    const { success, error } = await (0, activity_1.findActivities)(req.query);
+    if (success) {
+        res.status(200).json(success);
+    }
+    else {
+        res.status(400).json(error);
+    }
+});
+exports.default = router;
diff --git a/server/src/api/activity.ts b/server/src/api/activity.ts
new file mode 100644
index 00000000..3472dedc
--- /dev/null
+++ b/server/src/api/activity.ts
@@ -0,0 +1,17 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import { findActivities } from '../actions/activity';
+
+const router = express.Router();
+
+router.route('/').get(async (req: Request, res: Response) => {
+  const { success, error } = await findActivities(req.query);
+
+  if (success) {
+    res.status(200).json(success);
+  } else {
+    res.status(400).json(error);
+  }
+})
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/auth.js b/server/src/api/auth.js
new file mode 100644
index 00000000..90e597a4
--- /dev/null
+++ b/server/src/api/auth.js
@@ -0,0 +1,78 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const multer_1 = __importDefault(require("multer"));
+const prisma_1 = __importDefault(require("../lib/prisma"));
+const auth_1 = require("../lib/auth");
+const models_1 = require("../models");
+const router = express_1.default.Router();
+const upload = (0, multer_1.default)();
+router.route('/').get(async (req, res) => {
+    try {
+        const authHeader = req.get('Authorization');
+        const session = await (0, auth_1.auth)(authHeader);
+        res.status(200).json({ session });
+    }
+    catch (e) {
+        console.error(e);
+        res.status(400).json(e.error);
+    }
+});
+router.route('/login').post(upload.none(), async (req, res) => {
+    try {
+        const formData = req.body;
+        if (formData.email.length < 3) {
+            res.status(401).json('This account does not exist');
+            return;
+        }
+        const user = await prisma_1.default.user.findUnique({
+            where: {
+                email: formData.email,
+            }
+        });
+        if (!user) {
+            res.status(401).json('This account does not exist');
+            return;
+        }
+        // if (formData.password != user.password) return res.status(401).json('The password is not correct');
+        const { token, expires } = await (0, auth_1.login)(user);
+        console.log('Login successfull');
+        res.status(200).json({ token, expires });
+    }
+    catch (e) {
+        console.error(e);
+        res.status(400).json(e.error);
+    }
+});
+router.route('/logout').get(async (req, res) => {
+    const authHeader = req.get('Authorization');
+    const session = await (0, auth_1.auth)(authHeader);
+    await (0, auth_1.logout)();
+    res.status(200).json({ session });
+});
+router.route('/refresh').post(upload.none(), async (req, res) => {
+    res.status(400).json({ error: 'Failed to refresh token' });
+});
+router.route('/session').get(async (req, res) => {
+    try {
+        const authHeader = req.get('Authorization');
+        let authToken = authHeader;
+        if (!authToken) {
+            const { token } = await models_1.sessions.createToken({ userId: '' });
+            authToken = token;
+        }
+        const userId = await models_1.sessions.validateToken(authToken);
+        res.status(200).json({
+            userId: userId,
+            token: authToken,
+        });
+    }
+    catch (e) {
+        console.error(e);
+        res.status(400).json(e.error);
+    }
+});
+exports.default = router;
diff --git a/server/src/api/auth.ts b/server/src/api/auth.ts
new file mode 100644
index 00000000..bb511ef0
--- /dev/null
+++ b/server/src/api/auth.ts
@@ -0,0 +1,85 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import multer from 'multer';
+import prisma from '../lib/prisma';
+import { auth, login, logout } from '../lib/auth';
+import { sessions } from '../models'
+
+const router = express.Router();
+const upload = multer();
+
+router.route('/').get(async (req: Request, res: Response) => {
+  try {
+    const authHeader = req.get('Authorization');
+    const session = await auth(authHeader);
+
+    res.status(200).json({ session });
+  } catch(e: any) {
+    console.error(e);
+    res.status(400).json(e.error);
+  }
+});
+
+router.route('/login').post(upload.none(), async (req: Request, res: Response) => {
+  try {
+    const formData = req.body;
+    if (formData.email.length < 3) {
+      res.status(401).json('This account does not exist');
+      return;
+    } 
+    const user = await prisma.user.findUnique({
+      where: {
+        email: formData.email,
+      }
+    });
+    if (!user) {
+      res.status(401).json('This account does not exist');
+      return;
+    }
+    // if (formData.password != user.password) return res.status(401).json('The password is not correct');
+
+    const { token, expires } = await login(user);
+    console.log('Login successfull');
+    
+    res.status(200).json({ token, expires });
+  } catch(e: any) {
+    console.error(e);
+    res.status(400).json(e.error);
+  }
+});
+
+router.route('/logout').get(async (req: Request, res: Response) => {
+  const authHeader = req.get('Authorization');
+  const session = await auth(authHeader);
+  await logout();
+
+  res.status(200).json({ session });
+});
+
+router.route('/refresh').post(upload.none(), async (req: Request, res: Response) => {
+  res.status(400).json({ error: 'Failed to refresh token' });
+});
+
+
+router.route('/session').get(async (req: Request, res: Response) => {
+  try {
+    const authHeader = req.get('Authorization');
+    let authToken = authHeader as string;
+    if (!authToken) {
+      const { token } = await sessions.createToken({userId: ''});
+      authToken = token;
+    }
+    const userId = await sessions.validateToken(authToken);
+
+    res.status(200).json({ 
+      userId: userId,
+      token: authToken,
+    });
+  } catch(e: any) {
+    console.error(e);
+    res.status(400).json(e.error);
+  }
+});
+
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/discussion.js b/server/src/api/discussion.js
new file mode 100644
index 00000000..77088ab3
--- /dev/null
+++ b/server/src/api/discussion.js
@@ -0,0 +1,30 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const discussion_1 = require("../actions/discussion");
+const router = express_1.default.Router();
+router.route('/:id').get(async (req, res) => {
+    const { success, error } = await (0, discussion_1.findDiscussions)(req.params);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/vote/yes').put(async (req, res) => {
+    const { success, error } = await (0, discussion_1.voteYes)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/vote/no').put(async (req, res) => {
+    const { success, error } = await (0, discussion_1.voteNo)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+exports.default = router;
diff --git a/server/src/api/discussion.ts b/server/src/api/discussion.ts
new file mode 100644
index 00000000..ece76f7c
--- /dev/null
+++ b/server/src/api/discussion.ts
@@ -0,0 +1,38 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import {
+  findDiscussions,
+  voteYes,
+  voteNo,
+} from '../actions/discussion';
+
+const router = express.Router();
+
+router.route('/:id').get(async (req: Request, res: Response) => {
+  const { success, error } = await findDiscussions(req.params);
+
+  if (success)
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/vote/yes').put(async (req: Request, res: Response) => {
+  const { success, error } = await voteYes(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/vote/no').put(async (req: Request, res: Response) => {
+  const { success, error } = await voteNo(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/interest.js b/server/src/api/interest.js
new file mode 100644
index 00000000..103404dd
--- /dev/null
+++ b/server/src/api/interest.js
@@ -0,0 +1,99 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const multer_1 = __importDefault(require("multer"));
+const prisma_1 = __importDefault(require("../lib/prisma"));
+const interest_1 = require("../actions/interest");
+const activity_1 = require("../actions/activity");
+const discussion_1 = require("../actions/discussion");
+const router = express_1.default.Router();
+const upload = (0, multer_1.default)();
+router.route('/').get(async (req, res) => {
+    const { success, error } = await (0, interest_1.findInterests)(req.query);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).post(upload.none(), async (req, res) => {
+    const { success, error } = await (0, interest_1.createInterest)(req.body);
+    if (success) {
+        await (0, activity_1.createActivity)({
+            profileId: req.body?.profileId,
+            text: `The interest ${success.title} was created!`,
+            interestId: success.id,
+        });
+    }
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).put(upload.none(), async (req, res) => {
+    const { success, error } = await (0, interest_1.updateInterest)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/byId/:id').get(async (req, res) => {
+    const { success, error } = await (0, interest_1.getInterestById)(req.params);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/add').put(async (req, res) => {
+    const { success, error } = await (0, interest_1.addInterest)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/remove').put(async (req, res) => {
+    const { success, error } = await (0, interest_1.removeInterest)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/ask').put(async (req, res) => {
+    const result = await (0, interest_1.askAccess)(req.body);
+    if (result) {
+        const profile = await prisma_1.default.profile.findUnique({
+            where: { id: req.body.profileId },
+        });
+        await (0, discussion_1.createDiscussion)({
+            type: 'askAccess',
+            text: `${profile?.username} asks to join the ${result.title} community`,
+            limit: result.limit,
+            votes: { yes: 0, no: 0 },
+            attachment: profile,
+            interestId: req.body.interestId,
+        });
+    }
+    res.status(200).json(true);
+});
+router.route('/invite').put(async (req, res) => {
+    const result = await (0, interest_1.inviteFriends)(req.body);
+    if (result) {
+        for (let id of result.invites) {
+            await prisma_1.default.invite.create({
+                data: {
+                    profileId: id,
+                    interestId: req.body.interestId,
+                }
+            });
+        }
+    }
+    res.status(200).json(true);
+});
+router.route('/link').post(upload.none(), async (req, res) => {
+    const { success, error } = await (0, interest_1.addLink)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+exports.default = router;
diff --git a/server/src/api/interest.ts b/server/src/api/interest.ts
new file mode 100644
index 00000000..8bbfc885
--- /dev/null
+++ b/server/src/api/interest.ts
@@ -0,0 +1,125 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import multer from 'multer';
+import prisma from '../lib/prisma';
+import {
+  findInterests,
+  createInterest,
+  updateInterest,
+  getInterestById,
+  addInterest,
+  removeInterest,
+  askAccess,
+  inviteFriends,
+  addLink,
+} from '../actions/interest';
+import { createActivity } from '../actions/activity';
+import { createDiscussion } from '../actions/discussion';
+
+const router = express.Router();
+const upload = multer();
+
+router.route('/').get(async (req: Request, res: Response) => {
+  const { success, error } = await findInterests(req.query);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).post(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await createInterest(req.body);
+  if (success) {
+    await createActivity({
+      profileId: req.body?.profileId,
+      text: `The interest ${success.title} was created!`,
+      interestId: success.id,
+    });
+  }
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).put(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await updateInterest(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+})
+
+
+router.route('/byId/:id').get(async (req: Request, res: Response) => {
+  const { success, error } = await getInterestById(req.params);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/add').put(async (req: Request, res: Response) => {
+  const { success, error } = await addInterest(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/remove').put(async (req: Request, res: Response) => {
+  const { success, error } = await removeInterest(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/ask').put(async (req: Request, res: Response) => {
+  const result = await askAccess(req.body);
+  if (result) {
+    const profile = await prisma.profile.findUnique({
+      where: { id: req.body.profileId },
+    });
+    await createDiscussion({
+      type: 'askAccess',
+      text: `${profile?.username} asks to join the ${result.title} community`,
+      limit: result.limit,
+      votes: { yes: 0, no: 0 },
+      attachment: profile,
+      interestId: req.body.interestId,
+    });
+  }
+
+  res.status(200).json(true);
+});
+
+router.route('/invite').put(async (req: Request, res: Response) => {
+  const result = await inviteFriends(req.body);
+  if (result) {
+    for (let id of result.invites) {
+      await prisma.invite.create({
+        data: {
+          profileId: id,
+          interestId: req.body.interestId,
+        }
+      });
+    }
+  }
+
+  res.status(200).json(true);
+});
+
+
+router.route('/link').post(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await addLink(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/location.js b/server/src/api/location.js
new file mode 100644
index 00000000..821f6827
--- /dev/null
+++ b/server/src/api/location.js
@@ -0,0 +1,82 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const multer_1 = __importDefault(require("multer"));
+const prisma_1 = __importDefault(require("../lib/prisma"));
+const location_1 = require("../actions/location");
+const router = express_1.default.Router();
+const upload = (0, multer_1.default)();
+router.route('/').get(async (req, res) => {
+    const { success, error } = await (0, location_1.findLocations)(req.query);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).post(upload.none(), async (req, res) => {
+    console.log(req.body);
+    const { success, error } = await (0, location_1.createLocation)(req.body);
+    /*if (success) { //als eigener endpoint
+      await createActivity({
+        profileId: req.body?.profileId,
+        text: `The location ${success.title} was created!`,
+        locationId: success.id,
+      });
+    }*/
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).put(upload.none(), async (req, res) => {
+    const { success, error } = await (0, location_1.updateLocation)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/byId/:id').get(async (req, res) => {
+    const { success, error } = await (0, location_1.getLocationById)(req.params);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/add').put(async (req, res) => {
+    const { success, error } = await (0, location_1.addLocation)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/remove').put(async (req, res) => {
+    const { success, error } = await (0, location_1.removeLocation)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/ask').put(async (req, res) => {
+    const { title, limit } = await (0, location_1.askAccess)(req.body);
+    const profile = await prisma_1.default.profile.findUnique({
+        where: { id: req.body.profileId },
+    });
+    /*await createDiscussion({ //als eigener endpoint
+      type: 'askAccess',
+      text: `${profile?.username} asks to join the ${title} community`,
+      limit: limit,
+      votes: { yes: 0, no: 0 },
+      attachment: profile,
+      locationId: req.body.locationId,
+    });*/
+    res.status(200).json(true);
+});
+router.route('/link').post(upload.none(), async (req, res) => {
+    const { success, error } = await (0, location_1.addLink)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+exports.default = router;
diff --git a/server/src/api/location.ts b/server/src/api/location.ts
new file mode 100644
index 00000000..9708d9a2
--- /dev/null
+++ b/server/src/api/location.ts
@@ -0,0 +1,107 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import multer from 'multer';
+import prisma from '../lib/prisma';
+import {
+  findLocations,
+  createLocation,
+  updateLocation,
+  getLocationById,
+  addLocation,
+  removeLocation,
+  askAccess,
+  addLink,
+} from '../actions/location';
+import { createActivity } from '../actions/activity';
+import { createDiscussion } from '../actions/discussion';
+
+const router = express.Router();
+const upload = multer();
+
+router.route('/').get(async (req: Request, res: Response) => {
+  const { success, error } = await findLocations(req.query);
+
+  if (success) 
+    res.status(200).json(success);
+  else
+    res.status(400).json(error);
+}).post(upload.none(), async (req: Request, res: Response) => {
+  console.log(req.body);
+  const { success, error } = await createLocation(req.body);
+  /*if (success) { //als eigener endpoint
+    await createActivity({
+      profileId: req.body?.profileId,
+      text: `The location ${success.title} was created!`,
+      locationId: success.id,
+    });
+  }*/
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).put(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await updateLocation(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/byId/:id').get(async (req: Request, res: Response) => {
+  const { success, error } = await getLocationById(req.params);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/add').put(async (req: Request, res: Response) => {
+  const { success, error } = await addLocation(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/remove').put(async (req: Request, res: Response) => {
+  const { success, error } = await removeLocation(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/ask').put(async (req: Request, res: Response) => {
+  const { title, limit } = await askAccess(req.body);
+  const profile = await prisma.profile.findUnique({
+    where: { id: req.body.profileId },
+  });
+  /*await createDiscussion({ //als eigener endpoint
+    type: 'askAccess',
+    text: `${profile?.username} asks to join the ${title} community`,
+    limit: limit,
+    votes: { yes: 0, no: 0 },
+    attachment: profile,
+    locationId: req.body.locationId,
+  });*/
+
+  res.status(200).json(true);
+});
+
+
+
+router.route('/link').post(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await addLink(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/plugin.js b/server/src/api/plugin.js
new file mode 100644
index 00000000..2d7390de
--- /dev/null
+++ b/server/src/api/plugin.js
@@ -0,0 +1,32 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const multer_1 = __importDefault(require("multer"));
+const plugin_1 = require("../actions/plugin");
+const router = express_1.default.Router();
+const upload = (0, multer_1.default)();
+router.route('/').get(async (req, res) => {
+    const { success, error } = await (0, plugin_1.findPluginSettings)(req.query);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/active').post(upload.none(), async (req, res) => {
+    const { success, error } = await (0, plugin_1.togglePluginActive)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/settings').post(upload.none(), async (req, res) => {
+    const { success, error } = await (0, plugin_1.togglePluginActive)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+exports.default = router;
diff --git a/server/src/api/plugin.ts b/server/src/api/plugin.ts
new file mode 100644
index 00000000..39fbf069
--- /dev/null
+++ b/server/src/api/plugin.ts
@@ -0,0 +1,39 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import multer from 'multer';
+import { 
+  findPluginSettings,
+  togglePluginActive,
+ } from '../actions/plugin';
+
+const router = express.Router();
+const upload = multer();
+
+router.route('/').get(async (req: Request, res: Response) => {
+  const { success, error } = await findPluginSettings(req.query);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/active').post(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await togglePluginActive(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/settings').post(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await togglePluginActive(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+})
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/relation.js b/server/src/api/relation.js
new file mode 100644
index 00000000..67784893
--- /dev/null
+++ b/server/src/api/relation.js
@@ -0,0 +1,28 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const relation_1 = require("../actions/relation");
+const router = express_1.default.Router();
+router.route('/').get(async (req, res) => {
+    const { success, error } = await (0, relation_1.findRelations)(req.query);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).put(async (req, res) => {
+    const { success, error } = await (0, relation_1.addRelation)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).delete(async (req, res) => {
+    const { success, error } = await (0, relation_1.removeRelation)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+exports.default = router;
diff --git a/server/src/api/relation.ts b/server/src/api/relation.ts
new file mode 100644
index 00000000..bfbc2cff
--- /dev/null
+++ b/server/src/api/relation.ts
@@ -0,0 +1,34 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import {
+  findRelations,
+  addRelation,
+  removeRelation
+} from '../actions/relation';
+
+const router = express.Router();
+
+router.route('/').get(async (req: Request, res: Response) => {
+  const { success, error } = await findRelations(req.query);
+
+  if (success)
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).put(async (req: Request, res: Response) => {
+  const { success, error } = await addRelation(req.body);
+
+  if (success)
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).delete(async (req: Request, res: Response) => {
+  const { success, error } = await removeRelation(req.body);
+
+  if (success)
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+})
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/v2/interest.js b/server/src/api/v2/interest.js
new file mode 100644
index 00000000..ca6b343b
--- /dev/null
+++ b/server/src/api/v2/interest.js
@@ -0,0 +1,81 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const multer_1 = __importDefault(require("multer"));
+const interest_relations_1 = require("../../actions/interest-relations");
+const router = express_1.default.Router();
+const upload = (0, multer_1.default)();
+//--- Relations--- //
+router.route('/:id/relations').get(async (req, res) => {
+    const { id } = req.params;
+    const [interestRelations, locationRelations] = await Promise.all([
+        (0, interest_relations_1.findInterestRelations)(id),
+        (0, interest_relations_1.findLocationRelations)(id)
+    ]);
+    if (interestRelations.success && locationRelations.success) {
+        res.status(200).json({
+            children: [],
+            members: [],
+            interests: interestRelations.success,
+            locations: locationRelations.success
+        });
+    }
+    else {
+        res.status(400).json({
+            error: interestRelations.error || locationRelations.error
+        });
+    }
+});
+// router.route('/:id/profiles').get(async (req: Request, res: Response) => {
+//   const { success, error } = await getProfileInterests(req.params);
+//   if (success) return res.status(200).json(success);
+//   else return res.status(400).json(error);
+// });
+router.route('/interests/:id').get(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, interest_relations_1.findInterestRelations)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).post(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, interest_relations_1.createInterestRelation)(id, req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).delete(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, interest_relations_1.removeInterestRelation)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/locations/:id').get(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, interest_relations_1.findLocationRelations)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).post(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, interest_relations_1.createLocationRelation)(id, req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).delete(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, interest_relations_1.removeLocationRelation)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+exports.default = router;
diff --git a/server/src/api/v2/interest.ts b/server/src/api/v2/interest.ts
new file mode 100644
index 00000000..d13bce6d
--- /dev/null
+++ b/server/src/api/v2/interest.ts
@@ -0,0 +1,99 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import multer from 'multer';
+import {
+  findInterestRelations,
+  findLocationRelations,
+  createInterestRelation,
+  createLocationRelation,
+  removeInterestRelation,
+  removeLocationRelation
+} from '../../actions/interest-relations';
+
+const router = express.Router();
+const upload = multer();
+
+//--- Relations--- //
+router.route('/:id/relations').get(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const [interestRelations, locationRelations] = await Promise.all([
+    findInterestRelations(id),
+    findLocationRelations(id)
+  ]);
+
+  if (interestRelations.success && locationRelations.success) {
+    res.status(200).json({
+      children: [],
+      members: [],
+      interests: interestRelations.success,
+      locations: locationRelations.success
+    });
+  } else {
+    res.status(400).json({
+      error: interestRelations.error || locationRelations.error
+    });
+  }
+});
+
+// router.route('/:id/profiles').get(async (req: Request, res: Response) => {
+//   const { success, error } = await getProfileInterests(req.params);
+
+//   if (success) return res.status(200).json(success);
+//   else return res.status(400).json(error);
+// });
+
+
+router.route('/interests/:id').get(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await findInterestRelations(id);
+
+  if (success)
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).post(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await createInterestRelation(id, req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).delete(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await removeInterestRelation(id);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/locations/:id').get(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await findLocationRelations(id);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).post(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await createLocationRelation(id, req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).delete(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await removeLocationRelation(id);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/v2/location.js b/server/src/api/v2/location.js
new file mode 100644
index 00000000..22df7032
--- /dev/null
+++ b/server/src/api/v2/location.js
@@ -0,0 +1,94 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const multer_1 = __importDefault(require("multer"));
+const location_1 = require("../../actions/location");
+const location_relations_1 = require("../../actions/location-relations");
+const router = express_1.default.Router();
+const upload = (0, multer_1.default)();
+router.route('/byCoords').get(async (req, res) => {
+    let { lat, lng } = req.query;
+    const { success, error } = await (0, location_1.getLocationByCoords)({ lat, lng });
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/byBounds').get(async (req, res) => {
+    let { northeast, southwest } = req.query;
+    const { success, error } = await (0, location_1.getLocationByBounds)({ northeast, southwest });
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/updateCurrent').post(upload.none(), async (req, res) => {
+    const { success, error } = await (0, location_1.updateCurrentLocation)(req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+//--- Relations--- //
+router.route('/:id/profiles').get(async (req, res) => {
+    const { success, error } = await (0, location_1.getProfileLocations)(req.params);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).post(async (req, res) => {
+    const { success, error } = await (0, location_relations_1.createProfileRelation)(req.params.id, req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/interests/:id').get(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, location_relations_1.findInterestRelations)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).post(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, location_relations_1.createInterestRelation)(id, req.body);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).delete(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, location_relations_1.removeInterestRelation)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+router.route('/locations/:id').get(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, location_relations_1.findLocationRelations)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).post(async (req, res) => {
+    const { id } = req.params;
+    const data = req.body;
+    const { success, error } = await (0, location_relations_1.createLocationRelation)(id, data);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+}).delete(async (req, res) => {
+    const { id } = req.params;
+    const { success, error } = await (0, location_relations_1.removeLocationRelation)(id);
+    if (success)
+        res.status(200).json(success);
+    else
+        res.status(400).json(error);
+});
+exports.default = router;
diff --git a/server/src/api/v2/location.ts b/server/src/api/v2/location.ts
new file mode 100644
index 00000000..e2d88083
--- /dev/null
+++ b/server/src/api/v2/location.ts
@@ -0,0 +1,121 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import multer from 'multer';
+import {
+  getLocationByCoords,
+  getLocationByBounds,
+  updateCurrentLocation,
+  getProfileLocations,
+} from '../../actions/location';
+import {
+  findInterestRelations,
+  findLocationRelations,
+  createInterestRelation,
+  createLocationRelation,
+  createProfileRelation,
+  removeInterestRelation,
+  removeLocationRelation
+} from '../../actions/location-relations';
+import { auth } from '../../lib/auth';
+
+const router = express.Router();
+const upload = multer();
+
+router.route('/byCoords').get(async (req: Request, res: Response) => {
+  let { lat, lng } = req.query as { lat: string; lng: string };
+  const { success, error } = await getLocationByCoords({ lat, lng });
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/byBounds').get(async (req: Request, res: Response) => {
+  let { northeast, southwest } = req.query as { northeast: string; southwest: string };
+  const { success, error } = await getLocationByBounds({ northeast, southwest });
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/updateCurrent').post(upload.none(), async (req: Request, res: Response) => {
+  const { success, error } = await updateCurrentLocation(req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+//--- Relations--- //
+router.route('/:id/profiles').get(async (req: Request, res: Response) => {
+  const { success, error } = await getProfileLocations(req.params);
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).post(async (req: Request, res: Response) => {
+  const { success, error } = await createProfileRelation(req.params.id, req.body);
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/interests/:id').get(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await findInterestRelations(id);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).post(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await createInterestRelation(id, req.body);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).delete(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await removeInterestRelation(id);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+router.route('/locations/:id').get(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await findLocationRelations(id);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).post(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const data = req.body;
+  const { success, error } = await createLocationRelation(id, data);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+}).delete(async (req: Request, res: Response) => {
+  const { id } = req.params;
+  const { success, error } = await removeLocationRelation(id);
+
+  if (success) 
+    res.status(200).json(success);
+  else 
+    res.status(400).json(error);
+});
+
+export default router;
\ No newline at end of file
diff --git a/server/src/api/v2/profile.js b/server/src/api/v2/profile.js
new file mode 100644
index 00000000..18400b0a
--- /dev/null
+++ b/server/src/api/v2/profile.js
@@ -0,0 +1,19 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const multer_1 = __importDefault(require("multer"));
+const router = express_1.default.Router();
+const upload = (0, multer_1.default)();
+/*router.route('/locations/:id').get(async (req: Request, res: Response) => {
+  const { success, error } = await getProfileLocations(req.params);
+
+  if (success)
+    res.status(200).json(success);
+  else
+    res.status(400).json(error);
+});
+*/
+exports.default = router;
diff --git a/server/src/api/v2/profile.ts b/server/src/api/v2/profile.ts
new file mode 100644
index 00000000..eeeaf6b0
--- /dev/null
+++ b/server/src/api/v2/profile.ts
@@ -0,0 +1,18 @@
+import type { Request, Response } from 'express';
+import express from 'express';
+import multer from 'multer';
+
+const router = express.Router();
+const upload = multer();
+
+/*router.route('/locations/:id').get(async (req: Request, res: Response) => {
+  const { success, error } = await getProfileLocations(req.params);
+
+  if (success)  
+    res.status(200).json(success);
+  else  
+    res.status(400).json(error);
+});
+*/
+
+export default router;
\ No newline at end of file
diff --git a/server/src/app.js b/server/src/app.js
new file mode 100644
index 00000000..e99d2479
--- /dev/null
+++ b/server/src/app.js
@@ -0,0 +1,60 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = __importDefault(require("express"));
+const cors_1 = __importDefault(require("cors"));
+const morgan_1 = __importDefault(require("morgan"));
+const path_1 = __importDefault(require("path"));
+const fs_1 = __importDefault(require("fs"));
+const https_1 = __importDefault(require("https"));
+const http_1 = __importDefault(require("http"));
+const middleware_1 = require("./middleware");
+const routes_1 = __importDefault(require("./routes"));
+const gun_1 = require("./gun");
+const swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
+const swagger_output_json_1 = __importDefault(require("./swagger_output.json"));
+const config_1 = require("./config");
+const app = (0, express_1.default)();
+app.use((0, cors_1.default)(config_1.corsOptions));
+app.use((0, morgan_1.default)('dev'));
+app.use(express_1.default.json());
+app.use(express_1.default.urlencoded({ extended: false }));
+// Serve docs 
+app.use('/docs', swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(swagger_output_json_1.default));
+// Serve static client
+const clientBuildPath = path_1.default.join(__dirname, '../../client/dist');
+console.log("Client folder:", clientBuildPath);
+if (fs_1.default.existsSync(clientBuildPath)) {
+    app.use(express_1.default.static(clientBuildPath));
+}
+else {
+    app.get('/', (req, res) => {
+        res.send(`Client build folder does not exist. Not serving client`);
+    });
+}
+// Read Authentication Token from Header and add session to request
+app.use(middleware_1.sessionMiddleware);
+app.use('/', routes_1.default);
+function startServer() {
+    if (config_1.enable_https) {
+        console.log(`starting https server on ${config_1.port}...`);
+        const server = https_1.default.createServer(config_1.certificate, app);
+        server.listen(config_1.port, config_1.rpID, () => {
+            console.log(`🚀 HTTPS Server ready at https://${config_1.rpID}:${config_1.port}`);
+        });
+        return server;
+    }
+    else {
+        console.log(`Starting http server on ${config_1.port}...`);
+        const server = http_1.default.createServer(app).listen(config_1.port, config_1.rpID, () => {
+            console.log(`🚀 HTTP Server ready at http://${config_1.rpID}:${config_1.port}`);
+        });
+        return server;
+    }
+}
+if (require.main === module) {
+    const server = startServer();
+    (0, gun_1.initGun)(server);
+}
diff --git a/server/src/app.ts b/server/src/app.ts
index e3614c0e..07026b42 100644
--- a/server/src/app.ts
+++ b/server/src/app.ts
@@ -6,12 +6,29 @@ import path from 'path';
 import fs from 'fs';
 import https from "https";
 import http from "http";
+import { sessionMiddleware } from './middleware';
+import routes from './routes';
 import { initGun } from './gun';
 
+import swaggerUi from "swagger-ui-express";
+import swaggerOutput from "./swagger_output.json";
+
 import { 
   corsOptions, 
   rpID, port, enable_https, certificate } from './config';
 
+declare global {
+  namespace Express {
+    interface Request {
+      session: {
+        userId: string;
+        loggedIn: boolean;
+        token: string;
+        expires: Date;
+      }
+    }
+  }
+}
 const app = express();
 
 app.use(cors(corsOptions));
@@ -19,16 +36,27 @@ app.use(morgan('dev'));
 app.use(express.json());
 app.use(express.urlencoded({extended: false}));
 
-// Serve static client
-const clientBuildPath = path.join(__dirname, '../../client/dist');
-console.log("Client folder:", clientBuildPath);
-if (fs.existsSync(clientBuildPath)) {
-  app.use(express.static(clientBuildPath));
-} else {
-  app.get('/', (req, res) => {
-    res.send(`Client build folder does not exist. Not serving client`);
-  });
-}
+// Serve docs 
+app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerOutput));
+// Read Authentication Token from Header and add session to request
+//app.use(sessionMiddleware);
+
+// Serve static files from src/views
+const viewsPath = path.join(__dirname, 'views');
+app.use(express.static(viewsPath));
+
+// 1. Static files
+app.use(express.static(viewsPath));
+
+// 2. Real routes (docs, API, etc.)
+app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerOutput));
+app.use('/api', routes);
+
+// 3. Catch-all for SPA (after all others)
+app.get(/^\/(?!api|docs).*/, (req, res) => {
+  res.sendFile(path.join(viewsPath, 'index.html'));
+});
+
 
 function startServer() {
   if (enable_https) {
diff --git a/server/src/config.js b/server/src/config.js
new file mode 100644
index 00000000..60686d72
--- /dev/null
+++ b/server/src/config.js
@@ -0,0 +1,55 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.dataFolder = exports.storeType = exports.certificate = exports.cookieOptions = exports.corsOptions = exports.origin = exports.rpID = exports.rpName = exports.port = exports.enable_https = exports.jwtSecret = exports.sessionSecret = exports.url = void 0;
+const dotenv_1 = __importDefault(require("dotenv"));
+const fs_1 = __importDefault(require("fs"));
+const path_1 = __importDefault(require("path"));
+dotenv_1.default.config();
+exports.url = process.env.URL || 'http://localhost:3000';
+exports.sessionSecret = process.env.SESSION_SECRET || 'default_session_secret';
+exports.jwtSecret = process.env.JWT_SECRET || 'default_jwt_secret';
+exports.enable_https = process.env.HTTPS === 'true';
+exports.port = process.env.PORT ? parseInt(process.env.PORT) : 3000;
+exports.rpName = 'TribeLike';
+exports.rpID = process.env.RPID || 'localhost';
+exports.origin = [
+    `http://${exports.rpID}:${exports.port}`,
+    `https://${exports.rpID}:${exports.port}`,
+    `http://localhost:5173`,
+    `https://localhost:5173`
+];
+exports.corsOptions = {
+    origin: exports.origin,
+    credentials: true,
+    optionsSuccessStatus: 200,
+    allowedHeaders: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept', 'Authorization'],
+    methods: ['GET', 'POST', 'OPTIONS', 'PUT', 'PATCH', 'DELETE']
+};
+exports.cookieOptions = {
+    maxAge: 86400000,
+    httpOnly: true,
+    sameSite: 'lax', // Works well in development
+    secure: false, // Allow cookies over HTTP for localhost
+};
+const certificatesKey = `${__dirname}/../../localhost-key.pem`;
+const certificatesCert = `${__dirname}/../../localhost.pem`;
+let certificate = { key: '', cert: '' };
+exports.certificate = certificate;
+if (exports.enable_https) {
+    try {
+        certificate.key = fs_1.default.readFileSync(certificatesKey, 'utf8');
+        certificate.cert = fs_1.default.readFileSync(certificatesCert, 'utf8');
+    }
+    catch (error) {
+        console.error('Certificate files are not found. Please create them to enable HTTPS');
+        process.exit(1);
+    }
+}
+// Store
+exports.storeType = process.env.STORE_TYPE || 'file';
+// FileStore
+// Folder for json files
+exports.dataFolder = path_1.default.join(__dirname, '../data');
diff --git a/server/src/config.ts b/server/src/config.ts
index f3cd187e..8207bc5e 100644
--- a/server/src/config.ts
+++ b/server/src/config.ts
@@ -4,10 +4,13 @@ import path from 'path';
 import { CorsOptions } from 'cors';
 import { CookieOptions } from 'express';
 import { SecureContextOptions } from 'tls';
+import { StoreType } from './lib/Store/types/Store'; // Avoid Circular Dependencies
 
 dotenv.config();
 
 export const url: string = process.env.URL || 'http://localhost:3000';
+export const sessionSecret: string = process.env.SESSION_SECRET || 'default_session_secret';
+export const jwtSecret: string = process.env.JWT_SECRET || 'default_jwt_secret';
 export const enable_https: boolean = process.env.HTTPS === 'true';
 export const port: number =  process.env.PORT ? parseInt(process.env.PORT) : 3000;
 export const rpName: string = 'TribeLike';
@@ -48,3 +51,10 @@ if (enable_https) {
   }
 }
 export { certificate };
+
+// Store
+export const storeType: StoreType = process.env.STORE_TYPE as StoreType || 'file';
+
+// FileStore
+// Folder for json files
+export const dataFolder = path.join(__dirname, '../data');
\ No newline at end of file
diff --git a/server/src/controllers/ProfileController.js b/server/src/controllers/ProfileController.js
new file mode 100644
index 00000000..182c8819
--- /dev/null
+++ b/server/src/controllers/ProfileController.js
@@ -0,0 +1,107 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const models_1 = require("../models");
+class ProfileController {
+    static async GetAllProfiles(req, res) {
+        try {
+            const allProfiles = await models_1.profiles.getAll();
+            res.status(200).json(allProfiles);
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    static async GetAllProfilesForUser(req, res) {
+        try {
+            const { userId } = req.session;
+            const userProfiles = await models_1.profiles.getAllByUserId(userId);
+            res.status(200).json(userProfiles);
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    static async GetProfileById(req, res) {
+        try {
+            const profileId = req.params.id;
+            const profile = await models_1.profiles.getById(profileId);
+            if (profile)
+                res.status(200).json(profile);
+            else
+                res.status(404).json({ error: 'Profile not found' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    static async CreateProfile(req, res) {
+        const formData = req.body;
+        try {
+            const { userId } = req.session;
+            const result = await models_1.profiles.create({
+                ...formData,
+                userId
+            });
+            if (result)
+                res.status(200).json(result);
+            else
+                res.status(400).json({ error: 'Could not create profile' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    static async UpdateProfile(req, res) {
+        const formData = req.body;
+        try {
+            const { userId } = req.session;
+            // TODO: Ensure the profile belongs to the authenticated user
+            const userProfiles = await models_1.profiles.getAllByUserId(userId);
+            const profileBelongsToUser = userProfiles.some(profile => profile.id === formData.id);
+            if (!profileBelongsToUser) {
+                res.status(403).json({ error: 'Forbidden - Profile does not belong to user' });
+                return;
+            }
+            const result = await models_1.profiles.update(formData.id, formData);
+            if (result)
+                res.status(200).json(result);
+            else
+                res.status(404).json({ error: 'Profile not found' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    static async DeleteProfile(req, res) {
+        try {
+            const { userId } = req.session;
+            const profileId = req.query.id;
+            if (!profileId) {
+                res.status(400).json({ error: 'Profile ID is required' });
+                return;
+            }
+            // Ensure the profile belongs to the authenticated user
+            const userProfiles = await models_1.profiles.getAllByUserId(userId);
+            const profileBelongsToUser = userProfiles.some(profile => profile.id === profileId);
+            if (!profileBelongsToUser) {
+                res.status(403).json({ error: 'Forbidden - Profile does not belong to user' });
+                return;
+            }
+            const result = await models_1.profiles.delete(profileId);
+            if (result)
+                res.status(200).json({ success: 'Profile deleted' });
+            else
+                res.status(404).json({ error: 'Profile not found' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+}
+exports.default = ProfileController;
diff --git a/server/src/controllers/auth/magicLinkController.js b/server/src/controllers/auth/magicLinkController.js
new file mode 100644
index 00000000..62f14fbe
--- /dev/null
+++ b/server/src/controllers/auth/magicLinkController.js
@@ -0,0 +1,161 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const models_1 = require("../../models");
+const error_1 = require("../../lib/error");
+const email_1 = require("../../lib/email");
+const config_1 = require("../../config");
+class MagicLinkController {
+    static async handleMagicLinkLogin(req, res, next) {
+        try {
+            const { token } = req.params;
+            const userId = await models_1.magicLinks.consumeToken(token);
+            if (!userId) {
+                throw new error_1.CustomError('Magic link is not valid', 400);
+            }
+            const user = await models_1.users.getById(userId);
+            if (!user) {
+                throw new error_1.CustomError('Magic link is not valid', 400);
+            }
+            user.emailVerified = true;
+            await models_1.users.update(userId, user);
+            const session = await models_1.sessions.createToken({
+                userId: user.id,
+            });
+            res.send({
+                userId: user.id,
+                token: session.token,
+                expires: session.expires,
+                loggedIn: true
+            });
+        }
+        catch (error) {
+            (0, error_1.handleError)(error, res);
+        }
+    }
+    // move to userController.Create
+    static async handleAccountCreate(req, res, next) {
+        const { email, username } = req.body;
+        if (!username) {
+            return next(new error_1.CustomError('Username empty', 400));
+        }
+        if (!email) {
+            return next(new error_1.CustomError('Email empty', 400));
+        }
+        try {
+            let user = await models_1.users.getByEmail(email);
+            if (user) {
+                return next(new error_1.CustomError('User already exists', 400));
+            }
+            user = await models_1.users.create({
+                email: email
+            });
+            const predefineds = ['Work', 'Friends', 'Private'];
+            for (let pre of predefineds) {
+                await models_1.profiles.create({
+                    type: pre,
+                    ...user,
+                });
+            }
+            if (!user) {
+                return next(new error_1.CustomError('User Create failed', 400));
+            }
+            if (!user.id) {
+                return next(new error_1.CustomError('User Create failed', 400));
+            }
+            const { token } = await models_1.sessions.createToken({
+                userId: user.id,
+            });
+            const magicLink = models_1.magicLinks.create({
+                userId: user.id
+            });
+            const template = `
+        <div>
+          <h2 class="font-bold">Thank you for registering on Toplocs!</h2>
+          <p>
+            Please, click on the button to verify your email address and to login automatically.
+          </p>
+          <a
+            href="${magicLink}"
+            class="mt-4 inline-block bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700"
+          > Open Magic Link
+          </a>
+        </div>
+      `;
+            await (0, email_1.sendMail)(user.email, 'Register complete!', template);
+            res.send({ token: token });
+        }
+        catch (error) {
+            (0, error_1.handleError)(error, res);
+        }
+    }
+    static async sendMagicLink(req, res, next) {
+        try {
+            const { to } = await req.body;
+            const user = await models_1.users.getByEmail(to);
+            if (!user)
+                throw new error_1.CustomError('User does not exist', 400);
+            const magicLink = await models_1.magicLinks.create({
+                userId: user.id,
+            });
+            if (!magicLink)
+                throw new error_1.CustomError('No magic link', 400);
+            const subject = 'Login successfull!';
+            const template = `
+        <div>
+          <h2 class="font-bold">Thank you for using Toplocs!</h2>
+          <p>
+            Please, click on the button to login automatically.
+          </p>
+          <a
+            href="${config_1.url}/magicLink/${magicLink?.token}"
+            class="mt-4 inline-block bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700"
+          > Open Magic Link
+          </a>
+        </div>
+      `;
+            if (!to || !subject) {
+                throw new Error('Missing required fields');
+            }
+            console.log(`${config_1.url}/magicLink/${magicLink?.token}`);
+            await (0, email_1.sendMail)(to, subject, template);
+            res.send({ verified: true });
+        }
+        catch (error) {
+            (0, error_1.handleError)(error, res);
+        }
+    }
+    static async resendMagicLink(req, res, next) {
+        const { to, subject, name } = await req.body;
+        const userId = 'test';
+        const magicLink = await models_1.magicLinks.create({
+            userId: userId
+        });
+        if (!magicLink)
+            next(new error_1.CustomError('No magic link', 400));
+        console.log(magicLink);
+        const template = `
+      <div>
+        <h2 class="font-bold">Thank you for registering on Toplocs!</h2>
+        <p>
+          Please, click on the button to verify your email address and to login automatically.
+        </p>
+        <a
+          href="${config_1.url}/api/auth/magicLink/${magicLink?.token}"
+          class="mt-4 inline-block bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700"
+        > Open Magic Link
+        </a>
+      </div>
+    `;
+        if (!to || !subject || !name) {
+            throw new Error('Missing required fields');
+        }
+        try {
+            await (0, email_1.sendMail)(to, subject, template);
+            res.send({ verfied: true });
+        }
+        catch (error) {
+            (0, error_1.handleError)(error, res);
+        }
+    }
+}
+exports.default = MagicLinkController;
diff --git a/server/src/controllers/auth/magicLinkController.ts b/server/src/controllers/auth/magicLinkController.ts
new file mode 100644
index 00000000..45835768
--- /dev/null
+++ b/server/src/controllers/auth/magicLinkController.ts
@@ -0,0 +1,173 @@
+import { Request, Response, NextFunction } from 'express';
+import { users, profiles, sessions, magicLinks } from '../../models';
+import { CustomError, handleError } from '../../lib/error';
+import { sendMail } from '../../lib/email';
+import { url } from '../../config';
+
+
+export default class MagicLinkController {
+  static async handleMagicLinkLogin(req: Request, res: Response, next: NextFunction){
+    try {
+      const { token } = req.params;
+      const userId = await magicLinks.consumeToken(token);
+      if (!userId) {
+        throw new CustomError('Magic link is not valid', 400);
+      }
+      const user = await users.getById(userId);
+      if (!user) {
+        throw new CustomError('Magic link is not valid', 400);
+      }
+      user.emailVerified = true;
+      await users.update(userId, user);
+      
+      const session = await sessions.createToken({
+        userId: user.id,
+      });
+
+      res.send({
+        userId: user.id, 
+        token: session.token, 
+        expires: session.expires, 
+        loggedIn: true
+      });
+    } catch(error: any) {
+      handleError(error, res);
+    }
+  }
+  
+  // move to userController.Create
+  static async handleAccountCreate(req: Request, res: Response, next: NextFunction) {
+    const {email, username} = req.body;
+  
+    if (!username) {
+        return next(new CustomError('Username empty', 400));
+    }
+    if (!email) {
+        return next(new CustomError('Email empty', 400));
+    }
+  
+    try {
+      let user = await users.getByEmail(email);
+      if (user) {
+        return next(new CustomError('User already exists', 400));
+      }
+  
+      user = await users.create({
+        email: email
+      });
+
+      const predefineds = ['Work', 'Friends', 'Private'];
+
+      for (let pre of predefineds) {
+        await profiles.create({
+          type: pre,
+          ...user,
+        })
+      }
+  
+      if (!user) {
+          return next(new CustomError('User Create failed', 400));
+      }
+      if (!user.id) {
+        return next(new CustomError('User Create failed', 400));
+      }
+  
+      const { token } = await sessions.createToken({
+        userId: user.id,
+      });
+      const magicLink = magicLinks.create({
+        userId: user.id
+      });
+      const template = `
+        <div>
+          <h2 class="font-bold">Thank you for registering on Toplocs!</h2>
+          <p>
+            Please, click on the button to verify your email address and to login automatically.
+          </p>
+          <a
+            href="${magicLink}"
+            class="mt-4 inline-block bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700"
+          > Open Magic Link
+          </a>
+        </div>
+      `;
+      await sendMail(user.email, 'Register complete!', template);
+  
+      res.send({ token: token });
+    } catch(error: any) {
+      handleError(error, res);
+    }
+  }
+
+  static async sendMagicLink(req: Request, res: Response, next: NextFunction) {
+    try {
+      const { to } = await req.body;
+      const user = await users.getByEmail(to);
+      if (!user) throw new CustomError('User does not exist', 400);
+      const magicLink = await magicLinks.create({
+        userId: user.id,
+      });
+      if (!magicLink) throw new CustomError('No magic link', 400);
+      const subject = 'Login successfull!';
+      const template = `
+        <div>
+          <h2 class="font-bold">Thank you for using Toplocs!</h2>
+          <p>
+            Please, click on the button to login automatically.
+          </p>
+          <a
+            href="${url}/magicLink/${magicLink?.token}"
+            class="mt-4 inline-block bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700"
+          > Open Magic Link
+          </a>
+        </div>
+      `;
+    
+      if (!to || !subject) {
+        throw new Error('Missing required fields');
+      }
+    
+      console.log(`${url}/magicLink/${magicLink?.token}`)
+      await sendMail(to, subject, template);
+  
+      res.send({ verified: true });
+    } catch (error: any) {
+      handleError(error, res);
+    }
+  }
+  
+  static async resendMagicLink(req: Request, res: Response, next: NextFunction) {
+    const { to, subject, name } = await req.body;
+    const userId = 'test';
+    const magicLink = await magicLinks.create({
+      userId: userId
+    });
+    if (!magicLink) next(new CustomError('No magic link', 400));
+    console.log(magicLink)
+    const template = `
+      <div>
+        <h2 class="font-bold">Thank you for registering on Toplocs!</h2>
+        <p>
+          Please, click on the button to verify your email address and to login automatically.
+        </p>
+        <a
+          href="${url}/api/auth/magicLink/${magicLink?.token}"
+          class="mt-4 inline-block bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700"
+        > Open Magic Link
+        </a>
+      </div>
+    `;
+  
+    if (!to || !subject || !name) {
+      throw new Error('Missing required fields');
+    }
+  
+    try {
+      await sendMail(to, subject, template);
+  
+      res.send({ verfied: true });
+    } catch (error: any) {
+      handleError(error, res);
+    }
+  }
+}
\ No newline at end of file
diff --git a/server/src/controllers/auth/passkeyController.js b/server/src/controllers/auth/passkeyController.js
new file mode 100644
index 00000000..2cc69eb9
--- /dev/null
+++ b/server/src/controllers/auth/passkeyController.js
@@ -0,0 +1,199 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const server_1 = require("@simplewebauthn/server");
+const config_1 = require("../../config");
+const models_1 = require("../../models");
+const error_1 = require("../../lib/error");
+class PasskeyController {
+    static async handleRegisterStart(req, res, next) {
+        const { email } = req.body;
+        if (!email) {
+            return next(new error_1.CustomError('Email empty', 400));
+        }
+        let user = await models_1.users.getByEmail(email);
+        let existingUserPasskeys = [];
+        if (user) {
+            existingUserPasskeys = await models_1.passkeys.getAllByUserId(user.id);
+        }
+        try {
+            const options = await (0, server_1.generateRegistrationOptions)({
+                rpName: config_1.rpName,
+                rpID: config_1.rpID,
+                userName: email,
+                timeout: 60000,
+                attestationType: 'direct',
+                // attestationType: 'none',
+                excludeCredentials: existingUserPasskeys.map(passkey => ({
+                    id: passkey.id,
+                    transports: passkey.transports,
+                })),
+                authenticatorSelection: {
+                    residentKey: 'preferred',
+                    userVerification: 'preferred',
+                },
+                // Support for the two most common algorithms: ES256, and RS256
+                supportedAlgorithmIDs: [-7, -257],
+            });
+            const session = await models_1.sessions.createToken({
+                currentChallengeOptions: options,
+                loggedInUser: { id: options.user.id, email: email },
+            }, 5 // 5 minutes expiration
+            );
+            res.send({ registrationOptions: options, token: session.token });
+        }
+        catch (error) {
+            next(error instanceof error_1.CustomError ? error : new error_1.CustomError('Internal Server Error: ' + error, 500));
+        }
+    }
+    static async handleRegisterFinish(req, res, next) {
+        const { body } = req;
+        const token = req.get('Authorization');
+        if (!token)
+            return next(new error_1.CustomError('Unauthorized. Authorization Header not found', 401));
+        const session = await models_1.sessions.validateToken(token);
+        if (!session)
+            return next(new error_1.CustomError('Unauthorized. Session not valid', 401));
+        if (!('currentChallengeOptions' in session.data) || !('loggedInUser' in session.data)) {
+            return next(new error_1.CustomError('Unauthorized. Session not valid', 401));
+        }
+        if (!session.data.currentChallengeOptions) {
+            return next(new error_1.CustomError('Current challenge is missing', 400));
+        }
+        if (!session.data.loggedInUser) {
+            return next(new error_1.CustomError('User ID is missing', 400));
+        }
+        const loggedInUser = session.data.loggedInUser;
+        const currentChallengeOptions = session.data.currentChallengeOptions;
+        const currentChallenge = currentChallengeOptions.challenge;
+        try {
+            const verification = await (0, server_1.verifyRegistrationResponse)({
+                response: body,
+                expectedChallenge: currentChallenge,
+                expectedOrigin: config_1.origin,
+                expectedRPID: [config_1.rpID, "localhost"],
+                requireUserVerification: false,
+            });
+            const { verified, registrationInfo } = verification;
+            if (!verified || !registrationInfo) {
+                return next(new error_1.CustomError('Verification failed', 400));
+            }
+            const user = await models_1.users.getById(loggedInUser.id);
+            if (!user) {
+                return next(new error_1.CustomError('User not found', 400));
+            }
+            const { credential, credentialDeviceType, credentialBackedUp } = registrationInfo;
+            const newPasskey = new models_1.PasskeyCredential({
+                id: credential.id,
+                publicKey: Buffer.from(credential.publicKey).toString('base64'),
+                userId: user.id,
+                webauthnUserID: currentChallengeOptions.user.id,
+                counter: credential.counter,
+                deviceType: credentialDeviceType,
+                transports: credential.transports,
+                backedUp: credentialBackedUp,
+            });
+            const passkey = await models_1.passkeys.create(newPasskey);
+            if (!passkey) {
+                return next(new error_1.CustomError('Credential Create failed', 400));
+            }
+            res.send({ verified: true });
+        }
+        catch (error) {
+            console.error(error);
+            next(error instanceof error_1.CustomError ? error : new error_1.CustomError('Internal Server Error', 500));
+        }
+    }
+    static async handleLoginStart(req, res, next) {
+        const { email } = req.body;
+        console.log('Login Start:', email);
+        try {
+            const user = await models_1.users.getByEmail(email);
+            if (!user) {
+                return next(new error_1.CustomError('User not found', 404));
+            }
+            const userPasskeys = await models_1.passkeys.getAllByUserId(user.id);
+            if (userPasskeys.length === 0) {
+                return next(new error_1.CustomError('No passkeys registered', 404));
+            }
+            const options = await (0, server_1.generateAuthenticationOptions)({
+                rpID: config_1.rpID,
+                timeout: 60000,
+                allowCredentials: [],
+                // allowCredentials: userPasskeys.map(passkey => ({
+                //     id: passkey.id,
+                //     transports: passkey.transports,
+                // })),
+                userVerification: 'preferred',
+            });
+            const session = await models_1.sessions.createToken({
+                currentChallengeOptions: options,
+                loggedInUser: { id: user.id, email: user.email },
+            }, 5 // 5 minutes expiration
+            );
+            res.send({ loginOptions: options, token: session.token });
+        }
+        catch (error) {
+            next(error instanceof error_1.CustomError ? error : new error_1.CustomError('Internal Server Error', 500));
+        }
+    }
+    static async handleLoginFinish(req, res, next) {
+        const { body } = req;
+        const token = req.get('Authorization');
+        if (!token)
+            return next(new error_1.CustomError('Unauthorized. Authorization Header not found', 401));
+        const session = await models_1.sessions.validateToken(token);
+        if (!session)
+            return next(new error_1.CustomError('Unauthorized. Session not valid', 401));
+        if (!('currentChallengeOptions' in session.data) || !('loggedInUser' in session.data)) {
+            return next(new error_1.CustomError('Unauthorized. Session not valid', 401));
+        }
+        if (!session.data.currentChallengeOptions) {
+            return next(new error_1.CustomError('Current challenge is missing', 400));
+        }
+        if (!session.data.loggedInUser) {
+            return next(new error_1.CustomError('User ID is missing', 400));
+        }
+        const loggedInUser = session.data.loggedInUser;
+        const currentChallengeOptions = session.data.currentChallengeOptions;
+        const currentChallenge = currentChallengeOptions.challenge;
+        const user = await models_1.users.getById(loggedInUser.id);
+        if (!user) {
+            return next(new error_1.CustomError('User not found', 404));
+        }
+        const userPasskey = await models_1.passkeys.getById(body.id);
+        if (!userPasskey || userPasskey.userId !== user.id) {
+            return next(new error_1.CustomError('Passkey not registered with this site', 404));
+        }
+        try {
+            const authenticationResponse = {
+                response: body,
+                expectedChallenge: currentChallenge,
+                expectedOrigin: config_1.origin,
+                expectedRPID: [config_1.rpID, "localhost"],
+                credential: {
+                    id: userPasskey.id,
+                    publicKey: models_1.PasskeyCredential.base64ToUint8Array(userPasskey.publicKey),
+                    counter: userPasskey.counter,
+                    transports: userPasskey.transports,
+                },
+            };
+            let verification = await (0, server_1.verifyAuthenticationResponse)(authenticationResponse);
+            const { verified, authenticationInfo } = verification;
+            if (verified) {
+                await models_1.passkeys.updateCounter(userPasskey.id, authenticationInfo.newCounter);
+                const sessionData = {
+                    userId: user.id,
+                };
+                const { token } = await models_1.sessions.createToken(sessionData);
+                res.send({ verified: true, user: user, token: token });
+            }
+            else {
+                next(new error_1.CustomError('Verification failed', 400));
+            }
+        }
+        catch (error) {
+            next(error instanceof error_1.CustomError ? error : new error_1.CustomError('Internal Server Error' + error, 500));
+        }
+    }
+}
+exports.default = PasskeyController;
diff --git a/server/src/controllers/auth/passkeyController.ts b/server/src/controllers/auth/passkeyController.ts
new file mode 100644
index 00000000..329542a2
--- /dev/null
+++ b/server/src/controllers/auth/passkeyController.ts
@@ -0,0 +1,232 @@
+import { Request, Response, NextFunction } from 'express';
+import { generateRegistrationOptions, verifyRegistrationResponse, generateAuthenticationOptions, verifyAuthenticationResponse } from '@simplewebauthn/server';
+import { RegistrationResponseJSON, PublicKeyCredentialRequestOptionsJSON } from "@simplewebauthn/typescript-types";
+import { rpName, rpID, origin } from '../../config';
+import { users, passkeys, sessions, PasskeyCredential, AuthSessionData } from '../../models';
+import { CustomError } from '../../lib/error';
+
+export default class PasskeyController {
+
+  static async handleRegisterStart(req: Request, res: Response, next: NextFunction) {
+    const {email} = req.body;
+
+    if (!email) {
+      return next(new CustomError('Email empty', 400));
+    }
+
+    let user = await users.getByEmail(email);
+    let existingUserPasskeys: PasskeyCredential[] = [];
+    if (user) {
+      existingUserPasskeys = await passkeys.getAllByUserId(user.id);
+    }
+
+    try {
+      const options: PublicKeyCredentialCreationOptionsJSON = await generateRegistrationOptions({
+        rpName,
+        rpID,
+        userName: email,
+        timeout: 60000,
+        attestationType: 'direct',
+        // attestationType: 'none',
+        excludeCredentials: existingUserPasskeys.map(passkey => ({
+          id: passkey.id,
+          transports: passkey.transports,
+        })),
+        authenticatorSelection: {
+          residentKey: 'preferred',
+          userVerification: 'preferred',
+        },
+        // Support for the two most common algorithms: ES256, and RS256
+        supportedAlgorithmIDs: [-7, -257],
+      });
+
+      const session = await sessions.createToken(
+        {
+          currentChallengeOptions: options,
+          loggedInUser: {id: options.user.id, email: email},
+        },
+        5 // 5 minutes expiration
+      ); 
+
+      res.send({ registrationOptions: options, token: session.token });
+    } catch (error) {
+      next(error instanceof CustomError ? error : new CustomError('Internal Server Error: ' + error, 500));
+    }
+  }
+
+  static async handleRegisterFinish(req: Request, res: Response, next: NextFunction) {
+    const { body } = req;
+
+    const token = req.get('Authorization');    
+    if (!token) return next(new CustomError('Unauthorized. Authorization Header not found', 401));
+
+    const session = await sessions.validateToken(token);
+    if (!session) return next(new CustomError('Unauthorized. Session not valid', 401));
+    
+    if (!('currentChallengeOptions' in session.data) || !('loggedInUser' in session.data)) {
+      return next(new CustomError('Unauthorized. Session not valid', 401));
+    }
+
+    if (!session.data.currentChallengeOptions) {
+      return next(new CustomError('Current challenge is missing', 400));
+    }
+
+    if (!session.data.loggedInUser) {
+      return next(new CustomError('User ID is missing', 400));
+    }
+
+    const loggedInUser = session.data.loggedInUser;
+    const currentChallengeOptions = session.data.currentChallengeOptions as PublicKeyCredentialCreationOptionsJSON;
+    const currentChallenge = currentChallengeOptions.challenge;
+
+    try {
+      const verification = await verifyRegistrationResponse({
+        response: body as RegistrationResponseJSON,
+        expectedChallenge: currentChallenge,
+        expectedOrigin: origin,
+        expectedRPID: [rpID, "localhost"],
+        requireUserVerification: false,
+      });
+
+      const { verified, registrationInfo } = verification;
+      if (!verified || !registrationInfo) {
+        return next(new CustomError('Verification failed', 400));
+      }
+
+      const user = await users.getById(loggedInUser.id);
+      if (!user) {
+        return next(new CustomError('User not found', 400));
+      }
+      
+      const { credential, credentialDeviceType, credentialBackedUp } = registrationInfo;
+      const newPasskey = new PasskeyCredential({
+        id: credential.id,
+        publicKey: Buffer.from(credential.publicKey).toString('base64'),
+        userId: user.id,
+        webauthnUserID: currentChallengeOptions.user.id,
+        counter: credential.counter,
+        deviceType: credentialDeviceType,
+        transports: credential.transports,
+        backedUp: credentialBackedUp,
+      });
+      const passkey = await passkeys.create(newPasskey);
+
+      if (!passkey) {
+          return next(new CustomError('Credential Create failed', 400));
+      }
+
+      res.send({verified: true});
+    } catch (error) {
+      console.error(error)
+      next(error instanceof CustomError ? error : new CustomError('Internal Server Error', 500));
+    }
+  }
+
+  static async handleLoginStart(req: Request, res: Response, next: NextFunction) {
+    const { email } = req.body;
+    console.log('Login Start:', email);
+
+    try {
+        const user = await users.getByEmail(email);
+
+        if (!user) {
+            return next(new CustomError('User not found', 404));
+        }
+
+        const userPasskeys: PasskeyCredential[] = await passkeys.getAllByUserId(user.id);
+        if (userPasskeys.length === 0) {
+            return next(new CustomError('No passkeys registered', 404));
+        }
+        
+        const options: PublicKeyCredentialRequestOptionsJSON = await generateAuthenticationOptions({
+            rpID,
+            timeout: 60000,
+            allowCredentials: [],
+            // allowCredentials: userPasskeys.map(passkey => ({
+            //     id: passkey.id,
+            //     transports: passkey.transports,
+            // })),
+            userVerification: 'preferred',
+        });
+
+        const session = await sessions.createToken(
+            {
+            currentChallengeOptions: options,
+            loggedInUser: {id: user.id, email: user.email},
+            },
+            5 // 5 minutes expiration
+        ); 
+
+        res.send({ loginOptions: options, token: session.token });
+    } catch (error) {
+        next(error instanceof CustomError ? error : new CustomError('Internal Server Error', 500));
+    }
+  }
+
+  static async handleLoginFinish(req: Request, res: Response, next: NextFunction) {
+    const { body } = req;
+    const token = req.get('Authorization');    
+    if (!token) return next(new CustomError('Unauthorized. Authorization Header not found', 401));
+
+    const session = await sessions.validateToken(token);
+    if (!session) return next(new CustomError('Unauthorized. Session not valid', 401));
+    
+    if (!('currentChallengeOptions' in session.data) || !('loggedInUser' in session.data)) {
+        return next(new CustomError('Unauthorized. Session not valid', 401));
+    }
+
+    if (!session.data.currentChallengeOptions) {
+        return next(new CustomError('Current challenge is missing', 400));
+    }
+
+    if (!session.data.loggedInUser) {
+        return next(new CustomError('User ID is missing', 400));
+    }
+
+    const loggedInUser = session.data.loggedInUser;
+    const currentChallengeOptions = session.data.currentChallengeOptions as PublicKeyCredentialCreationOptionsJSON;
+    const currentChallenge = currentChallengeOptions.challenge;
+    const user = await users.getById(loggedInUser.id);
+    if (!user) {
+        return next(new CustomError('User not found', 404));
+    }
+    const userPasskey = await passkeys.getById(body.id);
+    if (!userPasskey || userPasskey.userId !== user.id) {
+        return next(new CustomError('Passkey not registered with this site', 404));
+    }
+
+    try {
+        const authenticationResponse = {
+            response: body,
+            expectedChallenge: currentChallenge,
+            expectedOrigin: origin,
+            expectedRPID: [rpID, "localhost"],
+            credential: {
+                id: userPasskey.id,
+                publicKey: PasskeyCredential.base64ToUint8Array(userPasskey.publicKey),
+                counter: userPasskey.counter,
+                transports: userPasskey.transports,
+            },
+        };
+        let verification = await verifyAuthenticationResponse(authenticationResponse);
+
+        const { verified, authenticationInfo } = verification;
+
+        if (verified) {
+            await passkeys.updateCounter(
+                userPasskey.id,
+                authenticationInfo.newCounter
+            );
+            const sessionData: AuthSessionData = {
+                userId: user.id,
+            }
+            const { token }  = await sessions.createToken(sessionData);
+            res.send({ verified: true, user: user, token: token });
+        } else {
+            next(new CustomError('Verification failed', 400));
+        }
+    } catch (error) {
+        next(error instanceof CustomError ? error : new CustomError('Internal Server Error' + error, 500));
+    }
+  }
+}
\ No newline at end of file
diff --git a/server/src/controllers/auth/session.js b/server/src/controllers/auth/session.js
new file mode 100644
index 00000000..94f696d8
--- /dev/null
+++ b/server/src/controllers/auth/session.js
@@ -0,0 +1,41 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.handleLogout = exports.handleGetSession = void 0;
+const models_1 = require("../../models");
+const handleGetSession = async (req, res, next) => {
+    try {
+        const authHeader = req.get('Authorization');
+        let authToken = authHeader;
+        if (!authToken) {
+            const { token } = await models_1.sessions.createToken({
+                userId: '',
+            });
+            authToken = token;
+        }
+        const session = await models_1.sessions.validateToken(authToken);
+        if (!session) {
+            res.status(401).json({ error: 'Unauthorized. Session not valid' });
+            return;
+        }
+        if (!('userId' in session.data)) {
+            res.status(401).json({ error: 'Unauthorized. User not Found' });
+            return;
+        }
+        const loggedIn = session.data.userId != '';
+        res.status(200).json(session);
+    }
+    catch (e) {
+        console.error(e);
+        res.status(400).json(e.error);
+    }
+};
+exports.handleGetSession = handleGetSession;
+const handleLogout = async (req, res) => {
+    try {
+        // Todo: Invalidate the session token
+    }
+    catch (error) {
+        res.status(500).send({ message: 'Logout failed', error });
+    }
+};
+exports.handleLogout = handleLogout;
diff --git a/server/src/controllers/auth/session.ts b/server/src/controllers/auth/session.ts
new file mode 100644
index 00000000..3fd34927
--- /dev/null
+++ b/server/src/controllers/auth/session.ts
@@ -0,0 +1,38 @@
+import { Request, Response, NextFunction } from 'express';
+import { sessions } from '../../models';
+
+export const handleGetSession = async (req: Request, res: Response, next: NextFunction) => {
+    try {
+    const authHeader = req.get('Authorization');
+    let authToken = authHeader as string;
+    if (!authToken) {
+      const { token } = await sessions.createToken({
+        userId: '',
+      });
+      authToken = token;
+    }
+    const session = await sessions.validateToken(authToken);
+
+    if (!session) {
+      res.status(401).json({ error: 'Unauthorized. Session not valid' });
+      return;
+    }
+    if (!('userId' in session.data)) {
+        res.status(401).json({ error: 'Unauthorized. User not Found' });
+        return;
+    }
+    const loggedIn = session.data.userId != '';
+    res.status(200).json(session);
+  } catch(e: any) {
+    console.error(e);
+    res.status(400).json(e.error);
+  }
+}
+
+export const handleLogout = async (req: Request, res: Response) => {
+  try {
+    // Todo: Invalidate the session token
+  } catch (error) {
+    res.status(500).send({ message: 'Logout failed', error });
+  }
+};
\ No newline at end of file
diff --git a/server/src/controllers/profileController.ts b/server/src/controllers/profileController.ts
new file mode 100644
index 00000000..3d89d2eb
--- /dev/null
+++ b/server/src/controllers/profileController.ts
@@ -0,0 +1,121 @@
+import { Request, Response } from 'express';
+import { profiles } from '../models';
+import { RequestWithSession } from '../middleware';
+
+export default class ProfileController {
+
+  static async GetAllProfiles(req: Request, res: Response) {
+    try {
+        const allProfiles = await profiles.getAll();
+        res.status(200).json(allProfiles);
+    } catch(e: any) {
+        console.error(e);
+        res.status(500).json({ error: e.message });
+    }
+  }
+
+  static async GetAllProfilesForUser(req: Request, res: Response) {
+    try {
+      const { userId } = req.session;
+
+      const userProfiles = await profiles.getAllByUserId(userId);
+      res.status(200).json(userProfiles);
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+
+  static async GetProfileById(req: Request, res: Response) {
+    try {
+        const profileId = req.params.id;
+        const profile = await profiles.getById(profileId);
+        
+        if (profile) 
+          res.status(200).json(profile);
+        else 
+          res.status(404).json({ error: 'Profile not found' });
+    } catch(e: any) {
+        console.error(e);
+        res.status(500).json({ error: e.message });
+    }
+  }
+
+  static async CreateProfile(req: Request, res: Response) {
+    const formData = req.body;
+    try {
+      const { userId } = req.session;
+
+      const result = await profiles.create({
+        ...formData,
+        userId
+      });
+      
+      if (result) 
+        res.status(200).json(result);
+      else 
+        res.status(400).json({ error: 'Could not create profile' });
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+
+  static async UpdateProfile(req: Request, res: Response) {
+    const formData = req.body;
+    try {
+      const { userId } = req.session;
+
+      // TODO: Ensure the profile belongs to the authenticated user
+      const userProfiles = await profiles.getAllByUserId(userId);
+      const profileBelongsToUser = userProfiles.some(profile => profile.id === formData.id);
+      
+      if (!profileBelongsToUser) {
+        res.status(403).json({ error: 'Forbidden - Profile does not belong to user' });
+        return;
+      }
+
+      const result = await profiles.update(formData.id, formData);
+      
+      if (result) 
+        res.status(200).json(result);
+      else 
+        res.status(404).json({ error: 'Profile not found' });
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+
+  static async DeleteProfile(req: Request, res: Response) {
+    try {
+      const { userId } = req.session;
+      
+      const profileId = req.query.id as string;
+      
+      if (!profileId) {
+        res.status(400).json({ error: 'Profile ID is required' });
+        return;
+      }
+      
+      // Ensure the profile belongs to the authenticated user
+      const userProfiles = await profiles.getAllByUserId(userId);
+      const profileBelongsToUser = userProfiles.some(profile => profile.id === profileId);
+      
+      if (!profileBelongsToUser) {
+        res.status(403).json({ error: 'Forbidden - Profile does not belong to user' });
+        return;
+      }
+
+      const result = await profiles.delete(profileId);
+      
+      if (result) 
+        res.status(200).json({ success: 'Profile deleted' });
+      else 
+        res.status(404).json({ error: 'Profile not found' });
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+}
diff --git a/server/src/controllers/userController.js b/server/src/controllers/userController.js
new file mode 100644
index 00000000..92b0050a
--- /dev/null
+++ b/server/src/controllers/userController.js
@@ -0,0 +1,62 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const models_1 = require("../models");
+class UserController {
+    static async GetUsers(req, res) {
+        try {
+            res.status(403).json({ error: 'Forbidden' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    static async GetUser(req, res) {
+        try {
+            const { userId } = req.session;
+            let user = await models_1.users.getById(userId, { include: { profiles: true } });
+            if (user)
+                res.status(200).json(user);
+            else
+                res.status(404).json({ error: 'User not found' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    static async UpdateUser(req, res) {
+        const formData = req.body;
+        try {
+            const { userId } = req.session;
+            const result = await models_1.users.update(userId, {
+                image: formData.image || '/images/default.jpeg',
+                emailVerified: formData.emailVerified,
+            });
+            if (result)
+                res.status(200).json(result);
+            else
+                res.status(404).json({ error: 'User not found' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+    // TODO: Cascading delete   
+    static async DeleteUser(req, res) {
+        try {
+            const { userId } = req.session;
+            const result = await models_1.users.delete(userId);
+            if (result)
+                res.status(200).json({ success: 'User deleted' });
+            else
+                res.status(404).json({ error: 'User not found' });
+        }
+        catch (e) {
+            console.error(e);
+            res.status(500).json({ error: e.message });
+        }
+    }
+}
+exports.default = UserController;
diff --git a/server/src/controllers/userController.ts b/server/src/controllers/userController.ts
new file mode 100644
index 00000000..e0d86727
--- /dev/null
+++ b/server/src/controllers/userController.ts
@@ -0,0 +1,66 @@
+import { Request, Response } from 'express';
+import { users } from '../models';
+import { RequestWithSession } from '../middleware';
+
+export default class UserController {
+
+  static async GetUsers(req: Request, res: Response) {
+    try {
+      res.status(403).json({ error: 'Forbidden' });
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+
+  static async GetUser(req: Request, res: Response) {
+    try {
+      const { userId } = req.session;
+
+      let user = await users.getById(userId, { include: { profiles: true } });
+      if (user)
+        res.status(200).json(user);
+      else 
+        res.status(404).json({ error: 'User not found' });
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+
+  static async UpdateUser(req: Request, res: Response) {
+    const formData = req.body;
+    try {
+      const { userId } = req.session;
+
+      const result = await users.update(userId, {
+        image: formData.image || '/images/default.jpeg',
+        emailVerified: formData.emailVerified,
+      });
+
+      if (result)
+        res.status(200).json(result);
+      else 
+        res.status(404).json({ error: 'User not found' });
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+
+  // TODO: Cascading delete   
+  static async DeleteUser(req: Request, res: Response) {
+    try {
+      const { userId } = req.session;
+
+      const result = await users.delete(userId);
+      if (result) 
+        res.status(200).json({ success: 'User deleted' });
+      else 
+        res.status(404).json({ error: 'User not found' });
+    } catch(e: any) {
+      console.error(e);
+      res.status(500).json({ error: e.message });
+    }
+  }
+}
diff --git a/server/src/gun.js b/server/src/gun.js
new file mode 100644
index 00000000..793f939e
--- /dev/null
+++ b/server/src/gun.js
@@ -0,0 +1,19 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.initGun = initGun;
+exports.getGun = getGun;
+const gun_1 = __importDefault(require("gun"));
+let gun;
+function initGun(server) {
+    gun = (0, gun_1.default)({ web: server, file: 'ra-data' });
+    return gun;
+}
+function getGun() {
+    if (!gun) {
+        throw new Error('Gun has not been initialized. Call initGun(server) first.');
+    }
+    return gun;
+}
diff --git a/server/src/lib/Model/genericObject.js b/server/src/lib/Model/genericObject.js
new file mode 100644
index 00000000..71db3b5f
--- /dev/null
+++ b/server/src/lib/Model/genericObject.js
@@ -0,0 +1,9 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.GenericObject = void 0;
+class GenericObject {
+    constructor(id) {
+        this.id = id;
+    }
+}
+exports.GenericObject = GenericObject;
diff --git a/server/src/lib/Model/genericObject.ts b/server/src/lib/Model/genericObject.ts
new file mode 100644
index 00000000..e6b7d79f
--- /dev/null
+++ b/server/src/lib/Model/genericObject.ts
@@ -0,0 +1,8 @@
+import { Uuid, GenericObject as IGenericObject } from '@tribelike/types/Uuid';
+
+export class GenericObject implements IGenericObject {
+    id: Uuid;
+    constructor(id: Uuid) {
+        this.id = id;
+    }
+}
diff --git a/server/src/lib/Model/index.js b/server/src/lib/Model/index.js
new file mode 100644
index 00000000..2ef6942b
--- /dev/null
+++ b/server/src/lib/Model/index.js
@@ -0,0 +1,19 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./types/ModelOptions"), exports);
+__exportStar(require("./genericObject"), exports);
+__exportStar(require("./model"), exports);
diff --git a/server/src/lib/Model/index.ts b/server/src/lib/Model/index.ts
new file mode 100644
index 00000000..9863b534
--- /dev/null
+++ b/server/src/lib/Model/index.ts
@@ -0,0 +1,3 @@
+export * from './types/ModelOptions';
+export * from './genericObject';
+export * from './model';
\ No newline at end of file
diff --git a/server/src/lib/Model/model.js b/server/src/lib/Model/model.js
new file mode 100644
index 00000000..7f96e743
--- /dev/null
+++ b/server/src/lib/Model/model.js
@@ -0,0 +1,53 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.Model = void 0;
+const uuid_1 = require("uuid");
+class Model {
+    constructor(store, options = {
+        getAll: true,
+        create: true,
+        getById: true,
+        update: true,
+        delete: true
+    }) {
+        this.store = store;
+        this.options = options;
+    }
+    async clear() {
+        await this.store.clear();
+    }
+    async getAll(filter = {}, limit) {
+        if (!this.options.getAll)
+            throw new Error('Method not available');
+        return await this.store.getAll(filter, limit);
+    }
+    async create(item) {
+        if (!this.options.create)
+            throw new Error('Method not available');
+        item.id = item.id || (0, uuid_1.v4)();
+        try {
+            return await this.store.create(item);
+        }
+        catch (error) {
+            console.error('Error creating item:', error);
+            return null;
+        }
+    }
+    async getById(id, include = {}) {
+        if (!this.options.getById)
+            throw new Error('Method not available');
+        const item = await this.store.getById(id, include);
+        return item;
+    }
+    async update(id, updatedItem) {
+        if (!this.options.update)
+            throw new Error('Method not available');
+        return await this.store.update(id, updatedItem);
+    }
+    async delete(id) {
+        if (!this.options.delete)
+            throw new Error('Method not available');
+        return await this.store.delete(id);
+    }
+}
+exports.Model = Model;
diff --git a/server/src/lib/Model/model.ts b/server/src/lib/Model/model.ts
new file mode 100644
index 00000000..698e5784
--- /dev/null
+++ b/server/src/lib/Model/model.ts
@@ -0,0 +1,57 @@
+import { Uuid } from '@tribelike/types/Uuid';
+import { v4 as uuidv4 } from 'uuid';
+import { IStore } from '../Store';
+import { ModelOptions } from './types/ModelOptions';
+import { GenericObject } from './genericObject';
+
+export class Model<T extends GenericObject> {
+    public store: IStore<T>;
+    private options: ModelOptions;
+
+    constructor(store: IStore<T>, options: ModelOptions = {
+        getAll: true,
+        create: true,
+        getById: true,
+        update: true,
+        delete: true
+    }) {
+        this.store = store;
+        this.options = options;
+    }
+
+    public async clear(): Promise<void> {
+        await this.store.clear();
+    }
+
+    public async getAll(filter: any = {}, limit?: number): Promise<T[]> {
+        if (!this.options.getAll) throw new Error('Method not available');
+        return await this.store.getAll(filter, limit);
+    }
+
+    public async create(item: Partial<T>): Promise<T | null> {
+        if (!this.options.create) throw new Error('Method not available');
+        item.id = item.id || uuidv4() as Uuid;
+        try {
+            return await this.store.create(item as T);
+        } catch (error) {
+            console.error('Error creating item:', error);
+            return null;
+        }
+    }
+
+    public async getById(id: Uuid, include: any = {}): Promise<T | null> {
+        if (!this.options.getById) throw new Error('Method not available');
+        const item = await this.store.getById(id, include);
+        return item;
+    }
+
+    public async update(id: Uuid, updatedItem: Partial<T>): Promise<T | null> {
+        if (!this.options.update) throw new Error('Method not available');
+        return await this.store.update(id, updatedItem);
+    }
+
+    public async delete(id: Uuid): Promise<boolean> {
+        if (!this.options.delete) throw new Error('Method not available');
+        return await this.store.delete(id);
+    }
+}
diff --git a/server/src/lib/Model/types/ModelOptions.js b/server/src/lib/Model/types/ModelOptions.js
new file mode 100644
index 00000000..c8ad2e54
--- /dev/null
+++ b/server/src/lib/Model/types/ModelOptions.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/server/src/lib/Model/types/ModelOptions.ts b/server/src/lib/Model/types/ModelOptions.ts
new file mode 100644
index 00000000..55759947
--- /dev/null
+++ b/server/src/lib/Model/types/ModelOptions.ts
@@ -0,0 +1,7 @@
+export interface ModelOptions {
+    getAll?: boolean;
+    create?: boolean;
+    getById?: boolean;
+    update?: boolean;
+    delete?: boolean;
+}
diff --git a/server/src/lib/Store/fileStore.js b/server/src/lib/Store/fileStore.js
new file mode 100644
index 00000000..69f9a789
--- /dev/null
+++ b/server/src/lib/Store/fileStore.js
@@ -0,0 +1,61 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.FileStore = void 0;
+const fs_1 = __importDefault(require("fs"));
+const path_1 = __importDefault(require("path"));
+const jsonl_parse_stringify_1 = __importDefault(require("jsonl-parse-stringify"));
+const memoryStore_1 = require("./memoryStore");
+const config_1 = require("../../config");
+class FileStore extends memoryStore_1.MemoryStore {
+    constructor(modelName, options) {
+        const dataPath = path_1.default.join(config_1.dataFolder, modelName);
+        fs_1.default.mkdirSync(dataPath, { recursive: true });
+        super(modelName, options);
+        this.dataPath = dataPath;
+        this.load();
+    }
+    async load() {
+        try {
+            const files = fs_1.default.readdirSync(this.dataPath);
+            for (const file of files) {
+                if (file.endsWith('.jsonl')) {
+                    const content = fs_1.default.readFileSync(path_1.default.join(this.dataPath, file), 'utf8');
+                    const items = jsonl_parse_stringify_1.default.parse(content);
+                    items.forEach(item => this.items.set(item.id, item));
+                }
+            }
+        }
+        catch (err) {
+            console.error(`Error reading data for ${this.dataPath}:`, err);
+        }
+    }
+    async saveItem(item) {
+        try {
+            const dataString = jsonl_parse_stringify_1.default.stringify([item]);
+            fs_1.default.writeFileSync(path_1.default.join(this.dataPath, `${item.id}.jsonl`), dataString, { encoding: 'utf8', flush: true });
+        }
+        catch (err) {
+            console.error(`Error saving item ${item.id} for ${this.dataPath}:`, err);
+        }
+    }
+    async deleteItem(id) {
+        try {
+            if (fs_1.default.statSync(path_1.default.join(this.dataPath, `${id}.jsonl`))) {
+                fs_1.default.unlinkSync(path_1.default.join(this.dataPath, `${id}.jsonl`));
+                return true;
+            }
+            else {
+                console.warn(`File ${id}.jsonl does not exist for ${this.dataPath}`);
+                return false;
+            }
+        }
+        catch (err) {
+            console.error(`Error deleting item ${id} for ${this.dataPath}:`, err);
+            return false;
+        }
+    }
+}
+exports.FileStore = FileStore;
diff --git a/server/src/lib/Store/fileStore.ts b/server/src/lib/Store/fileStore.ts
new file mode 100644
index 00000000..7f5f9bbc
--- /dev/null
+++ b/server/src/lib/Store/fileStore.ts
@@ -0,0 +1,59 @@
+import fs from 'fs';
+import path from 'path';
+import JSONL from "jsonl-parse-stringify";
+import { Uuid, GenericObject } from '@tribelike/types/Uuid';
+import { StoreOptions, IStore } from './types/Store';
+import { MemoryStore } from './memoryStore';
+import { dataFolder } from '../../config';
+
+export class FileStore<T extends GenericObject> extends MemoryStore<T> implements IStore<T> {
+    private dataPath: string;
+
+    constructor(modelName: string, options?: StoreOptions<T>) {
+        const dataPath = path.join(dataFolder, modelName);
+        fs.mkdirSync(dataPath, { recursive: true });
+
+        super(modelName, options);
+        this.dataPath = dataPath;
+        this.load();
+    }
+
+    protected async load(): Promise<void> {
+        try {
+            const files = fs.readdirSync(this.dataPath);
+            for (const file of files) {
+                if (file.endsWith('.jsonl')) {
+                    const content = fs.readFileSync(path.join(this.dataPath, file), 'utf8');
+                    const items: T[] = JSONL.parse<T>(content);
+                    items.forEach(item => this.items.set(item.id as Uuid, item as T));
+                }
+            }
+        } catch (err) {
+            console.error(`Error reading data for ${this.dataPath}:`, err);
+        }
+    }
+
+    protected async saveItem(item: T): Promise<void> {
+        try {
+            const dataString = JSONL.stringify([item]);
+            fs.writeFileSync(path.join(this.dataPath, `${item.id}.jsonl`), dataString, { encoding: 'utf8', flush: true });
+        } catch (err) {
+            console.error(`Error saving item ${item.id} for ${this.dataPath}:`, err);
+        }
+    }
+
+    protected async deleteItem(id: Uuid): Promise<boolean> {
+        try {
+            if (fs.statSync(path.join(this.dataPath, `${id}.jsonl`))) {
+                fs.unlinkSync(path.join(this.dataPath, `${id}.jsonl`));
+                return true;
+            }  else {
+                console.warn(`File ${id}.jsonl does not exist for ${this.dataPath}`);
+                return false;
+            }
+        } catch (err) {
+            console.error(`Error deleting item ${id} for ${this.dataPath}:`, err);
+            return false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/server/src/lib/Store/index.js b/server/src/lib/Store/index.js
new file mode 100644
index 00000000..3adcca56
--- /dev/null
+++ b/server/src/lib/Store/index.js
@@ -0,0 +1,21 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./types/Store"), exports);
+__exportStar(require("./store"), exports);
+__exportStar(require("./memoryStore"), exports);
+__exportStar(require("./fileStore"), exports);
+__exportStar(require("./prismaStore"), exports);
diff --git a/server/src/lib/Store/index.ts b/server/src/lib/Store/index.ts
new file mode 100644
index 00000000..a770476c
--- /dev/null
+++ b/server/src/lib/Store/index.ts
@@ -0,0 +1,5 @@
+export * from './types/Store';
+export * from './store';
+export * from './memoryStore';
+export * from './fileStore';
+export * from './prismaStore';
\ No newline at end of file
diff --git a/server/src/lib/Store/memoryStore.js b/server/src/lib/Store/memoryStore.js
new file mode 100644
index 00000000..702564c7
--- /dev/null
+++ b/server/src/lib/Store/memoryStore.js
@@ -0,0 +1,154 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MemoryStore = void 0;
+const inspector_1 = require("inspector");
+class MemoryStore {
+    constructor(name, options) {
+        this.items = new Map();
+        this.relatedStores = {};
+        this.indexKeys = [];
+        this.indexes = {};
+        this.name = name;
+        this.itemConstructor = options?.constructor || Object;
+    }
+    async debug() {
+        inspector_1.console.log('Debug Info:');
+        inspector_1.console.log('Items:', Array.from(this.items.values()));
+        inspector_1.console.log('Indexes:', this.indexes);
+        inspector_1.console.log('Related Stores:', this.relatedStores);
+    }
+    // Add method to register related stores
+    setRelatedStore(key, store) {
+        this.relatedStores[key] = store;
+    }
+    async index(key) {
+        if (typeof key === 'string' && !this.indexKeys.includes(key)) {
+            this.indexKeys.push(key);
+            this.indexes[key] = new Map();
+            this.items.forEach(item => {
+                this.indexes[key]?.set(item[key], item.id);
+            });
+            return true;
+        }
+        return false;
+    }
+    async clear() {
+        this.items.forEach((item, id) => {
+            this.deleteItem(id);
+        });
+        this.items.clear();
+        for (const key of this.indexKeys) {
+            this.indexes[key] = new Map();
+        }
+    }
+    async includeRelatedData(item, include) {
+        for (const key of Object.keys(include)) {
+            const relatedStore = this.relatedStores[key];
+            if (relatedStore) {
+                const relationFieldName = this.name.toLowerCase() + 'Id';
+                const filter = { [`${relationFieldName}`]: item.id };
+                const relatedItems = await relatedStore.getAll(filter);
+                if (item[key] && typeof item[key] === 'object') {
+                    item[key] = relatedItems;
+                }
+            }
+        }
+        return item;
+    }
+    async getAll(filter = {}, include = {}, limit) {
+        // TODO: use index if filter given
+        const items = Array.from(this.items.values());
+        const filteredItems = items.filter(item => {
+            return Object.keys(filter).every(key => item[key] === filter[key]);
+        });
+        const result = limit ? filteredItems.slice(0, limit) : filteredItems;
+        return result.map(item => this.instantiate(item));
+    }
+    async create(newData) {
+        await this.saveItem(newData);
+        this.items.set(newData.id, newData);
+        await this.setIndexes(newData.id, newData);
+        return this.instantiate(this.items.get(newData.id));
+    }
+    async getById(id, include = {}) {
+        const item = this.items.get(id);
+        if (!item)
+            return null;
+        const instance = this.instantiate(item);
+        inspector_1.console.log('Include:', include, this.name);
+        if (include) {
+            await this.includeRelatedData(instance, include);
+        }
+        return instance;
+    }
+    async getBy(key, value) {
+        const index = this.indexes[key];
+        if (index) {
+            const id = index.get(value);
+            if (!id)
+                return null;
+            const item = this.items.get(id);
+            if (!item)
+                return null;
+            return this.instantiate(item);
+        }
+        else {
+            throw new Error(`Index for key "${String(key)}" not found in store "${this.name}".`);
+        }
+    }
+    async update(id, newData) {
+        const existingItem = this.items.get(id);
+        if (existingItem) {
+            const updatedData = { ...existingItem, ...newData };
+            await this.saveItem(updatedData);
+            this.items.set(id, updatedData);
+            await this.setIndexes(id, newData);
+            const result = await this.getById(updatedData.id);
+            return result;
+        }
+        return null;
+    }
+    async delete(id) {
+        const item = this.items.get(id);
+        if (!item)
+            return false;
+        await this.removeIndexes(id, item);
+        const success = this.items.delete(id);
+        if (!success)
+            return false;
+        return await this.deleteItem(id);
+    }
+    async setIndexes(id, newData) {
+        for (const key of this.indexKeys) {
+            if (typeof key === 'string') {
+                const value = newData[key];
+                if (value) {
+                    this.indexes[key]?.set(value, id);
+                }
+            }
+        }
+    }
+    async removeIndexes(id, data) {
+        for (const key of this.indexKeys) {
+            if (typeof key === 'string') {
+                this.indexes[key]?.delete(data[key]);
+            }
+        }
+    }
+    instantiate(data) {
+        if (this.itemConstructor === Object)
+            return data;
+        const instance = new this.itemConstructor();
+        return Object.assign(instance, data);
+    }
+    async load() {
+        return;
+    }
+    async saveItem(item) {
+        return;
+    }
+    async deleteItem(id) {
+        return true;
+    }
+}
+exports.MemoryStore = MemoryStore;
diff --git a/server/src/lib/Store/memoryStore.ts b/server/src/lib/Store/memoryStore.ts
new file mode 100644
index 00000000..20e85e78
--- /dev/null
+++ b/server/src/lib/Store/memoryStore.ts
@@ -0,0 +1,169 @@
+import { console } from 'inspector';
+import { StoreOptions, IStore } from './types/Store';
+import { Uuid, GenericObject } from '@tribelike/types/Uuid';
+
+export class MemoryStore<T extends GenericObject> implements IStore<T> {
+    public name: string;
+    protected items: Map<Uuid, T> = new Map();
+    protected itemConstructor: new (...args: any[]) => T;
+    private relatedStores: Record<string, IStore<any>> = {};
+    private indexKeys: (keyof T)[] = [];
+    private indexes: Partial<Record<keyof T, Map<string, Uuid>>> = {};
+
+    constructor(name: string, options?: StoreOptions<T>) {
+        this.name = name;
+        this.itemConstructor = options?.constructor || Object as any;
+    }
+
+    public async debug(): Promise<void> {
+        console.log('Debug Info:');
+        console.log('Items:', Array.from(this.items.values()));
+        console.log('Indexes:', this.indexes);
+        console.log('Related Stores:', this.relatedStores);
+    }
+
+    // Add method to register related stores
+    public setRelatedStore(key: string, store: IStore<any>): void {
+        this.relatedStores[key] = store;
+    }
+
+    public async index(key: keyof T): Promise<boolean> {
+        if (typeof key === 'string' && !this.indexKeys.includes(key)) {
+            this.indexKeys.push(key);
+            this.indexes[key] = new Map();
+            this.items.forEach(item => {
+                this.indexes[key]?.set(item[key] as string, item.id);
+            });
+            return true;
+        }
+        return false;
+    }
+
+    async clear(): Promise<void> {
+        this.items.forEach((item: T, id: Uuid) => {
+            this.deleteItem(id);
+        });
+        this.items.clear();
+        for (const key of this.indexKeys) {
+            this.indexes[key] = new Map();
+        }
+    }
+
+    private async includeRelatedData(item: T, include: any): Promise<T> {
+        for (const key of Object.keys(include)) {
+            const relatedStore = this.relatedStores[key];
+            if (relatedStore) {
+                const relationFieldName = this.name.toLowerCase() + 'Id';
+                const filter = { [`${relationFieldName}`]: item.id };
+                const relatedItems = await relatedStore.getAll(filter);
+                if (item[key as keyof T] && typeof item[key as keyof T] === 'object') {
+                    item[key as keyof T] = relatedItems as unknown as T[keyof T];
+                }
+            }
+        }
+        return item;
+    }
+
+    async getAll(filter: any = {}, include: any = {}, limit?: number): Promise<T[]> {
+        // TODO: use index if filter given
+        const items = Array.from<T>(this.items.values() as MapIterator<T>);
+        const filteredItems = items.filter(item => {
+            return Object.keys(filter).every(key => item[key as keyof T] === filter[key]);
+        });
+
+        const result = limit ? filteredItems.slice(0, limit) : filteredItems;
+        return result.map(item => this.instantiate(item));
+    }
+
+    async create(newData: T): Promise<T | null> {
+        await this.saveItem(newData);
+        this.items.set(newData.id as Uuid, newData as T);
+        await this.setIndexes(newData.id, newData);
+        return this.instantiate(this.items.get(newData.id) as T);
+    }
+
+    async getById(id: Uuid, include: any = {}): Promise<T | null> {
+        const item = this.items.get(id);
+        if (!item) return null;
+        const instance = this.instantiate(item);
+        
+        console.log('Include:', include, this.name);
+        if (include) {
+            await this.includeRelatedData(instance, include);
+        }
+
+        return instance;
+    }
+
+    async getBy(key: keyof T, value: string): Promise<T | null> {
+        const index = this.indexes[key];
+        if (index) {
+            const id = index.get(value);
+            if (!id) return null;
+            const item = this.items.get(id);
+            if (!item) return null;
+            return this.instantiate(item);
+        } else {
+            throw new Error(`Index for key "${String(key)}" not found in store "${this.name}".`);
+        }
+    }
+
+    async update(id: Uuid, newData: Partial<T>): Promise<T | null> {
+        const existingItem = this.items.get(id) as T;
+        if (existingItem) {
+            const updatedData = { ...existingItem, ...newData };
+            await this.saveItem(updatedData);
+            this.items.set(id as Uuid, updatedData as T);
+            await this.setIndexes(id, newData);
+            const result = await this.getById(updatedData.id);
+            return result;
+        }
+        return null;
+    }
+
+    async delete(id: Uuid): Promise<boolean> {
+        const item = this.items.get(id) as T;
+        if (!item) return false;
+        await this.removeIndexes(id, item);
+        const success = this.items.delete(id);
+        if (!success) return false;
+        return await this.deleteItem(id);
+    }
+
+    private async setIndexes(id: Uuid, newData: Partial<T>): Promise<void> {
+        for (const key of this.indexKeys) {
+            if (typeof key === 'string') {
+                const value = newData[key] as string;
+                if (value) {
+                    this.indexes[key]?.set(value, id);
+                }
+            }
+        }
+    }
+
+    private async removeIndexes(id: Uuid, data: Partial<T>): Promise<void> {
+        for (const key of this.indexKeys) {
+            if (typeof key === 'string') {
+                this.indexes[key]?.delete(data[key] as string);
+            }
+        }
+    }
+
+    private instantiate(data: T): T {
+        if (this.itemConstructor === (Object as unknown as new (...args: any[]) => T)) return data;
+        const instance = new this.itemConstructor();
+        return Object.assign(instance, data);
+    }
+
+    protected async load(): Promise<void> {
+        return;
+    }
+
+    protected async saveItem(item: T): Promise<void> {
+       return;
+    }
+
+    protected async deleteItem(id: Uuid): Promise<boolean> {
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/server/src/lib/Store/prismaStore.js b/server/src/lib/Store/prismaStore.js
new file mode 100644
index 00000000..0cc65f03
--- /dev/null
+++ b/server/src/lib/Store/prismaStore.js
@@ -0,0 +1,51 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.PrismaStore = void 0;
+const client_1 = require("@prisma/client");
+class PrismaStore {
+    constructor(model, options) {
+        this.name = model;
+        this.prisma = new client_1.PrismaClient();
+        this.model = model;
+    }
+    setRelatedStore(key, store) {
+        return;
+    }
+    async index(key) {
+        // Todo: check if an index exists in Prisma?
+        return true;
+    }
+    async clear() {
+        await this.prisma[this.model].deleteMany({});
+    }
+    async getAll(filter = {}, include = {}, limit) {
+        return await this.prisma[this.model].findMany({
+            take: limit,
+            where: filter,
+            include: include
+        });
+    }
+    async create(newData) {
+        return await this.prisma[this.model].create({ data: newData });
+    }
+    async getById(id, include = {}) {
+        return await this.prisma[this.model].findUnique({
+            where: { id },
+            include: include
+        });
+    }
+    async getBy(key, value, include = {}) {
+        return await this.prisma[this.model].findUnique({
+            where: { [key]: value },
+            include: include
+        });
+    }
+    async update(id, newData) {
+        return await this.prisma[this.model].update({ where: { id }, data: newData });
+    }
+    async delete(id) {
+        const result = await this.prisma[this.model].delete({ where: { id } });
+        return result !== null;
+    }
+}
+exports.PrismaStore = PrismaStore;
diff --git a/server/src/lib/Store/prismaStore.ts b/server/src/lib/Store/prismaStore.ts
new file mode 100644
index 00000000..5dd6e1b9
--- /dev/null
+++ b/server/src/lib/Store/prismaStore.ts
@@ -0,0 +1,63 @@
+import { PrismaClient } from '@prisma/client';
+import { Uuid, GenericObject } from '@tribelike/types';
+import { StoreOptions, IStore } from './types/Store';
+
+export class PrismaStore<T extends GenericObject> implements IStore<T> {
+    public name: string;
+    private prisma: PrismaClient;
+    private model: string;
+
+    constructor(model: string, options?: StoreOptions<T>) {
+        this.name = model;
+        this.prisma = new PrismaClient();
+        this.model = model;
+    }
+
+    public setRelatedStore(key: string, store: IStore<any>): void {
+        return;
+    }
+
+    async index(key: keyof T): Promise<boolean> {
+        // Todo: check if an index exists in Prisma?
+        return true;
+    }
+
+    async clear(): Promise<void> {
+        await (this.prisma[this.model as keyof PrismaClient] as any).deleteMany({});
+    }
+    
+    async getAll(filter: any = {}, include: any = {}, limit?: number): Promise<T[]> {
+        return await (this.prisma[this.model as keyof PrismaClient] as any).findMany({
+            take: limit,
+            where: filter,
+            include: include
+        });
+    }
+
+    async create(newData: T): Promise<T | null> {
+        return await (this.prisma[this.model as keyof PrismaClient] as any).create({ data: newData });
+    }
+
+    async getById(id: Uuid, include: any = {}): Promise<T | null> {
+        return await (this.prisma[this.model as keyof PrismaClient] as any).findUnique({ 
+            where: { id }, 
+            include: include 
+        });
+    }
+
+    async getBy(key: keyof T, value: string, include: any = {}): Promise<T | null> {
+        return await (this.prisma[this.model as keyof PrismaClient] as any).findUnique({
+            where: { [key]: value },
+            include: include
+        });
+    }
+
+    async update(id: Uuid, newData: Partial<T>): Promise<T | null> {
+        return await (this.prisma[this.model as keyof PrismaClient] as any).update({ where: { id }, data: newData });
+    }
+
+    async delete(id: Uuid): Promise<boolean> {
+        const result = await (this.prisma[this.model as keyof PrismaClient] as any).delete({ where: { id } });
+        return result !== null;
+    }
+}
\ No newline at end of file
diff --git a/server/src/lib/Store/store.js b/server/src/lib/Store/store.js
new file mode 100644
index 00000000..1f86ace5
--- /dev/null
+++ b/server/src/lib/Store/store.js
@@ -0,0 +1,42 @@
+"use strict";
+// Key features of StoreManager:
+// - Uses the Singleton pattern for StoreManager
+// - Environment variable controls store type
+// - All store operations are async
+// - Common interface ensures consistency
+// - Models are decoupled from storage implementation
+// - Easy to add new store types in the future
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.Store = void 0;
+const memoryStore_1 = require("./memoryStore");
+const fileStore_1 = require("./fileStore");
+const prismaStore_1 = require("./prismaStore");
+class Store {
+    constructor() {
+        this.storeType = 'memory';
+    }
+    static getInstance() {
+        if (!Store.instance) {
+            Store.instance = new Store();
+        }
+        return Store.instance;
+    }
+    setStoreType(type) {
+        this.storeType = type;
+    }
+    getStoreType() {
+        return this.storeType;
+    }
+    getStore(name, options) {
+        switch (this.storeType) {
+            case 'memory':
+                return new memoryStore_1.MemoryStore(name, options);
+            case 'prisma':
+                return new prismaStore_1.PrismaStore(name, options);
+            case 'file':
+            default:
+                return new fileStore_1.FileStore(name, options);
+        }
+    }
+}
+exports.Store = Store;
diff --git a/server/src/lib/Store/store.ts b/server/src/lib/Store/store.ts
new file mode 100644
index 00000000..31398a6b
--- /dev/null
+++ b/server/src/lib/Store/store.ts
@@ -0,0 +1,49 @@
+// Key features of StoreManager:
+// - Uses the Singleton pattern for StoreManager
+// - Environment variable controls store type
+// - All store operations are async
+// - Common interface ensures consistency
+// - Models are decoupled from storage implementation
+// - Easy to add new store types in the future
+
+import { GenericObject } from '@tribelike/types';
+import { MemoryStore } from './memoryStore';
+import { FileStore } from './fileStore';
+import { PrismaStore } from './prismaStore';
+import { IStore, StoreType, StoreOptions } from './types/Store';
+
+export class Store {
+    private static instance: Store;
+    private storeType: StoreType;
+
+    private constructor() {
+        this.storeType = 'memory';
+    }
+
+    public static getInstance(): Store {
+        if (!Store.instance) {
+            Store.instance = new Store();
+        }
+        return Store.instance;
+    }
+
+    public setStoreType(type: StoreType): void {
+        this.storeType = type;
+    }
+
+    public getStoreType(): StoreType {
+        return this.storeType;
+    }
+
+    public getStore<T extends GenericObject>(name: string, options?: StoreOptions<T>): IStore<T> {
+        switch (this.storeType) {
+            case 'memory':
+                return new MemoryStore<T>(name, options) as IStore<T>;
+            case 'prisma':
+                return new PrismaStore<T>(name, options) as IStore<T>;
+            case 'file':
+            default:
+                return new FileStore<T>(name, options) as IStore<T>;
+        }
+    }
+}
\ No newline at end of file
diff --git a/server/src/lib/Store/types/Store.js b/server/src/lib/Store/types/Store.js
new file mode 100644
index 00000000..c8ad2e54
--- /dev/null
+++ b/server/src/lib/Store/types/Store.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/server/src/lib/Store/types/Store.ts b/server/src/lib/Store/types/Store.ts
new file mode 100644
index 00000000..0844dab2
--- /dev/null
+++ b/server/src/lib/Store/types/Store.ts
@@ -0,0 +1,29 @@
+import { Uuid, GenericObject } from '@tribelike/types';
+
+export type StoreType = 'memory' | 'file' | 'prisma';
+
+export interface StoreOptions<T extends GenericObject> {
+    constructor?: new (...args: any[]) => T;
+}
+
+export interface IStore<T extends GenericObject> {
+    // name is used to identify the store
+    // the name is used to create foreign key relationships
+    name: string;
+    // setRelatedStore is used to register related stores for foreign key relationships
+    setRelatedStore(key: string, store: IStore<any>): void;
+    // clear is used to clear all data in the store
+    clear(): Promise<void>;
+
+    // CRUD operations
+    getAll(filter?: any, include?: any, limit?: number): Promise<T[]>;
+    create(newData: T): Promise<T | null>;
+    getById(id: Uuid, include?: any): Promise<T | null>;
+    update(id: Uuid, newData: Partial<T>): Promise<T | null>;
+    delete(id: Uuid): Promise<boolean>;
+
+    // index is used to create an index for a specific key
+    index(key: keyof T): Promise<boolean>;
+    // getBy is used to retrieve an unique item by a specific key and value
+    getBy(key: keyof T, value: string, include?: any): Promise<T | null>;
+}
\ No newline at end of file
diff --git a/server/src/lib/auth.js b/server/src/lib/auth.js
new file mode 100644
index 00000000..5709bea5
--- /dev/null
+++ b/server/src/lib/auth.js
@@ -0,0 +1,73 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.auth = auth;
+exports.regenerate = regenerate;
+exports.login = login;
+exports.logout = logout;
+exports.encrypt = encrypt;
+exports.decrypt = decrypt;
+const jose_1 = require("jose");
+const prisma_1 = __importDefault(require("../lib/prisma"));
+const config_1 = require("../config");
+const secretKey = config_1.jwtSecret;
+const key = new TextEncoder().encode(secretKey);
+// Function to authenticate the token from the Authorization header
+async function auth(authHeader) {
+    if (!authHeader)
+        return null;
+    const token = authHeader;
+    if (!token)
+        return null;
+    const sessionData = await decrypt(token);
+    console.log('Session Data: ', sessionData);
+    return sessionData;
+}
+// Function to regenerate a token
+async function regenerate(userId) {
+    const user = await prisma_1.default.user.findUnique({
+        where: {
+            id: userId
+        },
+    });
+    if (!user)
+        return;
+    return await login(user);
+}
+// Function to generate a token upon login
+async function login(user) {
+    const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 week expiration
+    const token = await encrypt({ user, expires });
+    return {
+        token,
+        expires,
+    };
+}
+// Function to invalidate a token (optional, based on your implementation)
+async function logout() {
+    // For stateless JWT, there's no need to manually invalidate it unless you store tokens server-side
+    return { message: 'Logged out' };
+}
+// Function to encrypt data into a JWT
+async function encrypt(payload) {
+    return await new jose_1.SignJWT(payload)
+        .setProtectedHeader({ alg: 'HS256' })
+        .setIssuedAt()
+        .setExpirationTime('7d') // 7 days expiration
+        .sign(key);
+}
+// Function to decrypt and verify a JWT
+async function decrypt(token) {
+    try {
+        const { payload } = await (0, jose_1.jwtVerify)(token, key, {
+            algorithms: ['HS256'],
+        });
+        return payload;
+    }
+    catch (e) {
+        console.error('TEST: ' + e);
+        return null;
+    }
+}
diff --git a/server/src/lib/auth.ts b/server/src/lib/auth.ts
new file mode 100644
index 00000000..3e215cbb
--- /dev/null
+++ b/server/src/lib/auth.ts
@@ -0,0 +1,69 @@
+import type { User } from '@prisma/client';
+import { SignJWT, jwtVerify } from 'jose';
+import prisma from '../lib/prisma';
+import { jwtSecret } from "../config"
+
+const secretKey = jwtSecret;
+const key = new TextEncoder().encode(secretKey);
+
+// Function to authenticate the token from the Authorization header
+export async function auth(authHeader?: string) {
+  if (!authHeader) return null;
+  const token = authHeader;
+  if (!token) return null;
+
+  const sessionData = await decrypt(token);
+  console.log('Session Data: ', sessionData);
+  return sessionData;
+}
+
+// Function to regenerate a token
+export async function regenerate(userId: string) {
+  const user = await prisma.user.findUnique({
+    where: {
+      id: userId
+    },
+  });
+  if(!user) return;
+
+  return await login(user);
+}
+
+// Function to generate a token upon login
+export async function login(user: User) {
+  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 week expiration
+  const token = await encrypt({ user, expires });
+
+  return {
+    token,
+    expires,
+  };
+}
+
+// Function to invalidate a token (optional, based on your implementation)
+export async function logout() {
+  // For stateless JWT, there's no need to manually invalidate it unless you store tokens server-side
+  return { message: 'Logged out' };
+}
+
+// Function to encrypt data into a JWT
+export async function encrypt(payload: any) {
+  return await new SignJWT(payload)
+    .setProtectedHeader({ alg: 'HS256' })
+    .setIssuedAt()
+    .setExpirationTime('7d') // 7 days expiration
+    .sign(key);
+}
+
+// Function to decrypt and verify a JWT
+export async function decrypt(token: string): Promise<any> {
+  try {
+    const { payload } = await jwtVerify(token, key, {
+      algorithms: ['HS256'],
+    });
+    return payload;
+  } catch (e) {
+    console.error('TEST: '+e);
+    return null;
+  }
+}
\ No newline at end of file
diff --git a/server/src/lib/email.js b/server/src/lib/email.js
new file mode 100644
index 00000000..e7e3d09f
--- /dev/null
+++ b/server/src/lib/email.js
@@ -0,0 +1,173 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.EmailTemplate = exports.sendMail = void 0;
+const nodemailer_1 = __importDefault(require("nodemailer"));
+const sendMail = async (to, subject, template) => {
+    const transporter = nodemailer_1.default.createTransport(process.env.EMAIL_SERVER);
+    const htmlTemplate = (0, exports.EmailTemplate)(template);
+    const mailOptions = {
+        from: process.env.EMAIL_USER,
+        to,
+        subject,
+        html: htmlTemplate,
+    };
+    try {
+        await transporter.sendMail(mailOptions);
+        console.log('🚀 Email sent successfully!');
+    }
+    catch (error) {
+        console.error(error);
+    }
+};
+exports.sendMail = sendMail;
+const EmailTemplate = (children) => `
+  <body class="reset-styles w-full text-center font-sans bg-gray-100">
+    <table class="mx-auto max-w-lg bg-white rounded-lg shadow-md border border-gray-200">
+      <tr>
+        <td class="p-6 text-center bg-blue-500 text-white">
+          <h1 class="text-xl font-bold">Tribelike</h1>
+        </td>
+      </tr>
+      <tr>
+        <td class="p-6">
+          <!-- Dynamic Content -->
+          ${children}
+        </td>
+      </tr>
+      <tr>
+        <td class="p-4 bg-gray-100 text-center">
+          <p class="text-sm text-gray-600">
+            The Toplocs Organisation
+          </p>
+        </td>
+      </tr>
+    </table>
+    <table class="max-w-lg mt-4 mx-auto">
+      <tr>
+        <td class="px-8 pb-2 text-center text-xs text-gray-500">
+          <p>
+            You’re receiving this email because you signed up for our service. If you didn’t, please ignore this email.
+          </p>
+        </td>
+      </tr>
+    </table>
+  </body>
+
+  <style>
+    body {
+      width: 100%;
+      height: 100%;
+    }
+    .reset-styles * {
+      all: unset;
+      display: revert;
+    }
+    .font-sans {
+      font-family: Arial, sans-serif;
+    }
+    .bg-gray-100 {
+      background-color: #f9f9f9;
+    }
+    .bg-white {
+      background-color: #ffffff;
+    }
+    .bg-blue-500 {
+      background-color: #3b82f6;
+    }
+    .hover\\:bg-blue-700:hover {
+      background-color: #1d4ed8;
+    }
+    .text-white {
+      color: #ffffff;
+    }
+    .text-gray-700 {
+      color: #333333;
+    }
+    .text-gray-600 {
+      color: #555555;
+    }
+    .text-gray-500 {
+      color: #999999;
+    }
+    .rounded {
+      border-radius: 0.25rem;
+    }
+    .rounded-lg {
+      border-radius: 0.5rem;
+    }
+    .shadow-md {
+      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
+    }
+    .border {
+      border-width: 1px;
+    }
+    .border-gray-200 {
+      border-color: #e5e5e5;
+    }
+    .mx-auto {
+      margin: 0 auto;
+    }
+    .p-4 {
+      padding: 1rem;
+    }
+    .p-6 {
+      padding: 1.5rem;
+    }
+    .pb-2 {
+      padding-bottom: 0.5rem;
+    }
+    .py-2 {
+      padding-top: 0.5rem;
+      padding-bottom: 0.5rem;
+    }
+    .px-4 {
+      padding-left: 1rem;
+      padding-right: 1rem;
+    }
+    .px-8 {
+      padding-left: 2rem;
+      padding-right: 2rem;
+    }
+    .px-16 {
+      padding-left: 4rem;
+      padding-right: 4rem;
+    }
+    .text-center {
+      text-align: center;
+    }
+    .text-base {
+      font-size: 1rem;
+    }
+    .text-sm {
+      font-size: 0.875rem;
+    }
+    .text-xs {
+      font-size: 0.75rem;
+    }
+    .leading-relaxed {
+      line-height: 1.625;
+    }
+    .font-bold {
+      font-weight: bold;
+    }
+    .text-xl {
+      font-size: 1.25rem;
+    }
+    .mt-4 {
+      margin-top: 1rem;
+    }
+    .inline-block {
+      display: inline-block;
+    }
+    .w-full {
+      width: 100%;
+    }
+    .max-w-lg {
+      max-width: 32rem;
+    }
+  </style>
+`;
+exports.EmailTemplate = EmailTemplate;
diff --git a/server/src/lib/email.ts b/server/src/lib/email.ts
new file mode 100644
index 00000000..100cc7fc
--- /dev/null
+++ b/server/src/lib/email.ts
@@ -0,0 +1,168 @@
+import nodemailer from 'nodemailer';
+
+export const sendMail = async (to: string, subject: string, template: string) => {
+  const transporter = nodemailer.createTransport(process.env.EMAIL_SERVER);
+  const htmlTemplate = EmailTemplate(template);
+
+  const mailOptions = {
+    from: process.env.EMAIL_USER,
+    to,
+    subject,
+    html: htmlTemplate,
+  };
+
+  try {
+    await transporter.sendMail(mailOptions);
+    console.log('🚀 Email sent successfully!');
+  } catch (error) {
+    console.error(error)
+  }
+}
+
+export const EmailTemplate = (children: string) => `
+  <body class="reset-styles w-full text-center font-sans bg-gray-100">
+    <table class="mx-auto max-w-lg bg-white rounded-lg shadow-md border border-gray-200">
+      <tr>
+        <td class="p-6 text-center bg-blue-500 text-white">
+          <h1 class="text-xl font-bold">Tribelike</h1>
+        </td>
+      </tr>
+      <tr>
+        <td class="p-6">
+          <!-- Dynamic Content -->
+          ${children}
+        </td>
+      </tr>
+      <tr>
+        <td class="p-4 bg-gray-100 text-center">
+          <p class="text-sm text-gray-600">
+            The Toplocs Organisation
+          </p>
+        </td>
+      </tr>
+    </table>
+    <table class="max-w-lg mt-4 mx-auto">
+      <tr>
+        <td class="px-8 pb-2 text-center text-xs text-gray-500">
+          <p>
+            You’re receiving this email because you signed up for our service. If you didn’t, please ignore this email.
+          </p>
+        </td>
+      </tr>
+    </table>
+  </body>
+
+  <style>
+    body {
+      width: 100%;
+      height: 100%;
+    }
+    .reset-styles * {
+      all: unset;
+      display: revert;
+    }
+    .font-sans {
+      font-family: Arial, sans-serif;
+    }
+    .bg-gray-100 {
+      background-color: #f9f9f9;
+    }
+    .bg-white {
+      background-color: #ffffff;
+    }
+    .bg-blue-500 {
+      background-color: #3b82f6;
+    }
+    .hover\\:bg-blue-700:hover {
+      background-color: #1d4ed8;
+    }
+    .text-white {
+      color: #ffffff;
+    }
+    .text-gray-700 {
+      color: #333333;
+    }
+    .text-gray-600 {
+      color: #555555;
+    }
+    .text-gray-500 {
+      color: #999999;
+    }
+    .rounded {
+      border-radius: 0.25rem;
+    }
+    .rounded-lg {
+      border-radius: 0.5rem;
+    }
+    .shadow-md {
+      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
+    }
+    .border {
+      border-width: 1px;
+    }
+    .border-gray-200 {
+      border-color: #e5e5e5;
+    }
+    .mx-auto {
+      margin: 0 auto;
+    }
+    .p-4 {
+      padding: 1rem;
+    }
+    .p-6 {
+      padding: 1.5rem;
+    }
+    .pb-2 {
+      padding-bottom: 0.5rem;
+    }
+    .py-2 {
+      padding-top: 0.5rem;
+      padding-bottom: 0.5rem;
+    }
+    .px-4 {
+      padding-left: 1rem;
+      padding-right: 1rem;
+    }
+    .px-8 {
+      padding-left: 2rem;
+      padding-right: 2rem;
+    }
+    .px-16 {
+      padding-left: 4rem;
+      padding-right: 4rem;
+    }
+    .text-center {
+      text-align: center;
+    }
+    .text-base {
+      font-size: 1rem;
+    }
+    .text-sm {
+      font-size: 0.875rem;
+    }
+    .text-xs {
+      font-size: 0.75rem;
+    }
+    .leading-relaxed {
+      line-height: 1.625;
+    }
+    .font-bold {
+      font-weight: bold;
+    }
+    .text-xl {
+      font-size: 1.25rem;
+    }
+    .mt-4 {
+      margin-top: 1rem;
+    }
+    .inline-block {
+      display: inline-block;
+    }
+    .w-full {
+      width: 100%;
+    }
+    .max-w-lg {
+      max-width: 32rem;
+    }
+  </style>
+`;
diff --git a/server/src/lib/error.js b/server/src/lib/error.js
new file mode 100644
index 00000000..afb36923
--- /dev/null
+++ b/server/src/lib/error.js
@@ -0,0 +1,18 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.handleError = exports.CustomError = void 0;
+class CustomError extends Error {
+    constructor(message, statusCode = 500) {
+        super(message);
+        this.statusCode = statusCode;
+        Object.setPrototypeOf(this, CustomError.prototype);
+    }
+}
+exports.CustomError = CustomError;
+const handleError = (err, res) => {
+    const statusCode = err.statusCode || 500;
+    const message = err.message || 'Internal Server Error';
+    console.log(message);
+    res.status(statusCode).send(message);
+};
+exports.handleError = handleError;
diff --git a/server/src/lib/error.ts b/server/src/lib/error.ts
new file mode 100644
index 00000000..8ad4e7e5
--- /dev/null
+++ b/server/src/lib/error.ts
@@ -0,0 +1,23 @@
+import { Request, Response, NextFunction } from 'express';
+
+export interface ErrorWithStatus extends Error {
+    statusCode?: number;
+}
+
+export class CustomError extends Error {
+    statusCode: number;
+
+    constructor(message: string, statusCode: number = 500) {
+        super(message);
+        this.statusCode = statusCode;
+        Object.setPrototypeOf(this, CustomError.prototype);
+    }
+}
+
+export const handleError = (err: CustomError, res: Response) => {
+    const statusCode = err.statusCode || 500;
+    const message = err.message || 'Internal Server Error';
+    console.log(message)
+    res.status(statusCode).send(message);
+};
+
diff --git a/server/src/lib/index.js b/server/src/lib/index.js
new file mode 100644
index 00000000..cf443325
--- /dev/null
+++ b/server/src/lib/index.js
@@ -0,0 +1,19 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./Store"), exports);
+__exportStar(require("./Model"), exports);
+__exportStar(require("./email"), exports);
diff --git a/server/src/lib/index.ts b/server/src/lib/index.ts
new file mode 100644
index 00000000..ba086052
--- /dev/null
+++ b/server/src/lib/index.ts
@@ -0,0 +1,3 @@
+export * from './Store';
+export * from './Model';
+export * from './email';
\ No newline at end of file
diff --git a/server/src/lib/prisma.js b/server/src/lib/prisma.js
new file mode 100644
index 00000000..c2baded6
--- /dev/null
+++ b/server/src/lib/prisma.js
@@ -0,0 +1,7 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const client_1 = require("@prisma/client");
+const prisma = global.prisma || new client_1.PrismaClient();
+if (process.env.NODE_ENV === 'development')
+    global.prisma = prisma;
+exports.default = prisma;
diff --git a/server/src/lib/prisma.ts b/server/src/lib/prisma.ts
new file mode 100644
index 00000000..470ac819
--- /dev/null
+++ b/server/src/lib/prisma.ts
@@ -0,0 +1,11 @@
+import { PrismaClient } from '@prisma/client';
+
+declare global {
+  var prisma: PrismaClient | undefined
+}
+
+const prisma = global.prisma || new PrismaClient()
+
+if (process.env.NODE_ENV === 'development') global.prisma = prisma
+
+export default prisma
diff --git a/server/src/middleware/authenticate.js b/server/src/middleware/authenticate.js
new file mode 100644
index 00000000..9608d16b
--- /dev/null
+++ b/server/src/middleware/authenticate.js
@@ -0,0 +1,14 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.authenticate = void 0;
+const authenticate = async (req, res, next) => {
+    if (req.method === "OPTIONS") {
+        next();
+    }
+    if (!req.session.loggedIn) {
+        res.status(401).json({ error: 'Unauthorized. User not logged in' });
+        return;
+    }
+    next();
+};
+exports.authenticate = authenticate;
diff --git a/server/src/middleware/authenticate.ts b/server/src/middleware/authenticate.ts
new file mode 100644
index 00000000..53a7cd5c
--- /dev/null
+++ b/server/src/middleware/authenticate.ts
@@ -0,0 +1,13 @@
+import { Request, Response, NextFunction } from 'express';
+import { RequestWithSession } from './types/RequestWithSession';
+
+export const authenticate = async (req: RequestWithSession, res: Response, next: NextFunction) => {
+    if (req.method === "OPTIONS") {
+        next();
+    }
+    if (!req.session.loggedIn) {
+        res.status(401).json({ error: 'Unauthorized. User not logged in' });
+        return;
+    }
+    next();
+};
diff --git a/server/src/middleware/index.js b/server/src/middleware/index.js
new file mode 100644
index 00000000..f019c7b7
--- /dev/null
+++ b/server/src/middleware/index.js
@@ -0,0 +1,20 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+__exportStar(require("./types/RequestWithSession"), exports);
+__exportStar(require("../lib/error"), exports);
+__exportStar(require("./session"), exports);
+__exportStar(require("./authenticate"), exports);
diff --git a/server/src/middleware/index.ts b/server/src/middleware/index.ts
new file mode 100644
index 00000000..4764cf3a
--- /dev/null
+++ b/server/src/middleware/index.ts
@@ -0,0 +1,4 @@
+export * from './types/RequestWithSession';
+export * from '../lib/error';
+export * from './session';
+export * from './authenticate';
\ No newline at end of file
diff --git a/server/src/middleware/session.js b/server/src/middleware/session.js
new file mode 100644
index 00000000..66ec97e5
--- /dev/null
+++ b/server/src/middleware/session.js
@@ -0,0 +1,45 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.sessionMiddleware = void 0;
+const sessionMiddleware = async (req, res, next) => {
+    try {
+        /*if (req.method === "OPTIONS") {
+            next();
+        }
+        if (req.path === '/api/auth/session') return next();
+        if (req.path === '/api/session') return next();
+        if (req.path.startsWith('/api/auth/magicLink')) return next();
+
+        const token = req.get('Authorization');
+        if (!token) {
+            res.status(401).json({ error: 'Unauthorized. Authorization Header not found' });
+            return;
+        }
+
+        const validatedSession = await sessions.validateToken(token);
+        if (!validatedSession) {
+            res.status(401).json({ error: 'Unauthorized. Session not valid' });
+            return;
+        }
+
+        if (!('userId' in validatedSession.data)) {
+            res.status(401).json({ error: 'Unauthorized. User not Found' });
+            return;
+        }
+
+        const loggedIn = validatedSession.data.userId != '';
+
+        req.session = {
+            userId: validatedSession.data.userId,
+            loggedIn: loggedIn,
+            token: token,
+            expires: validatedSession.expires
+        };*/
+        next();
+    }
+    catch (err) {
+        res.status(500).json({ error: 'Server Error', details: err });
+        return;
+    }
+};
+exports.sessionMiddleware = sessionMiddleware;
diff --git a/server/src/middleware/session.ts b/server/src/middleware/session.ts
new file mode 100644
index 00000000..0e5f1393
--- /dev/null
+++ b/server/src/middleware/session.ts
@@ -0,0 +1,44 @@
+import { Request, Response, NextFunction, RequestHandler } from 'express';
+import { RequestWithSession } from './types/RequestWithSession';
+import { sessions } from '../models';
+
+export const sessionMiddleware: RequestHandler = async (req: RequestWithSession, res: Response, next: NextFunction): Promise<void> => {
+    try {
+        /*if (req.method === "OPTIONS") {
+            next();
+        }
+        if (req.path === '/api/auth/session') return next();
+        if (req.path === '/api/session') return next();
+        if (req.path.startsWith('/api/auth/magicLink')) return next();
+
+        const token = req.get('Authorization');
+        if (!token) {
+            res.status(401).json({ error: 'Unauthorized. Authorization Header not found' });
+            return;
+        }
+
+        const validatedSession = await sessions.validateToken(token);
+        if (!validatedSession) {
+            res.status(401).json({ error: 'Unauthorized. Session not valid' });
+            return;
+        }
+
+        if (!('userId' in validatedSession.data)) {
+            res.status(401).json({ error: 'Unauthorized. User not Found' });
+            return;
+        }
+
+        const loggedIn = validatedSession.data.userId != '';
+
+        req.session = {
+            userId: validatedSession.data.userId,
+            loggedIn: loggedIn,
+            token: token,
+            expires: validatedSession.expires
+        };*/
+        next();
+    } catch (err) {
+        res.status(500).json({ error: 'Server Error', details: err });
+        return;
+    }
+};
diff --git a/server/src/middleware/types/RequestWithSession.js b/server/src/middleware/types/RequestWithSession.js
new file mode 100644
index 00000000..c8ad2e54
--- /dev/null
+++ b/server/src/middleware/types/RequestWithSession.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/server/src/middleware/types/RequestWithSession.ts b/server/src/middleware/types/RequestWithSession.ts
new file mode 100644
index 00000000..c794cf3d
--- /dev/null
+++ b/server/src/middleware/types/RequestWithSession.ts
@@ -0,0 +1,11 @@
+import { Request } from 'express';
+import { Uuid } from '@tribelike/types/Uuid';
+
+export interface RequestWithSession extends Request {
+    session: {
+        userId: Uuid;
+        loggedIn: boolean;
+        token: string;
+        expires: Date;
+    }
+}
\ No newline at end of file
diff --git a/server/src/models/Profile.js b/server/src/models/Profile.js
new file mode 100644
index 00000000..254a7f43
--- /dev/null
+++ b/server/src/models/Profile.js
@@ -0,0 +1,58 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.ProfileModel = exports.Profile = void 0;
+const crypto_js_1 = __importDefault(require("crypto-js"));
+const uuid_1 = require("uuid");
+const lib_1 = require("../lib");
+class Profile extends lib_1.GenericObject {
+    constructor(profile) {
+        super(profile.id);
+        this.id = profile.id;
+        this.userId = profile.userId;
+        this.username = profile.username;
+        this.type = profile.type;
+        this.email = profile.email || '';
+        this.image = profile.image || '';
+        this.about = profile.about || '';
+    }
+}
+exports.Profile = Profile;
+class ProfileModel extends lib_1.Model {
+    constructor(store) {
+        super(store, {
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('userId');
+    }
+    async create(item) {
+        if (!item.email)
+            return null;
+        const email = item.email.toLowerCase();
+        const hash = crypto_js_1.default.SHA256(email).toString(crypto_js_1.default.enc.Hex);
+        item.image = `https://gravatar.com/avatar/${hash}`;
+        return await super.create(item);
+    }
+    async getAllByUserId(userId) {
+        const allProfiles = await this.store.getAll({ userId: userId });
+        return allProfiles;
+    }
+    async createDefaultProfiles(userId, username, email) {
+        const defaultProfiles = [
+            new Profile({ id: (0, uuid_1.v4)(), userId: userId, username: username, email: email, type: 'family' }),
+            new Profile({ id: (0, uuid_1.v4)(), userId: userId, username: username, email: email, type: 'friends' }),
+            new Profile({ id: (0, uuid_1.v4)(), userId: userId, username: username, email: email, type: 'work' })
+        ];
+        await Promise.all(defaultProfiles.map(profile => {
+            return this.store.create(profile);
+        }));
+        return defaultProfiles;
+    }
+}
+exports.ProfileModel = ProfileModel;
diff --git a/server/src/models/Profile.ts b/server/src/models/Profile.ts
new file mode 100644
index 00000000..db2dd93d
--- /dev/null
+++ b/server/src/models/Profile.ts
@@ -0,0 +1,73 @@
+import CryptoJS from 'crypto-js';
+import { v4 as uuidv4 } from 'uuid';
+import { 
+    Uuid,
+    Profile as IProfile, 
+    ProfileSettings as IProfileSettings,
+    Activity as IActivity
+} from '@tribelike/types';
+import { IStore, GenericObject, Model} from '../lib';
+
+export class Profile extends GenericObject implements IProfile {
+    id: Uuid;
+    userId: Uuid;
+    username: string;
+    type: string;
+    email?: string;
+    image?: string;
+    about?: string;
+    activities?: IActivity[];
+    settings?: IProfileSettings[];
+    
+    constructor(profile: IProfile) {
+        super(profile.id);
+        this.id = profile.id;
+        this.userId = profile.userId;
+        this.username = profile.username;
+        this.type = profile.type;
+        this.email = profile.email || '';
+        this.image = profile.image || '';
+        this.about = profile.about || '';
+    }
+}
+
+export class ProfileModel extends Model<Profile> {
+    constructor(store: IStore<Profile>) {
+        super(store, { 
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('userId');
+    }
+
+    async create(item: Partial<Profile>): Promise<Profile | null> {
+        if (!item.email) return null;
+        const email = item.email.toLowerCase();
+        const hash = CryptoJS.SHA256(email).toString(CryptoJS.enc.Hex);
+        item.image = `https://gravatar.com/avatar/${hash}`;
+    
+        return await super.create(item);
+    }
+
+    async getAllByUserId(userId: Uuid): Promise<Profile[]> {
+        const allProfiles = await this.store.getAll({userId: userId});
+        return allProfiles;
+    }
+
+    async createDefaultProfiles(userId: Uuid, username: string, email: string): Promise<Profile[]> { 
+        const defaultProfiles = [
+            new Profile({id: uuidv4(), userId: userId, username: username, email: email, type: 'family'}),
+            new Profile({id: uuidv4(), userId: userId, username: username, email: email, type: 'friends'}),
+            new Profile({id: uuidv4(), userId: userId, username: username, email: email, type: 'work'})
+        ];
+
+        await Promise.all(defaultProfiles.map(profile => {
+            return this.store.create(profile);
+        }));
+        return defaultProfiles;
+    }
+}
+
diff --git a/server/src/models/User.js b/server/src/models/User.js
new file mode 100644
index 00000000..b41ace01
--- /dev/null
+++ b/server/src/models/User.js
@@ -0,0 +1,47 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.UserModel = exports.User = void 0;
+const crypto_js_1 = __importDefault(require("crypto-js"));
+const lib_1 = require("../lib");
+class User extends lib_1.GenericObject {
+    constructor(user) {
+        super(user.id);
+        this.emailVerified = false;
+        this.profiles = [];
+        this.settings = [];
+        Object.assign(this, user);
+    }
+}
+exports.User = User;
+class UserModel extends lib_1.Model {
+    constructor(store) {
+        super(store, {
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('email');
+    }
+    async create(item) {
+        if (!item.email)
+            return null;
+        const existingUser = await this.getByEmail(item.email);
+        if (existingUser)
+            return null;
+        const email = item.email.toLowerCase();
+        const hash = crypto_js_1.default.SHA256(email).toString(crypto_js_1.default.enc.Hex);
+        // TODO: Validate Gravatar Image exists
+        // TODO: image only in Profile
+        item.image = `https://gravatar.com/avatar/${hash}`;
+        return await super.create(item);
+    }
+    async getByEmail(email) {
+        return await this.store.getBy('email', email);
+    }
+}
+exports.UserModel = UserModel;
diff --git a/server/src/models/User.ts b/server/src/models/User.ts
new file mode 100644
index 00000000..d70c317c
--- /dev/null
+++ b/server/src/models/User.ts
@@ -0,0 +1,53 @@
+import CryptoJS from 'crypto-js';
+import {
+    Uuid,
+    User as IUser,
+    Profile as IProfile
+} from '@tribelike/types';
+import { IStore, GenericObject, Model } from '../lib';
+
+export class User extends GenericObject implements IUser {
+    id!: Uuid;
+    email!: string;
+    emailVerified: boolean = false;
+    profiles?: IProfile[] = [];
+    settings?: any[] = [];
+    image?: string;
+
+    constructor(user: IUser) {
+        super(user.id);
+        Object.assign(this, user);
+    }
+}
+
+export class UserModel extends Model<User> {
+    constructor(store: IStore<User>) {
+        super(store, { 
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('email');
+    }
+
+    async create(item: Partial<User>): Promise<User | null> {
+        if (!item.email) return null;
+        const existingUser = await this.getByEmail(item.email);
+        if (existingUser) return null;
+
+        const email = item.email.toLowerCase();
+        const hash = CryptoJS.SHA256(email).toString(CryptoJS.enc.Hex);
+        // TODO: Validate Gravatar Image exists
+        // TODO: image only in Profile
+        item.image = `https://gravatar.com/avatar/${hash}`;
+    
+        return await super.create(item);
+    }
+
+    async getByEmail(email: string): Promise<User | null> {
+        return await this.store.getBy('email', email);
+    }
+}
+
diff --git a/server/src/models/UserSetting.js b/server/src/models/UserSetting.js
new file mode 100644
index 00000000..33a6f369
--- /dev/null
+++ b/server/src/models/UserSetting.js
@@ -0,0 +1,27 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.UserSettingModel = exports.UserSetting = void 0;
+const lib_1 = require("../lib");
+class UserSetting extends lib_1.GenericObject {
+    constructor(userSetting) {
+        super(userSetting.id);
+        Object.assign(this, userSetting);
+    }
+}
+exports.UserSetting = UserSetting;
+class UserSettingModel extends lib_1.Model {
+    constructor(store) {
+        super(store, {
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('userId');
+    }
+    async getByUserId(userId) {
+        return await this.store.getAll({ 'userId': userId });
+    }
+}
+exports.UserSettingModel = UserSettingModel;
diff --git a/server/src/models/UserSetting.ts b/server/src/models/UserSetting.ts
new file mode 100644
index 00000000..a085c015
--- /dev/null
+++ b/server/src/models/UserSetting.ts
@@ -0,0 +1,33 @@
+import {
+    Uuid,
+    UserSetting as IUserSetting
+} from '@tribelike/types';
+import { IStore, GenericObject, Model } from '../lib';
+
+export class UserSetting extends GenericObject implements IUserSetting {
+    id!: Uuid;
+    userId!: Uuid;
+    settings!: Record<string, any>;
+
+    constructor(userSetting: IUserSetting) {
+        super(userSetting.id);
+        Object.assign(this, userSetting);
+    }
+}
+
+export class UserSettingModel extends Model<UserSetting> {
+    constructor(store: IStore<UserSetting>) {
+        super(store, { 
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('userId');
+    }
+
+    async getByUserId(userId: Uuid): Promise<UserSetting[]> {
+        return await this.store.getAll({'userId': userId});
+    }
+}
diff --git a/server/src/models/auth/MagicLink.js b/server/src/models/auth/MagicLink.js
new file mode 100644
index 00000000..c1d90e12
--- /dev/null
+++ b/server/src/models/auth/MagicLink.js
@@ -0,0 +1,63 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MagicLinkModel = exports.MagicLink = void 0;
+const crypto_js_1 = __importDefault(require("crypto-js"));
+const lib_1 = require("../../lib");
+class MagicLink extends lib_1.GenericObject {
+    constructor(magicLink) {
+        super(magicLink.id);
+        Object.assign(this, magicLink);
+    }
+}
+exports.MagicLink = MagicLink;
+class MagicLinkModel extends lib_1.Model {
+    constructor(store) {
+        super(store, {
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('token');
+    }
+    async create(item) {
+        if (!item.userId)
+            return null;
+        const hash = crypto_js_1.default.SHA256(item.userId).toString(crypto_js_1.default.enc.Hex);
+        const magiclink = {
+            id: '',
+            token: hash,
+            userId: item.userId,
+            expires: new Date(Date.now() + 10 * 60 * 1000)
+        };
+        return super.create(magiclink);
+    }
+    async getByToken(token) {
+        return await this.store.getBy('token', token);
+    }
+    async consumeToken(token) {
+        const magicLink = await this.getByToken(token);
+        if (!magicLink)
+            return null;
+        await this.delete(magicLink.id);
+        const now = new Date();
+        if (now < magicLink.expires) {
+            return magicLink.userId;
+        }
+        return null;
+    }
+    async cleanExpiredLinks() {
+        const now = new Date();
+        const allLinks = await this.getAll();
+        const expiredLinks = allLinks.filter(link => link.expires < now);
+        for (const link of expiredLinks) {
+            await this.delete(link.id);
+        }
+        return expiredLinks.length;
+    }
+}
+exports.MagicLinkModel = MagicLinkModel;
diff --git a/server/src/models/auth/MagicLink.ts b/server/src/models/auth/MagicLink.ts
new file mode 100644
index 00000000..3a52a93b
--- /dev/null
+++ b/server/src/models/auth/MagicLink.ts
@@ -0,0 +1,71 @@
+import CryptoJS from 'crypto-js';
+import {
+    Uuid,
+    MagicLink as IMagicLink
+} from '@tribelike/types';
+import { v4 as uuidv4 } from 'uuid';
+import { IStore, GenericObject, Model } from '../../lib';
+
+export class MagicLink extends GenericObject implements IMagicLink {
+    id!: Uuid;
+    token!: string;
+    userId!: Uuid;
+    expires!: Date;
+
+    constructor(magicLink: IMagicLink) {
+        super(magicLink.id);
+        Object.assign(this, magicLink);
+    }
+}
+
+export class MagicLinkModel extends Model<MagicLink> {
+    constructor(store: IStore<MagicLink>) {
+        super(store, { 
+            getAll: true,
+            create: true,
+            getById: true,
+            update: true,
+            delete: true
+        });
+        store.index('token');
+    }
+
+    async create(item: Partial<MagicLink>): Promise<MagicLink | null> {
+        if (!item.userId) return null;
+        const hash = CryptoJS.SHA256(item.userId).toString(CryptoJS.enc.Hex);
+        const magiclink: IMagicLink = {
+            id: '',
+            token: hash,
+            userId: item.userId,
+            expires: new Date(Date.now()+10*60*1000)
+        };
+        return super.create(magiclink);
+    }
+
+    async getByToken(token: string): Promise<MagicLink | null> {
+        return await this.store.getBy('token', token);
+    }
+
+    async consumeToken(token: string): Promise<Uuid | null> {
+        const magicLink = await this.getByToken(token);
+        if (!magicLink) return null;
+        await this.delete(magicLink.id);
+
+        const now = new Date();
+        if (now < magicLink.expires) {
+            return magicLink.userId;
+        }
+        return null;
+    }
+    
+    async cleanExpiredLinks(): Promise<number> {
+        const now = new Date();
+        const allLinks = await this.getAll();
+        const expiredLinks = allLinks.filter(link => link.expires < now);
+        for (const link of expiredLinks) {
+            await this.delete(link.id);
+        }
+        
+        return expiredLinks.length;
+    }
+}
diff --git a/server/src/models/auth/Passkey.js b/server/src/models/auth/Passkey.js
new file mode 100644
index 00000000..dc463a14
--- /dev/null
+++ b/server/src/models/auth/Passkey.js
@@ -0,0 +1,36 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.PasskeyModel = exports.PasskeyCredential = void 0;
+const lib_1 = require("../../lib");
+class PasskeyCredential extends lib_1.GenericObject {
+    constructor(credential) {
+        super(credential.id);
+        Object.assign(this, credential);
+    }
+    publicKeyUint8() {
+        return PasskeyCredential.base64ToUint8Array(this.publicKey);
+    }
+}
+exports.PasskeyCredential = PasskeyCredential;
+PasskeyCredential.uint8ArrayToBase64 = (uint8Array) => Buffer.from(uint8Array).toString('base64');
+PasskeyCredential.base64ToUint8Array = (base64) => new Uint8Array(Buffer.from(base64, 'base64'));
+class PasskeyModel extends lib_1.Model {
+    constructor(store) {
+        super(store, {
+            getAll: false,
+            create: true,
+            getById: true,
+            update: false,
+            delete: true
+        });
+        store.index('userId');
+    }
+    async getAllByUserId(userId) {
+        const credentials = await this.store.getAll();
+        return credentials.filter(item => item.userId === userId);
+    }
+    async updateCounter(id, counter) {
+        return this.store.update(id, { counter: counter });
+    }
+}
+exports.PasskeyModel = PasskeyModel;
diff --git a/server/src/models/auth/Passkey.ts b/server/src/models/auth/Passkey.ts
new file mode 100644
index 00000000..9741e71d
--- /dev/null
+++ b/server/src/models/auth/Passkey.ts
@@ -0,0 +1,57 @@
+import { Uuid, Passkey as IPasskey } from '@tribelike/types';
+import { 
+    AuthenticatorTransportFuture,
+    CredentialDeviceType, 
+    Base64URLString
+} from '@simplewebauthn/server';
+import { IStore, GenericObject, Model } from '../../lib';
+
+
+export class PasskeyCredential extends GenericObject implements IPasskey {
+    id!: Base64URLString;
+    publicKey!: Base64URLString;
+    userId!: Uuid;
+    webauthnUserID!: Base64URLString;
+    counter!: number;
+    deviceType!: CredentialDeviceType;
+    backedUp!: boolean;
+    transports?: AuthenticatorTransportFuture[];
+
+    constructor(credential: IPasskey) {
+        super(credential.id);
+        Object.assign(this, credential);
+    }
+
+    static uint8ArrayToBase64 = (uint8Array: Uint8Array): string =>
+        Buffer.from(uint8Array).toString('base64');
+    
+    static base64ToUint8Array = (base64: string): Uint8Array =>
+        new Uint8Array(Buffer.from(base64, 'base64'));
+    
+    publicKeyUint8(): Uint8Array {
+        return PasskeyCredential.base64ToUint8Array(this.publicKey);
+    }
+}
+
+
+export class PasskeyModel extends Model<PasskeyCredential> {
+    constructor(store: IStore<PasskeyCredential>) {
+        super(store, { 
+            getAll: false,
+            create: true,
+            getById: true,
+            update: false,
+            delete: true
+        });
+        store.index('userId');
+    }
+
+    async getAllByUserId(userId: Uuid): Promise<PasskeyCredential[]> {
+        const credentials = await this.store.getAll();
+        return credentials.filter(item => item.userId === userId);
+    }
+
+    async updateCounter(id: Uuid, counter: number): Promise<PasskeyCredential | null> {
+        return this.store.update(id, { counter: counter });
+    }
+}
diff --git a/server/src/models/auth/Session.js b/server/src/models/auth/Session.js
new file mode 100644
index 00000000..c84b7f76
--- /dev/null
+++ b/server/src/models/auth/Session.js
@@ -0,0 +1,60 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.Session = void 0;
+const jose_1 = require("jose");
+const config_1 = require("../../config");
+const util_1 = require("util");
+// In-memory token store?
+// const tokenMap: Record<Uuid, AuthToken> = {};
+const key = new util_1.TextEncoder().encode(config_1.jwtSecret);
+class Session {
+    // Generate a JWToken, valid default 7 days
+    async createToken(data, valid = 7 * 24 * 60) {
+        const expires = new Date(Date.now() + valid * 60 * 1000);
+        const session = { data, expires };
+        const token = await this.encrypt(session);
+        return { data, token, expires };
+    }
+    // Validate the token from the Authorization header
+    async validateHeader(authHeader) {
+        if (!authHeader)
+            return null;
+        const token = JSON.parse(authHeader)?.token;
+        if (!token)
+            return null;
+        return await this.validateToken(token);
+    }
+    // Validate the token 
+    async validateToken(token) {
+        const payload = await this.decrypt(token);
+        if (!payload)
+            return null;
+        // Check if token is expired
+        if (new Date() > new Date(payload.expires)) {
+            return null;
+        }
+        return { data: payload.data, expires: payload.expires, token };
+    }
+    // Encrypt data into a JWT
+    async encrypt(payload) {
+        return await new jose_1.SignJWT(payload)
+            .setProtectedHeader({ alg: 'HS256' })
+            .setIssuedAt()
+            .setExpirationTime('7d') // 7 days expiration
+            .sign(key);
+    }
+    // Function to decrypt and verify a JWT
+    async decrypt(token) {
+        try {
+            const { payload } = await (0, jose_1.jwtVerify)(token, key, {
+                algorithms: ['HS256'],
+            });
+            return payload;
+        }
+        catch (e) {
+            console.error('Error verifying token:', e);
+            return null;
+        }
+    }
+}
+exports.Session = Session;
diff --git a/server/src/models/auth/Session.ts b/server/src/models/auth/Session.ts
new file mode 100644
index 00000000..f003dbc3
--- /dev/null
+++ b/server/src/models/auth/Session.ts
@@ -0,0 +1,83 @@
+import { JWTPayload, SignJWT, jwtVerify } from 'jose';
+import { Uuid } from '@tribelike/types';
+import { jwtSecret } from "../../config"
+import { TextEncoder } from 'util';
+
+// In-memory token store?
+// const tokenMap: Record<Uuid, AuthToken> = {};
+
+const key = new TextEncoder().encode(jwtSecret);
+
+export interface AuthSessionData {
+  userId: Uuid;
+}
+
+export interface PasskeySessionData {
+  currentChallengeOptions: PublicKeyCredentialCreationOptionsJSON | PublicKeyCredentialRequestOptionsJSON;
+  loggedInUser: {id: Uuid, email: string};
+}
+
+export type SessionData = AuthSessionData | PasskeySessionData;
+
+export type TokenPayload = {
+  data: SessionData;
+  expires: Date;
+}
+
+export interface ISession {
+  data: SessionData;
+  expires: Date;
+  token: string;
+}
+
+export class Session {
+  // Generate a JWToken, valid default 7 days
+  async createToken(data: SessionData, valid: number = 7 * 24 * 60): Promise<ISession> {
+    const expires = new Date(Date.now() + valid * 60 * 1000);
+    const session: TokenPayload = { data, expires };
+    const token = await this.encrypt(session);
+    return { data, token, expires };
+  }
+
+  // Validate the token from the Authorization header
+  async validateHeader(authHeader?: string): Promise<ISession | null> {
+    if (!authHeader) return null;
+    const token = JSON.parse(authHeader)?.token;
+    if (!token) return null;
+    
+    return await this.validateToken(token);
+  }
+  
+  // Validate the token 
+  async validateToken(token: string): Promise<ISession | null> {
+    const payload = await this.decrypt(token);
+    if (!payload) return null;
+    // Check if token is expired
+    if (new Date() > new Date(payload.expires)) {
+      return null;
+    }
+    return { data: payload.data, expires: payload.expires, token };
+  }
+
+  // Encrypt data into a JWT
+  private async encrypt(payload: TokenPayload): Promise<string> {
+    return await new SignJWT(payload)
+      .setProtectedHeader({ alg: 'HS256' })
+      .setIssuedAt()
+      .setExpirationTime('7d') // 7 days expiration
+      .sign(key);
+  }
+
+  // Function to decrypt and verify a JWT
+  private async decrypt(token: string): Promise<TokenPayload | null> {
+    try {
+      const { payload } = await jwtVerify(token, key, {
+        algorithms: ['HS256'],
+      });
+      return payload as TokenPayload;
+    } catch (e) {
+      console.error('Error verifying token:', e);
+      return null;
+    }
+  }
+}
diff --git a/server/src/models/index.js b/server/src/models/index.js
new file mode 100644
index 00000000..7d5956da
--- /dev/null
+++ b/server/src/models/index.js
@@ -0,0 +1,59 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.userSettings = exports.profiles = exports.users = exports.magicLinks = exports.passkeys = exports.sessions = exports.userSettingStore = exports.magicLinkStore = exports.profileStore = exports.userStore = exports.credentialStore = void 0;
+const lib_1 = require("../lib");
+const Session_1 = require("./auth/Session");
+const Passkey_1 = require("./auth/Passkey");
+const User_1 = require("./User");
+const MagicLink_1 = require("./auth/MagicLink");
+const UserSetting_1 = require("./UserSetting");
+const Profile_1 = require("./Profile");
+const config_1 = require("../config");
+// Create stores for all models
+const store = lib_1.Store.getInstance();
+store.setStoreType(config_1.storeType);
+const credentialStore = store.getStore('Credential');
+exports.credentialStore = credentialStore;
+const userStore = store.getStore('User');
+exports.userStore = userStore;
+const magicLinkStore = store.getStore('MagicLink');
+exports.magicLinkStore = magicLinkStore;
+const userSettingStore = store.getStore('UserSetting');
+exports.userSettingStore = userSettingStore;
+const profileStore = store.getStore('Profile');
+exports.profileStore = profileStore;
+userStore.setRelatedStore('profiles', profileStore);
+userStore.setRelatedStore('settings', userSettingStore);
+// Create models
+const sessions = new Session_1.Session();
+exports.sessions = sessions;
+const passkeys = new Passkey_1.PasskeyModel(credentialStore);
+exports.passkeys = passkeys;
+const users = new User_1.UserModel(userStore);
+exports.users = users;
+const profiles = new Profile_1.ProfileModel(profileStore);
+exports.profiles = profiles;
+const magicLinks = new MagicLink_1.MagicLinkModel(magicLinkStore);
+exports.magicLinks = magicLinks;
+const userSettings = new UserSetting_1.UserSettingModel(userSettingStore);
+exports.userSettings = userSettings;
+__exportStar(require("./auth/Session"), exports);
+__exportStar(require("./auth/Passkey"), exports);
+__exportStar(require("./auth/MagicLink"), exports);
+__exportStar(require("./User"), exports);
+__exportStar(require("./Profile"), exports);
+__exportStar(require("./UserSetting"), exports);
diff --git a/server/src/models/index.ts b/server/src/models/index.ts
new file mode 100644
index 00000000..412b69ae
--- /dev/null
+++ b/server/src/models/index.ts
@@ -0,0 +1,48 @@
+import { Store } from '../lib';
+import { Session } from './auth/Session';
+import { PasskeyCredential, PasskeyModel } from './auth/Passkey';
+import { User, UserModel } from './User';
+import { MagicLink, MagicLinkModel } from './auth/MagicLink';
+import { UserSetting, UserSettingModel } from './UserSetting';
+import { Profile, ProfileModel } from './Profile';
+import { storeType } from '../config';
+
+// Create stores for all models
+const store = Store.getInstance();
+store.setStoreType(storeType);
+
+const credentialStore = store.getStore<PasskeyCredential>('Credential');
+const userStore = store.getStore<User>('User');
+const magicLinkStore = store.getStore<MagicLink>('MagicLink');
+const userSettingStore = store.getStore<UserSetting>('UserSetting');
+const profileStore = store.getStore<Profile>('Profile');
+userStore.setRelatedStore('profiles', profileStore);
+userStore.setRelatedStore('settings', userSettingStore);
+
+// Create models
+const sessions = new Session();
+const passkeys = new PasskeyModel(credentialStore);
+const users = new UserModel(userStore);
+const profiles = new ProfileModel(profileStore);
+const magicLinks = new MagicLinkModel(magicLinkStore);
+const userSettings = new UserSettingModel(userSettingStore);
+
+export * from './auth/Session';
+export * from './auth/Passkey';
+export * from './auth/MagicLink';
+export * from './User';
+export * from './Profile';
+export * from './UserSetting';
+export {
+  credentialStore,
+  userStore,
+  profileStore,
+  magicLinkStore,
+  userSettingStore,
+  sessions,
+  passkeys,
+  magicLinks,
+  users,
+  profiles,
+  userSettings,
+}
diff --git a/server/src/routes/index.js b/server/src/routes/index.js
new file mode 100644
index 00000000..0ef08846
--- /dev/null
+++ b/server/src/routes/index.js
@@ -0,0 +1,53 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const v1_1 = __importDefault(require("./v1"));
+const v2_1 = __importDefault(require("./v2"));
+const routers = {
+    v1: v1_1.default,
+    v2: v2_1.default,
+};
+// Versioned routes 
+const router = (0, express_1.Router)();
+// Default to latest version
+router.use(`/api`, v2_1.default);
+// Add versioned routes
+router.use(`/api/v2`, v2_1.default);
+router.use(`/api/v1`, v1_1.default);
+// Fallback to previous version if a route is not available in the current version
+function fallback(req) {
+    if (!req.path.startsWith('/v')) {
+        return "v1";
+    }
+    else if (req.path.includes('/v2/')) {
+        return "v1";
+    }
+    return "";
+}
+router.use((req, res, next) => {
+    if (!res.pageFound && req.path.startsWith('/api/')) {
+        const nextVersion = fallback(req);
+        console.log("Fallback to version:", nextVersion);
+        res.pageFound = undefined;
+        if (nextVersion !== "") {
+            let fallbackUrl = req.originalUrl;
+            console.log("Fallback URL:", fallbackUrl);
+            if (!req.path.startsWith('/api/v')) {
+                fallbackUrl = fallbackUrl.replace('/api', `/api/${nextVersion}`);
+            }
+            else {
+                const path = req.path.split('/');
+                const version = path[2];
+                fallbackUrl = fallbackUrl.replace(`/api/${version}/`, `/api/${nextVersion}/`);
+            }
+            console.log("Fallback URL:", fallbackUrl);
+            res.redirect(fallbackUrl); // Can we omit the redirect?
+            return;
+        }
+    }
+    next();
+});
+exports.default = router;
diff --git a/server/src/routes/index.ts b/server/src/routes/index.ts
new file mode 100644
index 00000000..d59c3b71
--- /dev/null
+++ b/server/src/routes/index.ts
@@ -0,0 +1,63 @@
+import { Router, Request } from 'express';
+import routerV1 from './v1';
+import routerV2 from './v2';
+
+// TODO: generate open API documentation
+
+declare global {
+    namespace Express {
+        interface Response {
+            pageFound?: boolean;
+        }
+    }
+}
+
+const routers = {
+    v1: routerV1,
+    v2: routerV2,
+};
+
+// Versioned routes 
+const router = Router();
+
+// Default to latest version
+router.use(`/api`, routerV2);
+
+// Add versioned routes
+router.use(`/api/v2`, routerV2);
+router.use(`/api/v1`, routerV1);
+
+// Fallback to previous version if a route is not available in the current version
+function fallback(req: Request): keyof typeof routers | "" {
+    if (!req.path.startsWith('/v')) {
+        return "v1";
+    } else if (req.path.includes('/v2/')) {
+        return "v1";
+    } 
+    return "";
+}
+
+router.use((req, res, next) => {
+    if (!res.pageFound && req.path.startsWith('/api/')) {
+        const nextVersion = fallback(req);
+        console.log("Fallback to version:", nextVersion);
+        res.pageFound = undefined;
+        if (nextVersion !== "") {
+            let fallbackUrl = req.originalUrl;
+            console.log("Fallback URL:", fallbackUrl);
+            if (!req.path.startsWith('/api/v')) {
+                fallbackUrl = fallbackUrl.replace('/api', `/api/${nextVersion}`);
+            } else {
+                const path = req.path.split('/');
+                const version = path[2];
+                fallbackUrl = fallbackUrl.replace(`/api/${version}/`, `/api/${nextVersion}/`);
+            }
+            console.log("Fallback URL:", fallbackUrl);
+            res.redirect(fallbackUrl); // Can we omit the redirect?
+            return;
+        }
+    }
+    next();
+});
+
+export default router;
diff --git a/server/src/routes/v1/index.js b/server/src/routes/v1/index.js
new file mode 100644
index 00000000..37f4014c
--- /dev/null
+++ b/server/src/routes/v1/index.js
@@ -0,0 +1,26 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const activity_1 = __importDefault(require("../../api/activity"));
+const discussion_1 = __importDefault(require("../../api/discussion"));
+const interest_1 = __importDefault(require("../../api/interest"));
+const location_1 = __importDefault(require("../../api/location"));
+const plugin_1 = __importDefault(require("../../api/plugin"));
+const relation_1 = __importDefault(require("../../api/relation"));
+// import authRouter from '../../api/auth';
+// import userRouter from '../../api/user';
+// import profileRouter from '../../api/profile';
+const router = (0, express_1.Router)();
+router.use('/activity', activity_1.default);
+router.use('/discussion', discussion_1.default);
+router.use('/interest', interest_1.default);
+router.use('/location', location_1.default);
+router.use('/plugin', plugin_1.default);
+router.use('/relation', relation_1.default);
+// router.use('/auth', authRouter);
+// router.use('/user', userRouter);
+// router.use('/profile', profileRouter);
+exports.default = router;
diff --git a/server/src/routes/v1/index.ts b/server/src/routes/v1/index.ts
new file mode 100644
index 00000000..62803fad
--- /dev/null
+++ b/server/src/routes/v1/index.ts
@@ -0,0 +1,25 @@
+import { Router } from 'express';
+import activityRouter from '../../api/activity';
+import discussionRouter from '../../api/discussion';
+import interestRouter from '../../api/interest';
+import locationRouter from '../../api/location';
+import pluginRouter from '../../api/plugin';
+import relationRouter from '../../api/relation';
+
+// import authRouter from '../../api/auth';
+// import userRouter from '../../api/user';
+// import profileRouter from '../../api/profile';
+
+const router = Router();
+router.use('/activity', activityRouter);
+router.use('/discussion', discussionRouter);
+router.use('/interest', interestRouter);
+router.use('/location', locationRouter);
+router.use('/plugin', pluginRouter);
+router.use('/relation', relationRouter);
+
+// router.use('/auth', authRouter);
+// router.use('/user', userRouter);
+// router.use('/profile', profileRouter);
+
+export default router;
\ No newline at end of file
diff --git a/server/src/routes/v2/index.js b/server/src/routes/v2/index.js
new file mode 100644
index 00000000..a79e2a17
--- /dev/null
+++ b/server/src/routes/v2/index.js
@@ -0,0 +1,22 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const interest_1 = __importDefault(require("../../api/v2/interest"));
+const location_1 = __importDefault(require("../../api/v2/location"));
+const profile_1 = __importDefault(require("../../api/v2/profile"));
+const magicLinkRouter_1 = __importDefault(require("./magicLinkRouter"));
+const passkeyRouter_1 = __importDefault(require("./passkeyRouter"));
+const userRouter_1 = __importDefault(require("./userRouter"));
+const profileRouter_1 = __importDefault(require("./profileRouter"));
+const sessionRouter_1 = __importDefault(require("./sessionRouter"));
+const pluginRouter_1 = __importDefault(require("./pluginRouter"));
+const router = (0, express_1.Router)();
+router.use('/', sessionRouter_1.default, magicLinkRouter_1.default, passkeyRouter_1.default, userRouter_1.default, profileRouter_1.default, pluginRouter_1.default);
+router.use('/interest', interest_1.default);
+router.use('/location', location_1.default);
+router.use('/profile', profile_1.default);
+router.use('/plugins', pluginRouter_1.default);
+exports.default = router;
diff --git a/server/src/routes/v2/index.ts b/server/src/routes/v2/index.ts
new file mode 100644
index 00000000..ac58d21d
--- /dev/null
+++ b/server/src/routes/v2/index.ts
@@ -0,0 +1,30 @@
+import { Router } from 'express';
+import v2interestRouter from '../../api/v2/interest';
+import v2locationRouter from '../../api/v2/location';
+import v2profileRouter from '../../api/v2/profile';
+
+import magicLinkRouter from './magicLinkRouter';
+import passkeyRouter from './passkeyRouter';
+import userRouter from './userRouter';
+import profileRouter from './profileRouter';
+import sessionRouter from './sessionRouter';
+
+import pluginRouter from './pluginRouter';
+
+const router = Router();
+router.use('/',
+  sessionRouter,
+  magicLinkRouter,
+  passkeyRouter, 
+  userRouter, 
+  profileRouter,
+  pluginRouter,
+);
+
+router.use('/interest', v2interestRouter);
+router.use('/location', v2locationRouter);
+router.use('/profile', v2profileRouter);
+
+router.use('/plugins', pluginRouter);
+
+export default router;
diff --git a/server/src/routes/v2/magicLinkRouter.js b/server/src/routes/v2/magicLinkRouter.js
new file mode 100644
index 00000000..685464c4
--- /dev/null
+++ b/server/src/routes/v2/magicLinkRouter.js
@@ -0,0 +1,14 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const multer_1 = __importDefault(require("multer"));
+const magicLinkController_1 = __importDefault(require("../../controllers/auth/magicLinkController"));
+const router = (0, express_1.Router)();
+const upload = (0, multer_1.default)();
+router.get('/auth/magicLink/:token', magicLinkController_1.default.handleMagicLinkLogin);
+router.post('/auth/magicLink', upload.none(), magicLinkController_1.default.sendMagicLink);
+router.post('/auth/magicLink/resend', magicLinkController_1.default.resendMagicLink);
+exports.default = router;
diff --git a/server/src/routes/v2/magicLinkRouter.ts b/server/src/routes/v2/magicLinkRouter.ts
new file mode 100644
index 00000000..3728aa00
--- /dev/null
+++ b/server/src/routes/v2/magicLinkRouter.ts
@@ -0,0 +1,12 @@
+import { Router } from 'express';
+import multer from 'multer';
+import MagicLinkController from '../../controllers/auth/magicLinkController';
+
+const router = Router();
+const upload = multer();
+
+router.get('/auth/magicLink/:token', MagicLinkController.handleMagicLinkLogin);
+router.post('/auth/magicLink', upload.none(), MagicLinkController.sendMagicLink);
+router.post('/auth/magicLink/resend', MagicLinkController.resendMagicLink);
+
+export default router;
\ No newline at end of file
diff --git a/server/src/routes/v2/passkeyRouter.js b/server/src/routes/v2/passkeyRouter.js
new file mode 100644
index 00000000..32ef9e38
--- /dev/null
+++ b/server/src/routes/v2/passkeyRouter.js
@@ -0,0 +1,15 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const multer_1 = __importDefault(require("multer"));
+const passkeyController_1 = __importDefault(require("../../controllers/auth/passkeyController"));
+const router = (0, express_1.Router)();
+const upload = (0, multer_1.default)();
+router.post('/auth/passkey/registerStart', upload.none(), passkeyController_1.default.handleRegisterStart);
+router.post('/auth/passkey/registerFinish', upload.none(), passkeyController_1.default.handleRegisterFinish);
+router.post('/auth/passkey/loginStart', upload.none(), passkeyController_1.default.handleLoginStart);
+router.post('/auth/passkey/loginFinish', upload.none(), passkeyController_1.default.handleLoginFinish);
+exports.default = router;
diff --git a/server/src/routes/v2/passkeyRouter.ts b/server/src/routes/v2/passkeyRouter.ts
new file mode 100644
index 00000000..6fb651b4
--- /dev/null
+++ b/server/src/routes/v2/passkeyRouter.ts
@@ -0,0 +1,25 @@
+import { Router } from 'express';
+import multer from 'multer';
+import PasskeyController from '../../controllers/auth/passkeyController';
+
+const router = Router();
+const upload = multer();
+
+router.post('/auth/passkey/registerStart', 
+    upload.none(), 
+    PasskeyController.handleRegisterStart
+);
+router.post('/auth/passkey/registerFinish', 
+    upload.none(), 
+    PasskeyController.handleRegisterFinish
+);
+router.post('/auth/passkey/loginStart', 
+    upload.none(), 
+    PasskeyController.handleLoginStart
+);
+router.post('/auth/passkey/loginFinish', 
+    upload.none(), 
+    PasskeyController.handleLoginFinish
+);
+
+export default router;
\ No newline at end of file
diff --git a/server/src/routes/v2/pluginRouter.js b/server/src/routes/v2/pluginRouter.js
new file mode 100644
index 00000000..cdf0706a
--- /dev/null
+++ b/server/src/routes/v2/pluginRouter.js
@@ -0,0 +1,21 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const gun_1 = require("../../gun");
+const router = (0, express_1.Router)();
+router.get('/', (req, res) => {
+    try {
+        const gun = (0, gun_1.getGun)();
+        gun.get('plugins').once((data) => {
+            if (!data) {
+                return res.status(404).json({ message: 'No plugin data found' });
+            }
+            res.json(data);
+        });
+    }
+    catch (e) {
+        console.error(e);
+        res.status(500).json({ message: 'Internal server error' });
+    }
+});
+exports.default = router;
diff --git a/server/src/routes/v2/pluginRouter.ts b/server/src/routes/v2/pluginRouter.ts
new file mode 100644
index 00000000..9b983d40
--- /dev/null
+++ b/server/src/routes/v2/pluginRouter.ts
@@ -0,0 +1,24 @@
+import { Router } from 'express';
+import { getGun } from '../../gun';
+
+const router = Router();
+
+router.get('/', (req, res) => {
+  try {
+    const gun = getGun();
+    
+    gun.get('plugins').once((data: Object) => {
+      if (!data) {
+        return res.status(404).json({ message: 'No plugin data found' });
+      }
+      console.log(data);
+      res.json(data);
+    });
+
+  } catch (e) {
+    console.error(e);
+    res.status(500).json({ message: 'Internal server error' });
+  }
+});
+
+export default router;
diff --git a/server/src/routes/v2/profileRouter.js b/server/src/routes/v2/profileRouter.js
new file mode 100644
index 00000000..d4d64c73
--- /dev/null
+++ b/server/src/routes/v2/profileRouter.js
@@ -0,0 +1,18 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const multer_1 = __importDefault(require("multer"));
+const profileController_1 = __importDefault(require("../../controllers/profileController"));
+const authenticate_1 = require("../../middleware/authenticate");
+const upload = (0, multer_1.default)();
+const router = (0, express_1.Router)();
+router.get('/user/profiles', authenticate_1.authenticate, profileController_1.default.GetAllProfilesForUser);
+router.get('/profiles', profileController_1.default.GetAllProfiles);
+router.post('/profiles', authenticate_1.authenticate, upload.none(), profileController_1.default.CreateProfile);
+router.get('/profile/:id', authenticate_1.authenticate, profileController_1.default.GetProfileById);
+router.put('/profile/:id', authenticate_1.authenticate, upload.none(), profileController_1.default.UpdateProfile);
+router.delete('/profile/:id', authenticate_1.authenticate, profileController_1.default.DeleteProfile);
+exports.default = router;
diff --git a/server/src/routes/v2/profileRouter.ts b/server/src/routes/v2/profileRouter.ts
new file mode 100644
index 00000000..f3befe66
--- /dev/null
+++ b/server/src/routes/v2/profileRouter.ts
@@ -0,0 +1,19 @@
+import { Router } from 'express';
+import multer from 'multer';
+import ProfileController from '../../controllers/profileController';
+import { authenticate } from '../../middleware/authenticate';
+
+const upload = multer();
+const router = Router();
+
+router.get('/user/profiles', authenticate, ProfileController.GetAllProfilesForUser);
+
+router.get('/profiles', ProfileController.GetAllProfiles);
+router.post('/profiles', authenticate, upload.none(), ProfileController.CreateProfile)
+
+router.get('/profile/:id', authenticate, ProfileController.GetProfileById);
+router.put('/profile/:id', authenticate, upload.none(), ProfileController.UpdateProfile);
+router.delete('/profile/:id', authenticate, ProfileController.DeleteProfile);
+
+export default router;
+
diff --git a/server/src/routes/v2/sessionRouter.js b/server/src/routes/v2/sessionRouter.js
new file mode 100644
index 00000000..bddacb1e
--- /dev/null
+++ b/server/src/routes/v2/sessionRouter.js
@@ -0,0 +1,11 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const session_1 = require("../../controllers/auth/session");
+const router = (0, express_1.Router)();
+router.get('/auth/session', session_1.handleGetSession);
+router.post('/auth/logout', session_1.handleLogout);
+// deprecated
+router.get('/session', session_1.handleGetSession);
+router.post('/logout', session_1.handleLogout);
+exports.default = router;
diff --git a/server/src/routes/v2/sessionRouter.ts b/server/src/routes/v2/sessionRouter.ts
new file mode 100644
index 00000000..3fcc94c7
--- /dev/null
+++ b/server/src/routes/v2/sessionRouter.ts
@@ -0,0 +1,12 @@
+import { Router } from 'express';
+import { handleGetSession, handleLogout } from '../../controllers/auth/session';
+
+const router = Router();
+
+router.get('/auth/session', handleGetSession);
+router.post('/auth/logout', handleLogout);
+
+// deprecated
+router.get('/session', handleGetSession);
+router.post('/logout', handleLogout);
+export default router;
\ No newline at end of file
diff --git a/server/src/routes/v2/userRouter.js b/server/src/routes/v2/userRouter.js
new file mode 100644
index 00000000..9751f631
--- /dev/null
+++ b/server/src/routes/v2/userRouter.js
@@ -0,0 +1,23 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const express_1 = require("express");
+const multer_1 = __importDefault(require("multer"));
+const userController_1 = __importDefault(require("../../controllers/userController"));
+const authenticate_1 = require("../../middleware/authenticate");
+// TODO: put that in UserController
+const magicLinkController_1 = __importDefault(require("../../controllers/auth/magicLinkController"));
+const router = (0, express_1.Router)();
+const upload = (0, multer_1.default)();
+router.get('/users', authenticate_1.authenticate, userController_1.default.GetUsers);
+router.get('/user', authenticate_1.authenticate, userController_1.default.GetUser);
+router.post('/user', upload.none(), magicLinkController_1.default.handleAccountCreate);
+router.put('/user', authenticate_1.authenticate, userController_1.default.UpdateUser);
+router.delete('/user', authenticate_1.authenticate, userController_1.default.DeleteUser);
+// TODO: Implement routes for user activities, discussions, and profiles
+// router.get('/user/:id/activities', UserController.getActivitiesByUserId);
+// router.get('/user/:id/discussions', UserController.getDiscussionsByUserId);
+// router.get('/user/:id/profiles', UserController.getProfilesByUserId);
+exports.default = router;
diff --git a/server/src/routes/v2/userRouter.ts b/server/src/routes/v2/userRouter.ts
new file mode 100644
index 00000000..52189ce2
--- /dev/null
+++ b/server/src/routes/v2/userRouter.ts
@@ -0,0 +1,22 @@
+import { Router } from 'express';
+import multer from 'multer';
+import UserController from '../../controllers/userController';
+import { authenticate } from '../../middleware/authenticate';
+// TODO: put that in UserController
+import MagicLinkController from '../../controllers/auth/magicLinkController';
+
+const router = Router();
+const upload = multer();
+
+router.get('/users', authenticate, UserController.GetUsers);
+router.get('/user', authenticate, UserController.GetUser);
+router.post('/user', upload.none(), MagicLinkController.handleAccountCreate);
+router.put('/user', authenticate, UserController.UpdateUser);
+router.delete('/user', authenticate, UserController.DeleteUser);
+
+// TODO: Implement routes for user activities, discussions, and profiles
+// router.get('/user/:id/activities', UserController.getActivitiesByUserId);
+// router.get('/user/:id/discussions', UserController.getDiscussionsByUserId);
+// router.get('/user/:id/profiles', UserController.getProfilesByUserId);
+
+export default router;
diff --git a/server/src/swagger.js b/server/src/swagger.js
new file mode 100644
index 00000000..e9cfcb41
--- /dev/null
+++ b/server/src/swagger.js
@@ -0,0 +1,32 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const swagger_autogen_1 = __importDefault(require("swagger-autogen"));
+const doc = {
+    info: {
+        version: 'v1.0.0',
+        title: 'Tribelike API',
+        description: ''
+    },
+    servers: [
+        {
+            url: 'http://localhost:3000',
+            description: ''
+        },
+    ],
+    components: {
+        securitySchemes: {
+            bearerAuth: {
+                type: 'http',
+                scheme: 'bearer',
+            }
+        }
+    }
+};
+const outputFile = './swagger_output.json';
+const endpointsFiles = [
+    './routes/index.ts',
+];
+(0, swagger_autogen_1.default)({ openapi: '3.0.0' })(outputFile, endpointsFiles, doc);
diff --git a/server/src/swagger.ts b/server/src/swagger.ts
new file mode 100644
index 00000000..039d921d
--- /dev/null
+++ b/server/src/swagger.ts
@@ -0,0 +1,30 @@
+import swaggerAutogen from 'swagger-autogen';
+
+const doc = {
+    info: {
+        version: 'v1.0.0',
+        title: 'Tribelike API',
+        description: ''
+    },
+    servers: [
+        {
+            url: 'http://localhost:3000',
+            description: ''
+        },
+    ],
+    components: {
+        securitySchemes: {
+            bearerAuth: {
+                type: 'http',
+                scheme: 'bearer',
+            }
+        }
+    }
+};
+
+const outputFile = './swagger_output.json';
+const endpointsFiles = [
+    './routes/index.ts',
+];
+
+swaggerAutogen({openapi: '3.0.0'})(outputFile, endpointsFiles, doc);
diff --git a/server/src/swagger_output.json b/server/src/swagger_output.json
new file mode 100644
index 00000000..84784a0b
--- /dev/null
+++ b/server/src/swagger_output.json
@@ -0,0 +1,1773 @@
+{
+  "openapi": "3.0.0",
+  "info": {
+    "version": "v1.0.0",
+    "title": "Tribelike API",
+    "description": ""
+  },
+  "servers": [
+    {
+      "url": "http://localhost:3000",
+      "description": ""
+    }
+  ],
+  "paths": {
+    "/api/users": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        }
+      }
+    },
+    "/api/user/{id}": {
+      "put": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "404": {
+            "description": "Not Found"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "image": {
+                    "example": "any"
+                  },
+                  "username": {
+                    "example": "any"
+                  },
+                  "email": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      },
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "404": {
+            "description": "Not Found"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "404": {
+            "description": "Not Found"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        }
+      }
+    },
+    "/api/interest/{id}/relations": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/interest/interests/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/interest/locations/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/location/byCoords": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "lat",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          },
+          {
+            "name": "lng",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/location/byBounds": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "northeast",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          },
+          {
+            "name": "southwest",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/location/updateCurrent": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/location/{id}/profiles": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/location/interests/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/location/locations/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/profile/locations/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/users": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        }
+      }
+    },
+    "/api/v2/user/{id}": {
+      "put": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "404": {
+            "description": "Not Found"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "image": {
+                    "example": "any"
+                  },
+                  "username": {
+                    "example": "any"
+                  },
+                  "email": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      },
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "404": {
+            "description": "Not Found"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "404": {
+            "description": "Not Found"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        }
+      }
+    },
+    "/api/v2/interest/{id}/relations": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/interest/interests/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/interest/locations/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/location/byCoords": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "lat",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          },
+          {
+            "name": "lng",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/location/byBounds": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "northeast",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          },
+          {
+            "name": "southwest",
+            "in": "query",
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/location/updateCurrent": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/location/{id}/profiles": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/location/interests/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/location/locations/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v2/profile/locations/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/passkey/logout": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "500": {
+            "description": "Internal Server Error"
+          }
+        }
+      }
+    },
+    "/api/v1/passkey/registerStart": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "username": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    },
+    "/api/v1/passkey/registerFinish": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        }
+      }
+    },
+    "/api/v1/passkey/loginStart": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "username": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    },
+    "/api/v1/passkey/loginFinish": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "id": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    },
+    "/api/v1/activity/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/auth/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/auth/login": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          },
+          "401": {
+            "description": "Unauthorized"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "username": {
+                    "example": "any"
+                  },
+                  "password": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    },
+    "/api/v1/auth/logout": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        }
+      }
+    },
+    "/api/v1/auth/refresh": {
+      "post": {
+        "description": "",
+        "responses": {
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/discussion/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/discussion/vote/yes": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/discussion/vote/no": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/interest/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/interest/byId/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/interest/add": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/interest/remove": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/interest/ask": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "profileId": {
+                    "example": "any"
+                  },
+                  "interestId": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    },
+    "/api/v1/interest/invite": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "interestId": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    },
+    "/api/v1/interest/link": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/location/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/location/byId/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/location/add": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/location/remove": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/location/ask": {
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          }
+        },
+        "requestBody": {
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "profileId": {
+                    "example": "any"
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    },
+    "/api/v1/location/link": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/plugin/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/plugin/active": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/plugin/settings": {
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/profile/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/profile/byId/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/relation/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "delete": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/user/": {
+      "get": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "post": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      },
+      "put": {
+        "description": "",
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    },
+    "/api/v1/user/byId/{id}": {
+      "get": {
+        "description": "",
+        "parameters": [
+          {
+            "name": "id",
+            "in": "path",
+            "required": true,
+            "schema": {
+              "type": "string"
+            }
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "OK"
+          },
+          "400": {
+            "description": "Bad Request"
+          }
+        }
+      }
+    }
+  },
+  "components": {
+    "securitySchemes": {
+      "bearerAuth": {
+        "type": "http",
+        "scheme": "bearer"
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/server/tests/lib/FileStore.test.ts b/server/tests/lib/FileStore.test.ts
new file mode 100644
index 00000000..7e7dc896
--- /dev/null
+++ b/server/tests/lib/FileStore.test.ts
@@ -0,0 +1,99 @@
+import { beforeEach, describe, expect, it } from 'vitest';
+import { Uuid, GenericObject } from '@tribelike/types/Uuid';
+import { StoreOptions, FileStore } from '../../src/lib/Store';
+
+interface iTestData extends GenericObject {
+    id: Uuid;
+    name: string;
+}
+
+class TestData implements iTestData {
+    id: Uuid;
+    name: string;
+    constructor(id: Uuid, name: string) {
+        this.id = id;
+        this.name = name;
+    }
+    getName(): string {
+        return this.name;
+    }
+}
+
+const mockData: TestData[] = [
+    new TestData('1', 'Alice'),
+    new TestData('2', 'Bob'),
+];
+
+describe('FileStore', () => {
+    const fileStoreOptions: StoreOptions<TestData> = { 
+        constructor: TestData 
+    };
+    
+    let fileStore: FileStore<TestData> = new FileStore<TestData>(
+        'FileStore.test', fileStoreOptions
+    );
+    fileStore.index('name');
+
+    beforeEach(async () => {
+        await fileStore.clear();
+        await fileStore.create(mockData[0]);
+        await fileStore.create(mockData[1]);
+        // await fileStore.debug();
+    });
+
+    it('should get all data', async () => {
+        const data: TestData[] = await fileStore.getAll();
+        expect(data).toEqual(mockData);
+        expect(data).toBeInstanceOf(Array<TestData>);
+        expect(data[0].getName()).toEqual(mockData[0].name);
+    });
+
+    it('should create new data', async () => {
+        const newData: TestData = new TestData('3', 'Charlie');
+        const created: TestData | null = await fileStore.create(newData);
+        const data = await fileStore.getAll();
+        expect(data).toContainEqual(newData);
+        expect(created).toEqual(newData);
+        expect(created).toBeInstanceOf(TestData);
+    });
+
+    it('should get data by id', async () => {
+        const data = await fileStore.getById('1');
+        expect(data).toEqual(mockData[0]);
+        expect(data?.getName()).toEqual(mockData[0].name);
+        expect(data).toBeInstanceOf(TestData);
+    });
+
+    it('should get data via getBy for name', async () => {
+        const data = await fileStore.getBy('name', 'Alice');
+        expect(data).toEqual(mockData[0]);
+        expect(data?.getName()).toEqual(mockData[0].name);
+        expect(data).toBeInstanceOf(TestData);
+    });
+
+    it('should update data', async () => {
+        const updatedData = new TestData('1', 'Alice Updated');
+        const updated = await fileStore.update('1', updatedData);
+        const data: TestData | null = await fileStore.getById('1');
+        expect(data?.name).toBe('Alice Updated');
+        
+        expect(data?.getName()).toEqual(updatedData.name);
+        expect(updated?.name).toBe('Alice Updated');
+    
+        expect(updated?.getName()).toEqual(updatedData.name);
+    });
+
+    it('should delete data', async () => {
+        const databefore = await fileStore.getById('1');
+        const success = await fileStore.delete('1');
+        expect(success).toBe(true);
+        const data = await fileStore.getById('1');
+        expect(data).toBeNull();
+    });
+
+    it('should clear all data', async () => {
+        await fileStore.clear();
+        const data = await fileStore.getAll();
+        expect(data).toEqual([]);
+    });
+});
diff --git a/server/tests/lib/Store.test.ts b/server/tests/lib/Store.test.ts
new file mode 100644
index 00000000..2725c6ec
--- /dev/null
+++ b/server/tests/lib/Store.test.ts
@@ -0,0 +1,50 @@
+import { beforeEach, describe, expect, it } from 'vitest';
+import { Store, IStore } from '../../src/lib/Store';
+import { Uuid, GenericObject } from '@tribelike/types/Uuid';
+
+interface TestObject extends GenericObject {
+    id: Uuid;
+    name: string;
+}
+
+const testObject: TestObject = { id: '1', name: 'Test Object' };
+
+describe('Store', () => {
+    Store.getInstance().setStoreType('memory');
+    let store: IStore<TestObject> = Store.getInstance().getStore<TestObject>('Store.test');
+
+    beforeEach(async () => {
+        await store.clear();
+    });
+
+    it('should add a new object', async () => {
+        const addedObject = await store.create(testObject);
+        expect(addedObject).toEqual(testObject);
+    });
+
+    it('should get all objects', async () => {
+        await store.create(testObject);
+        const objects = await store.getAll();
+        expect(objects).toContainEqual(testObject);
+    });
+
+    it('should get an object by id', async () => {
+        await store.create(testObject);
+        const object = await store.getById('1');
+        expect(object).toEqual(testObject);
+    });
+
+    it('should update an object by id', async () => {
+        await store.create(testObject);
+        const updatedObject = await store.update('1', { name: 'Updated Object' });
+        expect(updatedObject).toEqual({ ...testObject, name: 'Updated Object' });
+    });
+
+    it('should delete an object by id', async () => {
+        await store.create(testObject);
+        const deleted = await store.delete('1');
+        expect(deleted).toBe(true);
+        const object = await store.getById('1');
+        expect(object).toBeNull();
+    });
+});
diff --git a/server/tests/models/MagicLink.test.ts b/server/tests/models/MagicLink.test.ts
new file mode 100644
index 00000000..21c8f111
--- /dev/null
+++ b/server/tests/models/MagicLink.test.ts
@@ -0,0 +1,103 @@
+import { beforeEach, describe, expect, it } from 'vitest';
+import { Store } from '../../src/lib/Store';
+import { MagicLink, MagicLinkModel } from '../../src/models';
+import { Uuid } from '@tribelike/types';
+
+describe('MagicLinkModel', () => {
+  Store.getInstance().setStoreType('memory');
+  const magicLinkStore = Store.getInstance().getStore<MagicLink>('MagicLink');
+  let magicLinkModel: MagicLinkModel = new MagicLinkModel(magicLinkStore);
+
+  const userId1: Uuid = 'user-123';
+  const userId2: Uuid = 'user-456';
+  
+  const futureDate = new Date(Date.now() + 3600000); // 1 hour in the future
+  const pastDate = new Date(Date.now() - 3600000); // 1 hour in the past
+  
+  beforeEach(async () => {
+    await magicLinkModel.store.clear();
+    
+    // Add test data
+    await magicLinkModel.store.create(new MagicLink({
+      id: '1' as Uuid,
+      token: 'valid-token-1',
+      userId: userId1,
+      expires: futureDate
+    }));
+    
+    await magicLinkModel.store.create(new MagicLink({
+      id: '2' as Uuid,
+      token: 'valid-token-2',
+      userId: userId1,
+      expires: futureDate
+    }));
+    
+    await magicLinkModel.store.create(new MagicLink({
+      id: '3' as Uuid,
+      token: 'expired-token',
+      userId: userId2,
+      expires: pastDate
+    }));
+  });
+
+  it('should get magic link by token', async () => {
+    const magicLink = await magicLinkModel.getByToken('valid-token-1');
+    expect(magicLink).not.toBeNull();
+    expect(magicLink?.token).toBe('valid-token-1');
+    expect(magicLink?.userId).toBe(userId1);
+  });
+
+  it('should return null for non-existent token', async () => {
+    const magicLink = await magicLinkModel.getByToken('non-existent-token');
+    expect(magicLink).toBeNull();
+  });
+
+  it('should validate a valid token', async () => {
+    const userId = await magicLinkModel.consumeToken('valid-token-1');
+    expect(userId).toBe(userId1);
+
+    const consumedToken = await magicLinkModel.getByToken('valid-token-1');
+    expect(consumedToken).toBeNull();
+  });
+
+  it('should invalidate an expired token', async () => {
+    const userId = await magicLinkModel.consumeToken('expired-token');
+    expect(userId).toBeNull();
+
+    const consumedToken = await magicLinkModel.getByToken('expired-token');
+    expect(consumedToken).toBeNull();
+  });
+
+  it('should invalidate a non-existent token', async () => {
+    const userId = await magicLinkModel.consumeToken('non-existent-token');
+    expect(userId).toBeNull();
+  });
+
+  it('should create a new magic link', async () => {
+    const newUserId: Uuid = 'new-user';
+    const newMagicLink = await magicLinkModel.create({ userId: newUserId });
+    expect(newMagicLink).not.toBeNull();
+    expect(newMagicLink!.userId).toBe(newUserId);
+    expect(newMagicLink!.token).toBeDefined();
+    expect(newMagicLink!.expires).toBeInstanceOf(Date);
+    expect(newMagicLink!.expires.getTime()).toBeGreaterThan(Date.now());
+  });
+
+  it('should delete expired links', async () => {
+    // Verify we have an expired link before cleaning up
+    const beforeCleanup = await magicLinkModel.getByToken('expired-token');
+    expect(beforeCleanup).not.toBeNull();
+    
+    // Delete expired links
+    const deletedCount = await magicLinkModel.cleanExpiredLinks();
+    expect(deletedCount).toBe(1);
+    
+    // Verify the expired link was deleted
+    const afterCleanup = await magicLinkModel.getByToken('expired-token');
+    expect(afterCleanup).toBeNull();
+    
+    // Verify valid links remain
+    const validLink = await magicLinkModel.getByToken('valid-token-1');
+    expect(validLink).not.toBeNull();
+  });
+});
diff --git a/server/tests/models/Profile.test.ts b/server/tests/models/Profile.test.ts
new file mode 100644
index 00000000..aba7da64
--- /dev/null
+++ b/server/tests/models/Profile.test.ts
@@ -0,0 +1,57 @@
+import { beforeEach, describe, expect, it } from 'vitest';
+import { Store } from '../../src/lib/Store';
+import { Profile, ProfileModel } from '../../src/models';
+import { Uuid } from '@tribelike/types/Uuid';
+
+describe('ProfileModel', () => {
+  Store.getInstance().setStoreType('memory');
+  const profileStore = Store.getInstance().getStore<Profile>('Profile');
+  let profileModel: ProfileModel = new ProfileModel(profileStore);
+
+  const userId: Uuid = 'user-123';
+  const anotherUserId: Uuid = 'another-user';
+  
+  beforeEach(async () => {
+    await profileModel.store.clear();
+    
+    // Add test data
+    await profileModel.store.create(new Profile({id: '1', email: 'test1@example.com', type: 'family', userId: userId, username: 'testUser1'}));
+    await profileModel.store.create(new Profile({id: '2', email: 'test2@example.com', type: 'friends', userId: userId, username: 'testUser2'}));
+    await profileModel.store.create(new Profile({id: '3', email: 'test3@example.com', type: 'work', userId: anotherUserId, username: 'testUser3'}));
+  });
+
+  it('should get all profiles by userId', async () => {
+    const userProfiles = await profileModel.getAllByUserId(userId);
+    expect(userProfiles).toHaveLength(2);
+    expect(userProfiles[0].userId).toBe(userId);
+    expect(userProfiles[1].userId).toBe(userId);
+    expect(userProfiles.map(p => p.type)).toContain('family');
+    expect(userProfiles.map(p => p.type)).toContain('friends');
+  });
+
+  it('should return empty array when no profiles found for userId', async () => {
+    const nonExistentUserId: Uuid = 'non-existent-user';
+    const userProfiles = await profileModel.getAllByUserId(nonExistentUserId);
+    expect(userProfiles).toHaveLength(0);
+  });
+
+  it('should create default profiles', async () => {
+    const newUserId: Uuid = 'new-user-456';
+    const email = 'newtest@example.com';
+    
+    const createdProfiles = await profileModel.createDefaultProfiles(newUserId, "username", email);
+    
+    expect(createdProfiles).toHaveLength(3);
+    expect(createdProfiles.map(p => p.type)).toEqual(expect.arrayContaining(['family', 'friends', 'work']));
+    
+    createdProfiles.forEach(profile => {
+      expect(profile.userId).toBe(newUserId);
+      expect(profile.email).toBe(email);
+      expect(typeof profile.id).toBe('string');
+    });
+
+    // Verify they were added to the store
+    const allUserProfiles = await profileModel.getAllByUserId(newUserId);
+    expect(allUserProfiles).toHaveLength(3);
+  });
+});
diff --git a/server/tests/models/User.test.ts b/server/tests/models/User.test.ts
new file mode 100644
index 00000000..f1002caa
--- /dev/null
+++ b/server/tests/models/User.test.ts
@@ -0,0 +1,75 @@
+import { beforeEach, describe, expect, it } from 'vitest';
+import { User, UserModel } from '../../src/models';
+import { Store } from '../../src/lib/Store';
+
+const testUser: User = {
+    id: '1', 
+    email: 'test@example.com',
+    emailVerified: true,
+    profiles: [], 
+    settings: []
+};
+
+describe('UserModel', () => {
+    Store.getInstance().setStoreType('memory');
+    const userStore = Store.getInstance().getStore<User>('User');
+    userStore.index('email');
+    let userModel: UserModel = new UserModel(userStore);
+
+    beforeEach(async () => {
+        await userModel.clear();
+    });
+
+    it('should create a new user', async () => {
+        const createdUser = await userModel.create(testUser);
+        expect(createdUser).toEqual(testUser);
+    });
+
+    it('should create a new user using only an email', async () => {
+        const createdUser = await userModel.create({ email: testUser.email });
+        expect(createdUser!.email).toEqual(testUser.email);
+    });
+
+    it('should get all users', async () => {
+        await userModel.create(testUser);
+        const users = await userModel.getAll();
+        expect(users).toContainEqual(testUser);
+    });
+
+    it('should get a user by id', async () => {
+        await userModel.create(testUser);
+        const user = await userModel.getById('1');
+        expect(user).toEqual(testUser);
+    });
+
+    it('should update a user by id', async () => {
+        await userModel.create(testUser);
+        const updatedUser = await userModel.update('1', { email: 'new@example.com' });
+        expect(updatedUser).toEqual({ ...testUser, email: 'new@example.com' });
+    });
+
+    it('should delete a user by id', async () => {
+        await userModel.create(testUser);
+        const deleted = await userModel.delete('1');
+        expect(deleted).toBe(true);
+        const user = await userModel.getById('1');
+        expect(user).toBeNull();
+    });
+    
+    it('should get a user by indexed email', async () => {
+        await userModel.create(testUser);
+        const user = await userModel.getByEmail('test@example.com');
+        expect(user).toEqual(testUser);
+    });
+
+    it('should not find a user by non-existing email', async () => {
+        const user = await userModel.getByEmail('nonexistent@example.com');
+        expect(user).toBeNull();
+    });
+    
+    it('should not create a user with an existing email', async () => {
+        await userModel.create(testUser);
+        const createdUser = await userModel.create(testUser);
+        expect(createdUser).toBeNull();
+    });
+});
diff --git a/server/tests/models/UserWithProfile.test.ts b/server/tests/models/UserWithProfile.test.ts
new file mode 100644
index 00000000..b63ece1e
--- /dev/null
+++ b/server/tests/models/UserWithProfile.test.ts
@@ -0,0 +1,44 @@
+import { beforeEach, describe, expect, it } from 'vitest';
+import { Store } from '../../src/lib/Store';
+import { 
+    User, UserModel, 
+    Profile, ProfileModel 
+} from '../../src/models';
+
+const testUser: User = new User({
+    id: '1', 
+    email: 'test@example.com',
+});
+const otherUser: User = new User({
+    id: '2', 
+    email: 'other@example.com',
+});
+
+describe('UserWithProfile', () => {
+    Store.getInstance().setStoreType('memory');
+    const userStore = Store.getInstance().getStore<User>('User');
+    const profileStore = Store.getInstance().getStore<Profile>('Profile');
+    let users: UserModel = new UserModel(userStore);
+    let profiles: ProfileModel = new ProfileModel(profileStore);
+    userStore.setRelatedStore('profiles', profileStore);
+
+    beforeEach(async () => {
+        await users.clear();
+        await profiles.clear();
+    });
+
+    it('should get a user including profiles', async () => {
+        const user = await users.create(testUser);
+        const other = await users.create(otherUser);
+        if (!user || !other) throw new Error('User create failed');
+        await profiles.createDefaultProfiles(user.id, "username", user.email);
+        await profiles.createDefaultProfiles(other.id, "username", other.email);
+        
+        const userWithProfiles = await users.getById('1', { profiles: true });
+        expect(userWithProfiles).toBeInstanceOf(User);
+        expect(userWithProfiles?.profiles).toHaveLength(3);
+        if (!userWithProfiles || !userWithProfiles.profiles) throw new Error('User with profiles not found');
+        expect(userWithProfiles.profiles[0].userId).toEqual(user?.id);
+    });
+
+});
diff --git a/server/tests/routes/userRouter.test.ts b/server/tests/routes/userRouter.test.ts
new file mode 100644
index 00000000..d42b7be5
--- /dev/null
+++ b/server/tests/routes/userRouter.test.ts
@@ -0,0 +1,134 @@
+import { describe, it, expect, vi, beforeEach } from 'vitest';
+import supertest from 'supertest';
+import express from 'express';
+import { Request, Response, NextFunction } from 'express';
+
+vi.mock('../../src/models', () => ({
+  users: {
+    getByEmail: vi.fn(),
+    create: vi.fn(),
+    getAll: vi.fn(),
+    getById: vi.fn(),
+    update: vi.fn(),
+    delete: vi.fn(),
+  }
+}));
+
+const user1 = { id: 'user1', email: 'user1@example.com', emailVerified: false };
+const user2 = { id: 'user2', email: 'user2@example.com', emailVerified: true };
+
+// Mock authentication middleware
+vi.mock('../../src/middleware/authenticate', () => ({
+  authenticate: vi.fn((req: Request, res: Response, next: NextFunction) => {
+    (req as any).session = { userId: user1.id };
+    next();
+  })
+}));
+
+// Import User model after mocking
+import { users } from '../../src/models';
+import userRouter from '../../src/routes/v2/userRouter';
+import { authenticate } from '../../src/middleware/authenticate';
+
+describe('User Router with Controller', () => {
+  let app: express.Application;
+  app = express();
+  app.use(express.json());
+  app.use('/v2', userRouter);
+  
+  beforeEach(() => {
+    vi.clearAllMocks();
+    
+    vi.mocked(users.getAll).mockResolvedValue([user1, user2]);
+    vi.mocked(users.create).mockResolvedValue(user1);
+    vi.mocked(users.getById).mockResolvedValue(user1);
+    vi.mocked(users.update).mockImplementation(
+      async (id, data) => ({ ...user1, emailVerified: true })
+    );
+    vi.mocked(users.delete).mockResolvedValue(true);
+  });
+
+  describe('GET /users', () => {
+    it('should call users.getAll model method', async () => {
+      const response = await supertest(app).get('/v2/users');
+      expect(response.status).toBe(403);
+      expect(users.getAll).not.toHaveBeenCalled();
+      expect(authenticate).toHaveBeenCalled();
+    });
+  });
+
+  describe('GET /user', () => {
+    it('should call users.getById with the authenticated user ID', async () => {
+      await supertest(app).get('/v2/user');
+      expect(users.getById).toHaveBeenCalledWith(user1.id, {include: {profiles: true}});
+      expect(authenticate).toHaveBeenCalled();
+    });
+
+    it('should return user data when found', async () => {
+      const response = await supertest(app).get('/v2/user');
+      expect(response.status).toBe(200);
+      expect(response.body).toHaveProperty('email', 'user1@example.com');
+      expect(response.body).toHaveProperty('emailVerified', false);
+    });
+    
+    it('should return 404 when user not found', async () => {
+      vi.mocked(users.getById).mockResolvedValueOnce(null);
+      const response = await supertest(app).get('/v2/user');
+      expect(response.status).toBe(404);
+    });
+  });
+
+  describe('PUT /user', () => {
+    it('should use authentication middleware', async () => {
+      await supertest(app).put('/v2/user').send({ emailVerified: true });
+      expect(authenticate).toHaveBeenCalled();
+    });
+
+    it('should call users.update with correct parameters', async () => {
+      const updateData = { emailVerified: true };
+      await supertest(app).put('/v2/user').send(updateData);
+      expect(users.update).toHaveBeenCalledWith(
+        'user1', {
+          emailVerified: true,
+          "image": "/images/default.jpeg",
+        });
+    });
+
+    it('should return updated user when successful', async () => {
+      const updateData = { emailVerified: true };
+      const response = await supertest(app).put('/v2/user').send(updateData);
+      expect(response.status).toBe(200);
+      expect(response.body).toHaveProperty('emailVerified', true);
+    });
+    
+    it('should return 404 when user not found', async () => {
+      vi.mocked(users.update).mockResolvedValueOnce(null);
+      const response = await supertest(app).put('/v2/user').send({ emailVerified: true });
+      expect(response.status).toBe(404);
+    });
+  });
+
+  describe('DELETE /user', () => {
+    it('should use authentication middleware', async () => {
+      await supertest(app).delete('/v2/user');
+      expect(authenticate).toHaveBeenCalled();
+    });
+
+    it('should call users.delete with user ID', async () => {
+      await supertest(app).delete('/v2/user');
+      expect(users.delete).toHaveBeenCalledWith(user1.id);
+    });
+
+    it('should return success message when user is deleted', async () => {
+      const response = await supertest(app).delete('/v2/user');
+      expect(response.status).toBe(200);
+      expect(response.body).toHaveProperty('success', 'User deleted');
+    });
+    
+    it('should return 404 when user not found', async () => {
+      vi.mocked(users.delete).mockResolvedValueOnce(false);
+      const response = await supertest(app).delete('/v2/user');
+      expect(response.status).toBe(404);
+    });
+  });
+});
