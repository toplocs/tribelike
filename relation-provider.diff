diff --git a/client/src/components/LocationRelations.vue b/client/src/components/LocationRelations.vue
new file mode 100644
index 00000000..7265c097
--- /dev/null
+++ b/client/src/components/LocationRelations.vue
@@ -0,0 +1,50 @@
+<template>
+  <section class="mb-8">
+    <div class="space-y-4">
+      <Headline>Topics:</Headline>
+      <SphereRelations
+        v-for="relationKey of topicToTopic"
+        :key="relationKey"
+        :relationKey="relationKey"
+      />
+    </div>
+  </section>
+
+  <Divider />
+
+  <section class="mb-8">
+    <div class="space-y-4">
+      <Headline>Locations:</Headline>
+      <SphereRelations
+        v-for="relationKey of topicToLocation"
+        :key="relationKey"
+        :relationKey="relationKey"
+      />
+    </div>
+  </section>
+
+  <Divider />
+
+  <section class="mb-8">
+    <div class="space-y-4">
+      <Headline>Profiles:</Headline>
+      <ProfileRelations
+        v-for="relationKey of profileToLocation"
+        :key="relationKey"
+        :relationKey="relationKey"
+      />
+    </div>
+  </section>
+</template>
+
+<script setup lang="ts">
+import Headline from '@/components/common/Headline.vue';
+import Divider from '@/components/common/Divider.vue';
+import SphereRelations from '@/components/SphereRelations.vue';
+import ProfileRelations from '@/components/ProfileRelations.vue';
+import {
+  topicToTopic,
+  topicToLocation,
+  profileToLocation,
+} from '@/assets/relationKeys';
+</script>
diff --git a/client/src/components/RelationButtons.vue b/client/src/components/RelationButtons.vue
index 5a2a2b93..9c5c3fe2 100644
--- a/client/src/components/RelationButtons.vue
+++ b/client/src/components/RelationButtons.vue
@@ -20,4 +20,4 @@ const props = defineProps<{
 const relationKeys = computed(() =>
   profileRelations.filter(x => x.accepts.includes(props.for))
 );
-</script>
\ No newline at end of file
+</script>
diff --git a/client/src/components/SphereRelations.vue b/client/src/components/SphereRelations.vue
index 14b107fb..9289249c 100644
--- a/client/src/components/SphereRelations.vue
+++ b/client/src/components/SphereRelations.vue
@@ -26,7 +26,7 @@
       v-if="populated.some(relation => relation.type === relationKey.id)"
       class="mt-4 flex flex-wrap gap-1"
     >
-      <u>{{ relationKey.active }} topic:</u>
+      <u>{{ relationKey.active }}</u>
       <span
         v-for="relation in populated"
         :key="relation.id"
@@ -49,7 +49,7 @@
       v-if="populated.some(relation => relation.type === relationKey.id)"
       class="mt-4 flex flex-wrap gap-1"
     >
-      <u>{{ relationKey.active }} location:</u>
+      <u>{{ relationKey.active }}</u>
       <span
         v-for="relation in populated"
         :key="relation.id"
diff --git a/client/src/components/TopicRelations.vue b/client/src/components/TopicRelations.vue
new file mode 100644
index 00000000..8ecd35df
--- /dev/null
+++ b/client/src/components/TopicRelations.vue
@@ -0,0 +1,56 @@
+<template>
+  <section class="mb-8">
+    <div class="space-y-4">
+      <SphereRelations
+        identifier=""
+        relationKey="relation"
+      />
+    </div>
+  </section>
+
+  <Divider />
+
+  <section class="mb-8">
+    <div class="space-y-4">
+      <SphereRelations
+        v-for="relationKey of topicToTopic"
+        identifier="topic"
+        :relationKey="relationKey"
+      />
+    </div>
+  </section>
+
+  <Divider />
+
+  <section class="mb-8">
+    <div class="space-y-4">
+      <SphereRelations
+        v-for="relationKey of topicToLocation"
+        identifier="location"
+        :relationKey="relationKey"
+      />
+    </div>
+  </section>
+
+  <Divider />
+
+  <section class="mb-8">
+    <div class="space-y-4">
+      <ProfileRelations
+        v-for="relationKey of profileToTopic"
+        :relationKey="relationKey"
+      />
+    </div>
+  </section>
+</template>
+
+<script setup lang="ts">
+import Divider from '@/components/common/Divider.vue';
+import SphereRelations from '@/components/SphereRelations.vue';
+import ProfileRelations from '@/components/ProfileRelations.vue';
+import {
+  profileToTopic,
+  topicToTopic,
+  topicToLocation
+} from '@/assets/relationKeys';
+</script>
diff --git a/client/src/components/dragdrop/Droppable.vue b/client/src/components/dragdrop/Droppable.vue
index e86cf761..d966a8f4 100644
--- a/client/src/components/dragdrop/Droppable.vue
+++ b/client/src/components/dragdrop/Droppable.vue
@@ -8,7 +8,7 @@
     }"
   >
     <u v-if="title" class="text-sm">
-      {{ capitalized }}:
+      {{ title }}:
     </u>
 
     <slot />
@@ -18,7 +18,7 @@
 
 <script setup lang="ts">
 import { computed } from 'vue';
-import { useDroppable } from '@vue-dnd-kit/core';
+import { useDroppable, DnDOperations } from '@vue-dnd-kit/core';
 
 const emit = defineEmits<{
   (e: 'drop'): void;
@@ -30,16 +30,11 @@ const { title, id, groups } = defineProps<{
   groups: string[];
 }>();
 
-const capitalized = computed(() => {
-  if (!title) return '';
-  return title.charAt(0).toUpperCase() + title.slice(1);
-});
-
 const { elementRef, isOvered, isAllowed } = useDroppable({
   id,
   groups,
   events: {
-    onDrop: (e) => emit('drop', id)
+    onDrop: (e) => emit('drop', id),
   },
 });
 </script>
\ No newline at end of file
diff --git a/client/src/components/dragdrop/Relations.vue b/client/src/components/dragdrop/Relations.vue
index 29ab51e6..49e769fa 100644
--- a/client/src/components/dragdrop/Relations.vue
+++ b/client/src/components/dragdrop/Relations.vue
@@ -1,8 +1,8 @@
 <template>
-  <div class="space-y-2">
+  <div class="space-y-2" :id="version" :key="version">
     <Droppable
       id="relation"
-      title="Related to"
+      title="related to"
       :groups="['topic', 'location']"
       @drop="handleDrop"
       class="flex flex-row flex-wrap gap-1 items-center cursor-pointer"
@@ -29,10 +29,10 @@
     </Droppable>
 
     <Droppable
-      v-for="relationKey of topics"
+      v-for="relationKey of relationKeys"
       :id="relationKey.id"
-      :title="`${relationKey.active} topic`"
-      :groups="['topic']"
+      :title="`${relationKey.active}`"
+      :groups="relationKey.accepts"
       @drop="handleDrop"
       class="flex flex-row flex-wrap gap-1 items-center cursor-pointer"
     >
@@ -40,33 +40,16 @@
         <Draggable
           v-if="relation.type == relationKey.id"
           :data="relation"
-          :groups="['topic']"
+          :groups="[relation.two?.type]"
           @start="dragged = relation"
         >
           <TopicBadge
+            v-if="relation.two?.type == 'topic'"
             :title="relation.two?.title"
             :remove="() => handleRemove(relation)"
           />
-        </Draggable>
-      </span>
-    </Droppable>
-
-    <Droppable
-      v-for="relationKey of locations"
-      :id="relationKey.id"
-      :title="`${relationKey.active} location`"
-      :groups="['location']"
-      @drop="handleDrop"
-      class="flex flex-row flex-wrap gap-1 cursor-pointer"
-    >
-      <span v-for="relation of populated">
-        <Draggable
-          v-if="relation.type == relationKey.id"
-          :data="relation"
-          :groups="['location']"
-          @start="dragged = relation"
-        >
           <LocationBadge
+            v-if="relation.two?.type == 'location'"
             :title="relation.two?.title"
             :remove="() => handleRemove(relation)"
           />
@@ -78,16 +61,15 @@
 
 //
 <script setup lang="ts">
-import { ref, watchEffect } from 'vue';
+import { ref, watchEffect, onMounted } from 'vue';
 import Droppable from './Droppable.vue';
 import Draggable from './Draggable.vue';
 import TopicBadge from '@/components/badges/TopicBadge.vue';
 import LocationBadge from '@/components/badges/LocationBadge.vue';
 import { useRelation } from '@/composables/relationProvider';
 
-const { topics, locations } = defineProps<{
-  topics: Object[];
-  locations: Object[];
+const { relationKeys } = defineProps<{
+  relationKeys: Object[];
 }>();
 const {
   relations,
@@ -95,13 +77,14 @@ const {
   removeRelation,
   populateRelation
 } = useRelation();
-const dropped = ref<string | null>(null);
 const dragged = ref<Relation | null>(null);
 const populated = ref([]);
+const version = ref(0);
 
 const handleDrop = async (e: string) => {
   const changes = dragged.value?.type === e ? false: true;
   if (changes) await updateRelation(dragged.value?.id, e);
+  dragged.value = null;
 }
 
 const handleRemove = async (relation: Object) => {
@@ -117,5 +100,6 @@ watchEffect(async () => {
   populated.value = await Promise.all(
     relations.value.map(x => populateRelation(['spheres'], x))
   );
+  version.value += 1;
 });
 </script>
\ No newline at end of file
diff --git a/client/src/composables/relationProvider.ts b/client/src/composables/relationProvider.ts
index b02c2f27..b9ff95bd 100644
--- a/client/src/composables/relationProvider.ts
+++ b/client/src/composables/relationProvider.ts
@@ -1,5 +1,4 @@
 import { ref, computed, inject, provide, watch, onMounted, onUnmounted } from 'vue';
-import { relationKeyIds } from '@/assets/relationKeys';
 import gun from '@/services/gun';
 
 export function relationProvider(
