// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../../schema.svg"
}

model User {
  id       String    @id @default(uuid())
  username String    @unique() //make not unique
  email    String    @unique() // As email is in Profiles, maybe not needed
  image    String?
  password String
  profiles Profile[]
  settings Settings?
}

model Settings {
  id       String @id @default(uuid())
  userId   String @unique()
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  language String @default("en") // Default language
}

model Profile {
  id             String           @id @default(uuid()) // Changed to uuid
  username       String
  type           String
  image          String
  email          String // Every Profile can have an own email for notifications. Can be used for logins aswell
  about          String?
  userId         String? // Matches User ID type
  User           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests      Interest[]       @relation("ProfileInterests")
  locations      Location[]       @relation("ProfileLocations")
  activities     Activity[]
  PluginSettings PluginSettings[]
  Invite         Invite[]

  Profiles         ProfileProfile[]  @relation("ThisProfile")
  OtherProfiles    ProfileProfile[]  @relation("OtherProfile")
  ProfileLocations ProfileLocation[]
  ProfileInterests ProfileInterest[]
}

model Interest {
  id       String    @id @default(uuid())
  title    String
  language String    @default("en")
  profiles Profile[] @relation("ProfileInterests")
  links    String[]
  ask      String[]
  invites  String[]
  access   Int       @default(0)

  relations   Relation[]
  activities  Activity[]
  discussions Discussion[]
  Invite      Invite[]
  
  Interests        InterestInterest[] @relation("ThisInterest")
  OtherInterests   InterestInterest[] @relation("OtherInterest")
  ProfileInterest  ProfileInterest[]
  InterestLocation InterestLocation[]
}

model Location {
  id          String    @id @default(uuid())
  title       String
  xCoordinate String?
  yCoordinate String?
  latitude    Float?
  longitude   Float?
  geom        Bytes?
  zoom        Int?
  profiles    Profile[] @relation("ProfileLocations")
  links       String[]
  ask         String[]
  invites     String[]
  access      Int       @default(0)

  relations   Relation[]
  activities  Activity[]
  discussions Discussion[]
  Invite      Invite[]

  Locations        LocationLocation[] @relation("ThisLocation")
  OtherLocations   LocationLocation[] @relation("OtherLocation")
  ProfileLocation  ProfileLocation[]
  InterestLocation InterestLocation[]
}

model Relation { //connection
  id         String    @id @default(uuid())
  key        String
  type       String
  data       Json
  Interest   Interest? @relation(fields: [interestId], references: [id])
  interestId String?
  Location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
}

model Discussion {
  id         String    @id @default(uuid())
  type       String
  text       String
  limit      Int
  voters     String[]
  votes      Json
  attachment Json
  createdAt  DateTime  @default(now())
  Interest   Interest? @relation(fields: [interestId], references: [id])
  interestId String?
  Location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
  //api andpoints
}

model Invite {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  profileId  String
  Profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Interest   Interest? @relation(fields: [interestId], references: [id])
  interestId String?
  Location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
}

model Activity {
  id         String    @id @default(uuid())
  text       String
  href       String?
  status     Status
  type       Type
  date       DateTime  @default(now())
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id])
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])
  interestId String?
  interest   Interest? @relation(fields: [interestId], references: [id])

  @@index([profileId])
  @@index([locationId])
}

model PluginSettings {
  id        String  @id @default(uuid())
  name      String
  path      String
  key       String
  pluginId  String
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  active    Boolean @default(true)
  settings  Json[]
}

model ProfileInterest {
  key        String
  profileId  String
  Profile    Profile  @relation(fields: [profileId], references: [id])
  interestId String
  Interest   Interest @relation(fields: [interestId], references: [id])
  createdAt  DateTime @default(now())

  @@id([key, createdAt])
}

model ProfileLocation {
  key        String
  profileId  String
  Profile    Profile  @relation(fields: [profileId], references: [id])
  locationId String
  Location   Location @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())

  @@id([key, createdAt])
}

model ProfileProfile {
  key            String
  profileId      String
  Profile        Profile @relation("ThisProfile", fields: [profileId], references: [id])
  otherProfileId String
  OtherProfile   Profile @relation("OtherProfile", fields: [otherProfileId], references: [id])
  createdAt      DateTime @default(now())

  @@id([key, createdAt])
}

model InterestLocation {
  key        String
  interestId String
  Interest   Interest @relation(fields: [interestId], references: [id])
  locationId String
  Location   Location @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())

  @@id([key, createdAt])
}

model InterestInterest {
  key             String
  interestId      String
  Interest        Interest @relation("ThisInterest", fields: [interestId], references: [id])
  otherInterestId String
  OtherInterest   Interest @relation("OtherInterest", fields: [otherInterestId], references: [id])
  createdAt       DateTime @default(now())

  @@id([key, createdAt])
}

model LocationLocation {
  key             String
  locationId      String
  Location        Location @relation("ThisLocation", fields: [locationId], references: [id])
  otherLocationId String
  OtherLocation   Location @relation("OtherLocation", fields: [otherLocationId], references: [id])
  createdAt       DateTime @default(now())

  @@id([key, createdAt])
}

enum Type {
  NORMAL
  DISCUSSION
  POLL
  GOVERNANCE
  EVENT
}

enum Status {
  IMPORTANT
  ONGOING
  LEARNING
  TEACHING
  INTERESTED
  FAVOURITE
  CURRENTLY_AT
  GOING_NEXT
}
