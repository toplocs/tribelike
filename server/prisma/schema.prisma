// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../../schema.svg"
}

model User {
  id       String     @id @default(uuid())
  username String     @unique()
  email    String     @unique() // As email is in Profiles, maybe not needed
  password String
  profiles Profile[]
  settings Settings[]
}

model Settings {
  id       String  @id @default(uuid())
  userId   String? // Matches User ID type
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  language String  @default("en") // Default language
}

model Profile {
  id          String        @id @default(uuid()) // Changed to uuid
  username    String
  type        String
  image       String
  email       String // Every Profile can have an own email for notifications. Can be used for logins aswell
  about       String?
  userId      String? // Matches User ID type
  User        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests   Interest[]    @relation("ProfileInterests")
  locations   Location[]    @relation("ProfileLocations")
  ProfileFeed ProfileFeed[]
}

model ProfileFeed {
  id        String  @id @default(uuid())
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  status    Status

  interestId String?
  interest   Interest? @relation(fields: [interestId], references: [id], onDelete: Cascade)

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Interest {
  id          String        @id @default(uuid()) // Changed to uuid
  title       String
  language    String        @default("en") // The interest's language
  profiles    Profile[]     @relation("ProfileInterests")
  same        Interest[]    @relation("SameInterests") // List of same / synonymous / translations
  sameOf      Interest[]    @relation("SameInterests")
  parentId    String? // Matches Parent Interest ID
  parent      Interest?     @relation("ParentChildren", fields: [parentId], references: [id]) // Superior category
  children    Interest[]    @relation("ParentChildren") // Sub categories
  ProfileFeed ProfileFeed[]
}

model Location {
  id          String        @id @default(uuid()) // Changed to uuid
  title       String
  xCoordinate String?
  yCoordinate String?
  profiles    Profile[]     @relation("ProfileLocations")
  parentId    String?
  parent      Location?     @relation("ParentChildren", fields: [parentId], references: [id])
  children    Location[]    @relation("ParentChildren")
  ProfileFeed ProfileFeed[]
}

enum Status {
  LEARNING
  TEACHING
  INTERESTED
  FAVOURITE
  CURRENTLY_AT
  GOING_NEXT
}
